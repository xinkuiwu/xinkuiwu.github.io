<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6的JavaScript数据结构实现之字典与散列表</title>
    <url>/2019/10/16/blog10/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：字典和散列表。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/dictionary">ES6的JavaScript数据结构实现之字典与散列表</a></p>
<p><em>注：ES6也是新增加了Map类。此外还提供了WeakMap和WeakSet。基本上，Map和Set与其弱化版本之间仅有的区别是：WeakMap和WeakSet类没有entries、keys、values等方法；只能用对象作为键。而这两个弱化类是为了性能，可以使得JavaScript的垃圾回收器可以从中清除整个入口。此外，由于弱化类键只能是对象，所以不知道键就没办法找到值，这个性质可以用于封装ES6类的私有属性。</em></p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、字典（以-键，值-对的形式存储数据，table-key-key-value-）"><a href="#1、字典（以-键，值-对的形式存储数据，table-key-key-value-）" class="headerlink" title="1、字典（以[键，值]对的形式存储数据，table[key]&#x3D;{key, value}）"></a>1、字典（以[键，值]对的形式存储数据，table[key]&#x3D;{key, value}）</h4><p> &#x2F;&#x2F;注：由于JavaScript不是强类型的语言，不能保证键一定是字符串，所以需要把所有键名的传入的对象转换为字符串，使得Dictionary类中搜索和获取值更简单。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultToString</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UNDEFINED&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">toStrFn = defaultToString</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toStrFn</span> = toStrFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">hasKey</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)] != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">table</span>[tableKey] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key,value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasKey</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePair = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">    <span class="keyword">return</span> valuePair == <span class="literal">null</span> ? <span class="literal">undefined</span> : valuePair.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">keyValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">keys</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">key</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">forEach</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">callbackFn</span>(valuePairs[i].<span class="property">key</span>, valuePairs[i].<span class="property">value</span>);</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;valuePairs[<span class="number">0</span>].toString()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;valuePairs[i].toString()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dictionary = <span class="keyword">new</span> <span class="title class_">Dictionary</span>();</span><br><span class="line">dictionary.<span class="title function_">set</span>(<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;student&#x27;</span>);</span><br><span class="line">dictionary.<span class="title function_">set</span>(<span class="string">&#x27;Alice&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>);</span><br><span class="line">dictionary.<span class="title function_">set</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;student&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary.<span class="title function_">hasKey</span>(<span class="string">&#x27;Bob&#x27;</span>));</span><br><span class="line">dictionary.<span class="title function_">remove</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary.<span class="title function_">get</span>(<span class="string">&#x27;Alice&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary.<span class="title function_">keyValues</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary.<span class="title function_">keys</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary.<span class="title function_">values</span>());</span><br><span class="line">dictionary.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k, v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`forEach: `</span>, <span class="string">`key: <span class="subst">$&#123;k&#125;</span>,value: <span class="subst">$&#123;v&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2、散列表（HashTable类或HashMap类，它是Dictionary类的一种散列表实现方式）"><a href="#2、散列表（HashTable类或HashMap类，它是Dictionary类的一种散列表实现方式）" class="headerlink" title="2、散列表（HashTable类或HashMap类，它是Dictionary类的一种散列表实现方式）"></a>2、散列表（HashTable类或HashMap类，它是Dictionary类的一种散列表实现方式）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultToString</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UNDEFINED&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">toStrFn = defaultToString</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toStrFn</span> = toStrFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">loseloseHashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tableKey.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      hash += tableKey.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">hashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">loseloseHashCode</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key,value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuepair = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key)];</span><br><span class="line">    <span class="keyword">return</span> valuepair == <span class="literal">null</span> ? <span class="literal">undefined</span> : valuepair.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">    <span class="keyword">const</span> valuepair = <span class="variable language_">this</span>.<span class="property">table</span>[hash];</span><br><span class="line">    <span class="keyword">if</span> (valuepair != <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[hash];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="title function_">getTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`&#123;<span class="subst">$&#123;keys[<span class="number">0</span>]&#125;</span> =&gt; <span class="subst">$&#123;<span class="variable language_">this</span>.table[keys[<span class="number">0</span>]].toString()&#125;</span>&#125;`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,&#123;<span class="subst">$&#123;keys[i]&#125;</span> =&gt; <span class="subst">$&#123;<span class="variable language_">this</span>.table[keys[i]].toString()&#125;</span>&#125;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="title class_">HashTable</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">hashCode</span>(<span class="string">&#x27;Bob&#x27;</span>) + <span class="string">&#x27;-Bob&#x27;</span>);</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">20</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash);</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">21</span>); </span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">19</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">get</span>(<span class="string">&#x27;Alice&#x27;</span>));</span><br><span class="line">hash.<span class="title function_">remove</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="二、散列表的扩展"><a href="#二、散列表的扩展" class="headerlink" title="二、散列表的扩展"></a>二、散列表的扩展</h3><p>问题：有时候，一些键会有相同的散列值，不同的值在散列表中对应相同位置的时候，称为冲突。（冲突会导致散列表只保存最新的值，旧的值会被覆盖）</p>
<p>解决冲突：分离链接、线性探查和双散列法。（我们研究前两个）</p>
<h4 id="1、分离链接"><a href="#1、分离链接" class="headerlink" title="1、分离链接"></a>1、分离链接</h4><p>&#x2F;&#x2F;注：分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。（优点：简单；缺点：需要额外的存储空间）</p>
<p> &#x2F;&#x2F;本质是将Hash表的位置当做链表处理，先找到位置，对元素进行处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultToString</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UNDEFINED&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//载入之前我们写好的Linkedlist</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">element, next</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">element</span> = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next</span> = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultEquals</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">equalsFn = defaultEquals</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">equalsFn</span> = equalsFn;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">push</span>(<span class="params">element</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element);</span><br><span class="line"><span class="keyword">let</span> current;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">while</span> (current.<span class="property">next</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line">current.<span class="property">next</span> = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getElementAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; node != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">node = node.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">insert</span>(<span class="params">element, index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element);</span><br><span class="line"><span class="keyword">if</span> (index ==<span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">const</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">node.<span class="property">next</span> = current;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> previous = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index - <span class="number">1</span>);</span><br><span class="line">node.<span class="property">next</span> = previous.<span class="property">next</span>;</span><br><span class="line">previous.<span class="property">next</span> = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">removeAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = current.<span class="property">next</span>; </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> previous = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index - <span class="number">1</span>);</span><br><span class="line">current = previous.<span class="property">next</span>;</span><br><span class="line">previous.<span class="property">next</span> = current;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line"><span class="keyword">return</span> current.<span class="property">element</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element);</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">indexOf</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span> &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">equalsFn</span>(element, current.<span class="property">element</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHead</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.head.element&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="title function_">size</span>() &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span>;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分离链接</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTableSeparateChaining</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">toStrFn = defaultToString</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toStrFn</span> = toStrFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loseloseHashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tableKey.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      hash += tableKey.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">hashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">loseloseHashCode</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">ValuePair</span>(key, value));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">    <span class="keyword">const</span> linkedList = <span class="variable language_">this</span>.<span class="property">table</span>[position];</span><br><span class="line">    <span class="keyword">if</span> (linkedList != <span class="literal">null</span> &amp;&amp; !linkedList.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = linkedList.<span class="title function_">getHead</span>();</span><br><span class="line">      <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">element</span>.<span class="property">key</span> === key) &#123;</span><br><span class="line">          <span class="keyword">return</span> current.<span class="property">element</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">    <span class="keyword">const</span> linkedList = <span class="variable language_">this</span>.<span class="property">table</span>[position];</span><br><span class="line">    <span class="keyword">if</span> (linkedList != <span class="literal">null</span> &amp;&amp; !linkedList.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = linkedList.<span class="title function_">getHead</span>();</span><br><span class="line">      <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">element</span>.<span class="property">key</span> === key) &#123;</span><br><span class="line">          linkedList.<span class="title function_">remove</span>(current.<span class="property">element</span>);</span><br><span class="line">          <span class="keyword">if</span> (linkedList.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[position];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">linkedList</span> =&gt;</span> &#123;</span><br><span class="line">      count += linkedList.<span class="title function_">size</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`&#123;<span class="subst">$&#123;keys[<span class="number">0</span>]&#125;</span> =&gt; <span class="subst">$&#123;<span class="variable language_">this</span>.table[keys[<span class="number">0</span>]].toString()&#125;</span>&#125;`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,&#123;<span class="subst">$&#123;keys[i]&#125;</span> =&gt; <span class="subst">$&#123;<span class="variable language_">this</span>.table[</span></span></span><br><span class="line"><span class="subst"><span class="string">        keys[i]</span></span></span><br><span class="line"><span class="subst"><span class="string">      ].toString()&#125;</span>&#125;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashTable = <span class="keyword">new</span> <span class="title class_">HashTableSeparateChaining</span>();</span><br><span class="line"></span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Ygritte&#x27;</span>, <span class="string">&#x27;ygritte@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jonathan&#x27;</span>, <span class="string">&#x27;jonathan@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jamie&#x27;</span>, <span class="string">&#x27;jamie@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;jack@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jasmine&#x27;</span>, <span class="string">&#x27;jasmine@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;jake@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Nathan&#x27;</span>, <span class="string">&#x27;nathan@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Athelstan&#x27;</span>, <span class="string">&#x27;athelstan@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Sue&#x27;</span>, <span class="string">&#x27;sue@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Aethelwulf&#x27;</span>, <span class="string">&#x27;aethelwulf@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Sargeras&#x27;</span>, <span class="string">&#x27;sargeras@email.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;**** Printing Hash **** &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashTable.<span class="title function_">toString</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2、线性探查"><a href="#2、线性探查" class="headerlink" title="2、线性探查"></a>2、线性探查</h4><p> &#x2F;&#x2F;注：其处理冲突的方法是将元素直接存储到表中，而不是单独的数据结构中。当在某个位置position添加新元素，出现冲突时，就尝试添加到position+1的位置，如果position+1的位置也被某元素占据，则继续迭代，直到一个“空闲”的位置。</p>
<p>&#x2F;&#x2F;采用需要检验是否有必要将一个或多个元素移动到之前的位置的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultToString</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UNDEFINED&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性探查</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTableLinearProbing</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">toStrFn = defaultToString</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toStrFn</span> = toStrFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loseloseHashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tableKey.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      hash += tableKey.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">hashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">loseloseHashCode</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key, value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = position + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] != <span class="literal">null</span>) &#123;</span><br><span class="line">          index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">table</span>[index] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key, value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">key</span> === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">value</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> index = position + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] != <span class="literal">null</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> !== key) &#123;</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] != <span class="literal">null</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">value</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">key</span> === key) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[position];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">verifyRemoveSideEffect</span>(key, position);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> index = position + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] != <span class="literal">null</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> !== key) &#123;</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] != <span class="literal">null</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span> === key) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[index];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">verifyRemoveSideEffect</span>(key, index);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">verifyRemoveSideEffect</span>(<span class="params">key, removedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">    <span class="keyword">let</span> index = removedPosition + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> posHash = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(<span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span>);</span><br><span class="line">      <span class="keyword">if</span> (posHash &lt;= hash || posHash &lt;= removedPosition) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">table</span>[removedPosition] = <span class="variable language_">this</span>.<span class="property">table</span>[index];</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[index];</span><br><span class="line">        removedPosition = index;</span><br><span class="line">      &#125;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`&#123;<span class="subst">$&#123;keys[<span class="number">0</span>]&#125;</span> =&gt; <span class="subst">$&#123;<span class="variable language_">this</span>.table[keys[<span class="number">0</span>]].toString()&#125;</span>&#125;`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,&#123;<span class="subst">$&#123;keys[i]&#125;</span> =&gt; <span class="subst">$&#123;<span class="variable language_">this</span>.table[</span></span></span><br><span class="line"><span class="subst"><span class="string">        keys[i]</span></span></span><br><span class="line"><span class="subst"><span class="string">      ].toString()&#125;</span>&#125;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashTable = <span class="keyword">new</span> <span class="title class_">HashTableLinearProbing</span>();</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jamie&#x27;</span>, <span class="string">&#x27;jamie@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;jack@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jasmine&#x27;</span>, <span class="string">&#x27;jasmine@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;jake@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Nathan&#x27;</span>, <span class="string">&#x27;nathan@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Athelstan&#x27;</span>, <span class="string">&#x27;athelstan@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Sue&#x27;</span>, <span class="string">&#x27;sue@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Aethelwulf&#x27;</span>, <span class="string">&#x27;aethelwulf@email.com&#x27;</span>);</span><br><span class="line">hashTable.<span class="title function_">put</span>(<span class="string">&#x27;Sargeras&#x27;</span>, <span class="string">&#x27;sargeras@email.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashTable);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashTable.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashTable.<span class="title function_">get</span>(<span class="string">&#x27;Nathan&#x27;</span>)); <span class="comment">// nathan@email.com</span></span><br><span class="line"></span><br><span class="line">hashTable.<span class="title function_">remove</span>(<span class="string">&#x27;Ygritte&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashTable.<span class="title function_">get</span>(<span class="string">&#x27;Ygritte&#x27;</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashTable.<span class="title function_">toString</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>实现的lose lose散列函数并不是一个表现良好的散列函数，因为它会产生太多的冲突。一个表现良好的散列函数是由几个方面构成的：插入和检索元素的时间（即性能），以及较低的冲突可能性。例如djb2函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">djb2HashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">5381</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tableKey.<span class="property">length</span>; i++) &#123;</span><br><span class="line">   hash = (hash * <span class="number">33</span>) + tableKey.<span class="title function_">charCodeAt</span>(i);  </span><br><span class="line">    &#125;  </span><br><span class="line"> <span class="keyword">return</span> hash % <span class="number">1013</span>;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>字典与散列表</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>字典</tag>
        <tag>散列表</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之递归</title>
    <url>/2019/10/17/blog11/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：递归。（递归会使得操作树和图数据结构变得更简单。所以要理解递归。）（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/recursion">ES6的JavaScript数据结构实现之递归</a></p>
<h3 id="一、递归基础应用"><a href="#一、递归基础应用" class="headerlink" title="一、递归基础应用"></a>一、递归基础应用</h3><h4 id="1、计算一个数的阶乘"><a href="#1、计算一个数的阶乘" class="headerlink" title="1、计算一个数的阶乘"></a>1、计算一个数的阶乘</h4><h5 id="1-1迭代阶乘（循环实现）"><a href="#1-1迭代阶乘（循环实现）" class="headerlink" title="1.1迭代阶乘（循环实现）"></a>1.1迭代阶乘（循环实现）</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorialIterative</span>(<span class="params">number</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> n = number; n &gt; <span class="number">1</span>; n--) &#123;</span><br><span class="line">    total = total * n ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorialIterative</span>(<span class="number">5</span>)); <span class="comment">//120</span></span><br></pre></td></tr></table></figure>



<h5 id="1-2递归阶乘（使用递归时，要找到原始问题和子问题是什么。例如factorial-5-5-factorial-4-）"><a href="#1-2递归阶乘（使用递归时，要找到原始问题和子问题是什么。例如factorial-5-5-factorial-4-）" class="headerlink" title="1.2递归阶乘（使用递归时，要找到原始问题和子问题是什么。例如factorial(5)&#x3D;5*factorial(4)）"></a>1.2递归阶乘（使用递归时，要找到原始问题和子问题是什么。例如factorial(5)&#x3D;5*factorial(4)）</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorial</span>(<span class="number">5</span>));<span class="comment">//120</span></span><br></pre></td></tr></table></figure>



<h4 id="2、斐波那契数列。（斐波那契数列是另一个可以用递归解决的问题。）"><a href="#2、斐波那契数列。（斐波那契数列是另一个可以用递归解决的问题。）" class="headerlink" title="2、斐波那契数列。（斐波那契数列是另一个可以用递归解决的问题。）"></a>2、斐波那契数列。（斐波那契数列是另一个可以用递归解决的问题。）</h4><h5 id="2-1迭代求斐波那契数"><a href="#2-1迭代求斐波那契数" class="headerlink" title="2.1迭代求斐波那契数"></a>2.1迭代求斐波那契数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacciIterative</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fibNMinus2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> fibNMinus1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> fibN = n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    fibN = fibNMinus1 + fibNMinus2;</span><br><span class="line">    fibNMinus2 = fibNMinus1;</span><br><span class="line">    fibNMinus1 = fibN;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fibN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>



<h5 id="2-2递归求斐波那契数"><a href="#2-2递归求斐波那契数" class="headerlink" title="2.2递归求斐波那契数"></a>2.2递归求斐波那契数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciIterative</span>(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>



<h4 id="2-3记忆化斐波那契数"><a href="#2-3记忆化斐波那契数" class="headerlink" title="2.3记忆化斐波那契数"></a>2.3记忆化斐波那契数</h4><p>&#x2F;&#x2F;注：记忆化是一种保存前一个结果的值的优化技术，类似于缓存。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacciMemoization</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> memo = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fibonacci</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="literal">null</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    <span class="keyword">return</span> memo[n] = <span class="title function_">fibonacci</span>(n - <span class="number">1</span>, memo) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>, memo);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciMemoization</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciMemoization</span>(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacciMemoization</span>(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>递归</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之二叉堆和堆排序</title>
    <url>/2019/10/28/blog13/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：二叉堆和堆排序。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/heap">ES6的JavaScript数据结构实现之二叉堆和堆排序</a></p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、二叉堆（最小堆和最大堆；插入值（保持最小堆或最大堆结构）；找到最大值或者最小值；移除最小堆的最小值（堆的根节点））"><a href="#1、二叉堆（最小堆和最大堆；插入值（保持最小堆或最大堆结构）；找到最大值或者最小值；移除最小堆的最小值（堆的根节点））" class="headerlink" title="1、二叉堆（最小堆和最大堆；插入值（保持最小堆或最大堆结构）；找到最大值或者最小值；移除最小堆的最小值（堆的根节点））"></a>1、二叉堆（最小堆和最大堆；插入值（保持最小堆或最大堆结构）；找到最大值或者最小值；移除最小堆的最小值（堆的根节点））</h4><p>基本概念：二叉堆是一种特殊的二叉树，其有两个特性：结构特性和堆特性。结构特性是指它是一颗完全的二叉树（树的每一层都有左侧和右侧子节点（除了最后一层的叶节点），并且最后一层的叶节点尽可能都是左侧子节点）。堆特性是指二叉堆不是最小堆就是最大堆（最小堆可以快速导出树的最小值，最大堆可以快速导出树的最大值），所有的节点都大于等于（最大堆）或者小于等于（最小堆）每个它的子节点。</p>
<h5 id="1-1-最小堆"><a href="#1-1-最小堆" class="headerlink" title="1.1 最小堆"></a>1.1 最小堆</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseCompare</span>(<span class="params">compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="title function_">compareFn</span>(b, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinHeap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getLeftIndex</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getRightIndex</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * index + <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getParentIndex</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() &lt;= <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">findMinimum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">isEmpty</span>() ? <span class="literal">undefined</span> : <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">push</span>(value);</span><br><span class="line">      <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">siftUp</span>(index);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">siftUp</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="title function_">getParentIndex</span>(index);</span><br><span class="line">    <span class="keyword">while</span> (</span><br><span class="line">      index &gt; <span class="number">0</span> </span><br><span class="line">      &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">compareFn</span>(<span class="variable language_">this</span>.<span class="property">heap</span>[parent], <span class="variable language_">this</span>.<span class="property">heap</span>[index]) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span> </span><br><span class="line">      ) &#123;</span><br><span class="line">      swap (<span class="variable language_">this</span>.<span class="property">heap</span>, parent, index );</span><br><span class="line">      index = parent;</span><br><span class="line">      parent = <span class="variable language_">this</span>.<span class="title function_">getParentIndex</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">extract</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">shift</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> removedValue = <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">siftDown</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> removedValue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">siftDown</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> element = index;</span><br><span class="line">    <span class="keyword">const</span> left = <span class="variable language_">this</span>.<span class="title function_">getLeftIndex</span>(index);</span><br><span class="line">    <span class="keyword">const</span> right = <span class="variable language_">this</span>.<span class="title function_">getRightIndex</span>(index);</span><br><span class="line">    <span class="keyword">const</span> size = <span class="variable language_">this</span>.<span class="title function_">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      left &lt; size </span><br><span class="line">      &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">compareFn</span>(<span class="variable language_">this</span>.<span class="property">heap</span>[element], <span class="variable language_">this</span>.<span class="property">heap</span>[left]) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span></span><br><span class="line">      ) &#123;</span><br><span class="line">      element = left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      right &lt; size</span><br><span class="line">      &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">compareFn</span>(<span class="variable language_">this</span>.<span class="property">heap</span>[element], <span class="variable language_">this</span>.<span class="property">heap</span>[right] === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">      element = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index !== element) &#123;</span><br><span class="line">      <span class="title function_">swap</span>(<span class="variable language_">this</span>.<span class="property">heap</span>, index, element);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">siftDown</span>(element); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">heapify</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">heap</span> = array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> maxIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="title function_">size</span>() / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= maxIndex; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">siftDown</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getAsArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heap = <span class="keyword">new</span> <span class="title class_">MinHeap</span>();</span><br><span class="line">heap.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line">heap.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">heap.<span class="title function_">insert</span>(<span class="number">4</span>);</span><br><span class="line">heap.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap);</span><br><span class="line">heap.<span class="title function_">insert</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap.<span class="title function_">findMinimum</span>());</span><br><span class="line">heap.<span class="title function_">clear</span>();</span><br><span class="line"><span class="keyword">const</span> heap1 = <span class="keyword">new</span> <span class="title class_">MinHeap</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  heap.<span class="title function_">insert</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap.<span class="title function_">extract</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap);</span><br><span class="line"></span><br><span class="line"><span class="title class_">MinHeap</span></span><br></pre></td></tr></table></figure>



<h5 id="1-2-最大堆"><a href="#1-2-最大堆" class="headerlink" title="1.2 最大堆"></a>1.2 最大堆</h5><p>把最小堆中的比较函数修改为相反的就行了，即把最小堆中的所有大于的比较换成小于的比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MinHeap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(compareFn);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = <span class="title function_">reverseCompare</span>(compareFn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="二、简单应用"><a href="#二、简单应用" class="headerlink" title="二、简单应用"></a>二、简单应用</h3><h4 id="1、堆排序"><a href="#1、堆排序" class="headerlink" title="1、堆排序"></a>1、堆排序</h4><p>思路：用数组创建一个最大堆；最大的值放置堆的最后一个位置；将堆的大小减一，每次执行第二个步骤直至堆的大小为1。（这样就得到升序（从最小到最大）的数组，若要数组的降序排列，则我们用最小堆。）  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">array, index, heapSize, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> largest = index;</span><br><span class="line">  <span class="keyword">const</span> left = (<span class="number">2</span> * index) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> right = (<span class="number">2</span> * index) + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (left &lt; heapSize &amp;&amp; <span class="title function_">compareFn</span>(array[left], array[index]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    largest = left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (right &lt; heapSize &amp;&amp; <span class="title function_">compareFn</span>(array[right], array[largest]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    largest = right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (largest !== index) &#123;</span><br><span class="line">    <span class="title function_">swap</span>(array, index, largest);</span><br><span class="line">    <span class="title function_">heapify</span>(array, largest, heapSize, compareFn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buildMaxHeap</span>(<span class="params">array, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(array.<span class="property">length</span> / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i -= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">heapify</span>(array, i, array.<span class="property">length</span>, compareFn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">array = [], compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> heapSize = array.<span class="property">length</span>;</span><br><span class="line">  <span class="title function_">buildMaxHeap</span>(array, compareFn);</span><br><span class="line">  <span class="keyword">while</span> (heapSize &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">swap</span>(array, <span class="number">0</span>, --heapSize);</span><br><span class="line">    <span class="title function_">heapify</span>(array, <span class="number">0</span>, heapSize, compareFn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heapSort1 = <span class="keyword">new</span> <span class="title function_">heapSort</span>();</span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Before sorting: &#x27;</span>, array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;After sorting: &#x27;</span>, <span class="title function_">heapSort</span>(array));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>二叉堆和堆排序</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>二叉堆</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之树（二叉搜索树、AVL树、红黑树）</title>
    <url>/2019/10/21/blog12/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：二叉搜索树。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/binarySearchTree">ES6的JavaScript数据结构实现之树（二叉搜索树、AVL树、红黑树）</a></p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、二叉搜索树（插入元素；树的遍历：中序，先序和后序；搜索树中的值；移除元素。）"><a href="#1、二叉搜索树（插入元素；树的遍历：中序，先序和后序；搜索树中的值；移除元素。）" class="headerlink" title="1、二叉搜索树（插入元素；树的遍历：中序，先序和后序；搜索树中的值；移除元素。）"></a>1、二叉搜索树（插入元素；树的遍历：中序，先序和后序；搜索树中的值；移除元素。）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="title function_">preOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">min</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">minNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">minNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = node;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.<span class="property">left</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">maxNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">maxNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = node;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.<span class="property">right</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">search</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">searchNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="title function_">removeNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// key is equal to node.item</span></span><br><span class="line">    <span class="comment">// handle 3 special conditions</span></span><br><span class="line">    <span class="comment">// 1 - a leaf node</span></span><br><span class="line">    <span class="comment">// 2 - a node with only 1 child</span></span><br><span class="line">    <span class="comment">// 3 - a node with 2 children</span></span><br><span class="line">    <span class="comment">// case 1</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// case 2</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">right</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">if</span> (node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">left</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// case 3</span></span><br><span class="line">    <span class="keyword">const</span> aux = <span class="variable language_">this</span>.<span class="title function_">minNode</span>(node.<span class="property">right</span>);</span><br><span class="line">    node.<span class="property">key</span> = aux.<span class="property">key</span>;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">right</span>, aux.<span class="property">key</span>);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">11</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">12</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">7</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">13</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">8</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">printNode</span> = (<span class="params">value</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">tree.<span class="title function_">inOrderTraverse</span>(printNode);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;******&#x27;</span>);</span><br><span class="line">tree.<span class="title function_">preOrderTraverse</span>(printNode);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;******&#x27;</span>);</span><br><span class="line">tree.<span class="title function_">postOrderTraverse</span>(printNode);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;******&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree.<span class="title function_">min</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree.<span class="title function_">max</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree.<span class="title function_">search</span>(<span class="number">7</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree.<span class="title function_">search</span>(<span class="number">6</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree);</span><br><span class="line">tree.<span class="title function_">remove</span>(<span class="number">12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="二、二叉搜索树的扩展（自平衡树、AVL树、红黑树）"><a href="#二、二叉搜索树的扩展（自平衡树、AVL树、红黑树）" class="headerlink" title="二、二叉搜索树的扩展（自平衡树、AVL树、红黑树）"></a>二、二叉搜索树的扩展（自平衡树、AVL树、红黑树）</h4><p>BST存在一个问题：取决于我们添加的节点数，数的一条边可能会非常深。这会在需要在某条边上添加、移除和搜索某个节点时引起的一些性能问题。为解决这个问题，有一种树叫Adelson-Velskii-Landi树（AVL树）。AVL树是一种自平衡的二叉搜索树（任何一个节点左右两侧子树的高度之差最多为1）。此外，红黑树也是一个自平衡二叉搜索树（如果需要一个包含多次插入和删除的自平衡树，红黑树要优于AVL树）。</p>
<p> 1、Adelson-Velskii-Landi树（AVL树）（节点的高度和平衡因子；平衡操作–AVL旋转；插入节点；移除节点）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="title function_">preOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">min</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">minNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">minNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = node;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.<span class="property">left</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">maxNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">maxNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = node;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.<span class="property">right</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">search</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">searchNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="title function_">removeNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// key is equal to node.item</span></span><br><span class="line">    <span class="comment">// handle 3 special conditions</span></span><br><span class="line">    <span class="comment">// 1 - a leaf node</span></span><br><span class="line">    <span class="comment">// 2 - a node with only 1 child</span></span><br><span class="line">    <span class="comment">// 3 - a node with 2 children</span></span><br><span class="line">    <span class="comment">// case 1</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// case 2</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">right</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">if</span> (node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">left</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// case 3</span></span><br><span class="line">    <span class="keyword">const</span> aux = <span class="variable language_">this</span>.<span class="title function_">minNode</span>(node.<span class="property">right</span>);</span><br><span class="line">    node.<span class="property">key</span> = aux.<span class="property">key</span>;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">right</span>, aux.<span class="property">key</span>);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BalanceFactor</span> = &#123;</span><br><span class="line">  <span class="attr">UNBALANCED_RIGHT</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">SLIGHTLY_UNBALANCED_RIGHT</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">BALANCED</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">SLIGHTLY_UNBALANCED_LEFT</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">UNBALANCED_LEFT</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AVLTree</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(compareFn);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getNodeHeigh</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Max</span>.<span class="property">max</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getNodeHeigh</span>(node.<span class="property">left</span>), <span class="variable language_">this</span>.<span class="title function_">getNodeHeigh</span>(node.<span class="property">right</span>)</span><br><span class="line">      ) + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getBalanceFactor</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> heightDifference = <span class="variable language_">this</span>.<span class="title function_">getNodeHeigh</span>(node.<span class="property">left</span>) - </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getNodeHeigh</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">switch</span> (heightDifference) &#123;</span><br><span class="line">      <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">BalanceFactor</span>.<span class="property">UNBALANCED_RIGHT</span>;</span><br><span class="line">      <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">BalanceFactor</span>.<span class="property">SLIGHTLY_UNBALANCED_RIGHT</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">BalanceFactor</span>.<span class="property">SLIGHTLY_UNBALANCED_LEFT</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">BalanceFactor</span>.<span class="property">UNBALANCED_LEFT</span>;</span><br><span class="line">      <span class="attr">default</span>:   </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">BalanceFactor</span>.<span class="property">BALANCED</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">rotationLL</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = node.<span class="property">left</span>;</span><br><span class="line">    node.<span class="property">left</span> = tmp.<span class="property">right</span>;</span><br><span class="line">    tmp.<span class="property">right</span> = node;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">rotationRR</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = node.<span class="property">right</span>;</span><br><span class="line">    node.<span class="property">right</span> = tmp.<span class="property">left</span>;</span><br><span class="line">    tmp.<span class="property">left</span> = node;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">rotationLR</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="title function_">rotationRR</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationLL</span>(node);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">rotationRL</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">ratationLL</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationRR</span>(node);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> balanceFactor = <span class="variable language_">this</span>.<span class="title function_">getBalanceFactor</span>(node);</span><br><span class="line">    <span class="keyword">if</span> (balanceFactor === <span class="title class_">BalanceFactor</span>.<span class="property">UNBALANCED_LEFT</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">left</span>.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">        node = <span class="variable language_">this</span>.<span class="title function_">rotationLL</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationLR</span>(node); </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (balanceFactor === <span class="title class_">BalanceFactor</span>.<span class="property">UNBALANCED_RIGHT</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">right</span>.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">        node = <span class="variable language_">this</span>. <span class="title function_">rotationRR</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationRL</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    node = <span class="variable language_">super</span>.<span class="title function_">removeNode</span>(node, key);</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> balanceFactor = <span class="variable language_">this</span>.<span class="title function_">getBalanceFactor</span>(node);</span><br><span class="line">    <span class="keyword">if</span> (balanceFactor === <span class="title class_">BalanceFactor</span>.<span class="property">UNBALANCED_LEFT</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        balanceFactorLeft === <span class="title class_">BalanceFactor</span>.<span class="property">BALANCED</span> || </span><br><span class="line">        balanceFactorLeft === <span class="title class_">BalanceFactor</span>.<span class="property">SLIGHTLY_UNBALANCED_LEFT</span></span><br><span class="line">        ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationLL</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        balanceFactorLeft === <span class="title class_">BalanceFactor</span>.<span class="property">SLIGHTLY_UNBALANCED_RIGHT</span></span><br><span class="line">        ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationLR</span>(node.<span class="property">left</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BalanceFactor</span> === <span class="title class_">BalanceFactor</span>.<span class="property">UNBALANCED_RIGHT</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        balanceFactorRight === <span class="title class_">BalanceFactor</span>.<span class="property">BALANCED</span> || </span><br><span class="line">        balanceFactorRight === <span class="title class_">BalanceFactor</span>.<span class="property">SLIGHTLY_UNBALANCED_RIGHT</span></span><br><span class="line">        ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationRR</span>(node);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        balanceFactorRight === <span class="title class_">BalanceFactor</span>.<span class="property">SLIGHTLY_UNBALANCED_LEFT</span></span><br><span class="line">        ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">rotationRL</span>(node.<span class="property">right</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、红黑树（红黑树的规则；重新填色和旋转；插入节点；移除节点；）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">inOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="title function_">preOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">preOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraverseNode</span>(<span class="params">node, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(node.<span class="property">left</span>, callback);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">postOrderTraverseNode</span>(node.<span class="property">right</span>, callback);</span><br><span class="line">      <span class="title function_">callback</span>(node.<span class="property">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">min</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">minNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">minNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = node;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.<span class="property">left</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">maxNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">maxNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = node;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.<span class="property">right</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      current = current.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">search</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">searchNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">searchNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="title function_">removeNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// key is equal to node.item</span></span><br><span class="line">    <span class="comment">// handle 3 special conditions</span></span><br><span class="line">    <span class="comment">// 1 - a leaf node</span></span><br><span class="line">    <span class="comment">// 2 - a node with only 1 child</span></span><br><span class="line">    <span class="comment">// 3 - a node with 2 children</span></span><br><span class="line">    <span class="comment">// case 1</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// case 2</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">right</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">if</span> (node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.<span class="property">left</span>;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// case 3</span></span><br><span class="line">    <span class="keyword">const</span> aux = <span class="variable language_">this</span>.<span class="title function_">minNode</span>(node.<span class="property">right</span>);</span><br><span class="line">    node.<span class="property">key</span> = aux.<span class="property">key</span>;</span><br><span class="line">    node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">removeNode</span>(node.<span class="property">right</span>, aux.<span class="property">key</span>);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedBlackNode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(key);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">RED</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isRed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">color</span> === <span class="title class_">Colors</span>.<span class="property">RED</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedBlackTree</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(compareFn);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = <span class="keyword">new</span> <span class="title class_">RedBlackNode</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span>.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newNode = <span class="variable language_">this</span>.<span class="title function_">inserNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">fixTreeProperties</span>(newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insertNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compareFn</span>(key, node.<span class="property">key</span>) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">RedBlackNode</span>(key);</span><br><span class="line">        node.<span class="property">left</span>.<span class="property">parent</span> = node;</span><br><span class="line">        <span class="keyword">return</span> node.<span class="property">left</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">left</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      node.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">RedBlackNode</span>(key);</span><br><span class="line">      node.<span class="property">right</span>.<span class="property">parent</span> = node;</span><br><span class="line">      <span class="keyword">return</span> node.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">insertNode</span>(node.<span class="property">right</span>, key);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fixTreeProperties</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (node &amp;&amp; node.<span class="property">parent</span> &amp;&amp; node.<span class="property">parent</span>.<span class="property">color</span>.<span class="title function_">isRed</span>() </span><br><span class="line">      &amp;&amp; node.<span class="property">color</span> !== <span class="title class_">Colors</span>.<span class="property">BLACK</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> parent = node.<span class="property">parent</span>;</span><br><span class="line">      <span class="keyword">const</span> grandParent = parent.<span class="property">parent</span>;</span><br><span class="line">      <span class="keyword">if</span> (grandParent &amp;&amp; grandParent.<span class="property">left</span> === parent) &#123;</span><br><span class="line">        <span class="keyword">const</span> uncle = grandParent.<span class="property">right</span>;</span><br><span class="line">        <span class="keyword">if</span> (uncle &amp;&amp; uncle.<span class="property">color</span> === <span class="title class_">Colors</span>.<span class="property">RED</span>) &#123;</span><br><span class="line">          grandParent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">RED</span>;</span><br><span class="line">          parent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">          uncle.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">          node = grandParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (node === parent.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">rotationRR</span>(parent);</span><br><span class="line">            node = parent;</span><br><span class="line">            parent = node.<span class="property">parent</span>;  </span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">rotationLL</span>(grandParent);</span><br><span class="line">          parent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">          grandParent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">RED</span>;</span><br><span class="line">          node = parent;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> uncle = grandParent.<span class="property">left</span>;</span><br><span class="line">        <span class="keyword">if</span> (uncle &amp;&amp; uncle.<span class="property">color</span> === <span class="title class_">Colors</span>.<span class="property">RED</span>) &#123;</span><br><span class="line">          grandParent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">RED</span>;</span><br><span class="line">          parent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">          uncle.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">          node = grandParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (node === parent.<span class="property">left</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">rotationLL</span>(parent);</span><br><span class="line">            node = parent;</span><br><span class="line">            parent = node.<span class="property">parent</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">rotationRR</span>(grandParent);</span><br><span class="line">          parent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">          grandParent.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">RED</span>;</span><br><span class="line">          node = parent;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span>.<span class="property">color</span> = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">rotationLL</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = node.<span class="property">left</span>;</span><br><span class="line">    node.<span class="property">left</span> = tmp.<span class="property">right</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp.<span class="property">right</span> &amp;&amp; tmp.<span class="property">right</span>.<span class="property">key</span>) &#123;</span><br><span class="line">      tmp.<span class="property">right</span>.<span class="property">parent</span> = node;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="property">parent</span> = node.<span class="property">parent</span>;</span><br><span class="line">    <span class="keyword">if</span> (!node.<span class="property">parent</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(node === node.<span class="property">parent</span>.<span class="property">left</span>) &#123;</span><br><span class="line">        node.<span class="property">parent</span>.<span class="property">left</span> = tmp;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        node.<span class="property">parent</span>.<span class="property">right</span> = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="property">right</span> = node;</span><br><span class="line">    node.<span class="property">parent</span> = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">rotationRR</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = node.<span class="property">right</span>;</span><br><span class="line">    node.<span class="property">right</span> = tmp.<span class="property">left</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp.<span class="property">left</span> &amp;&amp; tmp.<span class="property">left</span>.<span class="property">key</span>) &#123;</span><br><span class="line">      tmp.<span class="property">left</span>.<span class="property">parent</span> = node;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="property">parent</span> = node.<span class="property">parent</span>;</span><br><span class="line">    <span class="keyword">if</span> (!node.<span class="property">parent</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node === node.<span class="property">parent</span>.<span class="property">left</span>) &#123;</span><br><span class="line">        node.<span class="property">parent</span>.<span class="property">left</span> = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        node.<span class="property">parent</span>.<span class="property">right</span> = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="property">left</span> = node;</span><br><span class="line">    node.<span class="property">parent</span> = tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>树（二叉搜索树、AVL树、红黑树）</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>二叉搜索树</tag>
        <tag>AVL树</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之图</title>
    <url>/2019/10/29/blog14/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：图，图的遍历（广度优先搜索BFS，深度优先搜索DFS），最短路径算法，最小生成树算法。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/graph">ES6的JavaScript数据结构实现之图</a></p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、图（创建Graph类）"><a href="#1、图（创建Graph类）" class="headerlink" title="1、图（创建Graph类）"></a>1、图（创建Graph类）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import dictionary</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultToString</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UNDEFINED&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">toStrFn = defaultToString</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toStrFn</span> = toStrFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">hasKey</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)] != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">table</span>[tableKey] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key,value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasKey</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePair = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">    <span class="keyword">return</span> valuePair == <span class="literal">null</span> ? <span class="literal">undefined</span> : valuePair.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">keyValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">keys</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">key</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">forEach</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">callbackFn</span>(valuePairs[i].<span class="property">key</span>, valuePairs[i].<span class="property">value</span>);</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;valuePairs[<span class="number">0</span>].toString()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;valuePairs[i].toString()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (isDirected = <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isDirected</span> = isDirected;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span> = <span class="keyword">new</span> <span class="title class_">Dictionary</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addVertex</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">includes</span>(v)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">push</span>(v);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">set</span>(v, []);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addEdge</span>(<span class="params">a, b </span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(a)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addVertex</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(b)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">adjList</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(a).<span class="title function_">push</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isDirected</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(b).<span class="title function_">push</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getVertices</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">vertices</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getAdjList</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">adjList</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      s += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.vertices[i]&#125;</span> -&gt; `</span>;</span><br><span class="line">      <span class="keyword">const</span> neighbors = <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>.<span class="property">vertices</span>[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; neighbors.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        s +=<span class="string">`<span class="subst">$&#123;neighbors[j]&#125;</span> `</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      s += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> <span class="title class_">Graph</span>();</span><br><span class="line"><span class="keyword">const</span> myVertices = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myVertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  graph.<span class="title function_">addVertex</span>(myVertices[i]);</span><br><span class="line">&#125;</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="title class_">Graph</span></span><br></pre></td></tr></table></figure>



<h3 id="二、简单应用"><a href="#二、简单应用" class="headerlink" title="二、简单应用"></a>二、简单应用</h3><h4 id="1、图的遍历"><a href="#1、图的遍历" class="headerlink" title="1、图的遍历"></a>1、图的遍历</h4><h5 id="1-1-广度优先搜索（算法工作原理实现；使用BFS寻找最短路径）"><a href="#1-1-广度优先搜索（算法工作原理实现；使用BFS寻找最短路径）" class="headerlink" title="1.1 广度优先搜索（算法工作原理实现；使用BFS寻找最短路径）"></a>1.1 广度优先搜索（算法工作原理实现；使用BFS寻找最短路径）</h5><p>概念：广度优先搜索算法会从指定的第一个顶点开始遍历图，先访问其所有的邻点（相邻顶点），就像一次访问图的一层（先宽后深地访问顶点）。使用BFS寻找最短路径（给定一个图G和源顶点v，找出每个顶点u和v之间最短路径的距离（以边的数量计））。</p>
<p>注：在上面的最短路径算法中，图不是加权的。如果要计算加权图中的最短路径，广度优先搜索未必合适，要考虑使用Dijkstra算法、Floyd-Warshell算法、Bellman-Ford算法、A*搜索算法（前两者的实现在本博客的最后）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import dictionary</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultToString</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UNDEFINED&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">toStrFn = defaultToString</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toStrFn</span> = toStrFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">hasKey</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)] != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">table</span>[tableKey] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key,value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasKey</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePair = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">    <span class="keyword">return</span> valuePair == <span class="literal">null</span> ? <span class="literal">undefined</span> : valuePair.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">keyValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">keys</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">key</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">forEach</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">callbackFn</span>(valuePairs[i].<span class="property">key</span>, valuePairs[i].<span class="property">value</span>);</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;valuePairs[<span class="number">0</span>].toString()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;valuePairs[i].toString()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (isDirected = <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isDirected</span> = isDirected;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span> = <span class="keyword">new</span> <span class="title class_">Dictionary</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addVertex</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">includes</span>(v)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">push</span>(v);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">set</span>(v, []);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addEdge</span>(<span class="params">a, b </span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(a)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addVertex</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(b)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">adjList</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(a).<span class="title function_">push</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isDirected</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(b).<span class="title function_">push</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getVertices</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">vertices</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getAdjList</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">adjList</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      s += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.vertices[i]&#125;</span> -&gt; `</span>;</span><br><span class="line">      <span class="keyword">const</span> neighbors = <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>.<span class="property">vertices</span>[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; neighbors.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        s +=<span class="string">`<span class="subst">$&#123;neighbors[j]&#125;</span> `</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      s += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//import Queue</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> =&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">enqueue</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>] = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span>++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> - <span class="variable language_">this</span>.<span class="property">lowestCount</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="variable language_">this</span>.lowestCount]&#125;</span>`</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="variable language_">this</span>.<span class="property">lowestCount</span> + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span>;i++)&#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stack for shortest path - BFS</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>] = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">/* while (!this.isEmpty()) &#123;</span></span><br><span class="line"><span class="comment">this.pop();</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span>; i++) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Colors</span> = &#123;</span><br><span class="line">  <span class="attr">WHITE</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">GREY</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">BLACK</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initializeColor</span> = vertices =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> color = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    color[vertices[i]] = <span class="title class_">Colors</span>.<span class="property">WHITE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">breadthFirstSearch</span> = (<span class="params">graph, startVertex, callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> vertices = graph.<span class="title function_">getVertices</span>();</span><br><span class="line">  <span class="keyword">const</span> adjList = graph.<span class="title function_">getAdjList</span>();</span><br><span class="line">  <span class="keyword">const</span> color = <span class="title function_">initializeColor</span>(vertices);</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>;</span><br><span class="line"></span><br><span class="line">  queue.<span class="title function_">enqueue</span>(startVertex);</span><br><span class="line">  <span class="keyword">while</span> (!queue.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">const</span> u = queue.<span class="title function_">dequeue</span>();</span><br><span class="line">    <span class="keyword">const</span> neighbors = adjList.<span class="title function_">get</span>(u);</span><br><span class="line">    color[u] = <span class="title class_">Colors</span>.<span class="property">GREY</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; neighbors.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> w = neighbors[i];</span><br><span class="line">      <span class="keyword">if</span> (color[w] === <span class="title class_">Colors</span>.<span class="property">WHITE</span>) &#123;</span><br><span class="line">        color[w] = <span class="title class_">Colors</span>.<span class="property">GREY</span>;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(w);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    color[u] = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BFS</span> = (<span class="params">graph, startVertex</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> vertices = graph.<span class="title function_">getVertices</span>();</span><br><span class="line">  <span class="keyword">const</span> adjList = graph.<span class="title function_">getAdjList</span>();</span><br><span class="line">  <span class="keyword">const</span> color = <span class="title function_">initializeColor</span>(vertices);</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>;</span><br><span class="line">  <span class="keyword">const</span> distances =  &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> predecessors = &#123;&#125;;</span><br><span class="line">  queue.<span class="title function_">enqueue</span>(startVertex);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    distances[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">    predecessors[vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!queue.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">const</span> u = queue.<span class="title function_">dequeue</span>();</span><br><span class="line">    <span class="keyword">const</span> neighbors = adjList.<span class="title function_">get</span>(u);</span><br><span class="line">    color[u] = <span class="title class_">Colors</span>.<span class="property">GREY</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; neighbors.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> w = neighbors[i];</span><br><span class="line">      <span class="keyword">if</span> (color[w] === <span class="title class_">Colors</span>.<span class="property">WHITE</span>) &#123;</span><br><span class="line">        color[w] = <span class="title class_">Colors</span>.<span class="property">GREY</span>;</span><br><span class="line">        distances[w] = distances[u] + <span class="number">1</span>;</span><br><span class="line">        predecessors[w] = u;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(w);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    color[u] = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    distances,</span><br><span class="line">    predecessors</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> <span class="title class_">Graph</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myVertices = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myVertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  graph.<span class="title function_">addVertex</span>(myVertices[i]);</span><br><span class="line">&#125;</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;********* printing graph ***********&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;********* bfs with callback ***********&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">printVertex</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Visited vertex: &#x27;</span> + value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">breadthFirstSearch</span>(graph, myVertices[<span class="number">0</span>], printVertex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;********* shortest path - BFS ***********&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> shortestPathA = <span class="title function_">BFS</span>(graph, myVertices[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shortestPathA.<span class="property">distances</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shortestPathA.<span class="property">predecessors</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fromVertex = myVertices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; myVertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> toVertex = myVertices[i];</span><br><span class="line">  <span class="keyword">const</span> path = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v = toVertex; v !== fromVertex; v = shortestPathA.<span class="property">predecessors</span>[v]) &#123;</span><br><span class="line">    path.<span class="title function_">push</span>(v);</span><br><span class="line">  &#125;</span><br><span class="line">  path.<span class="title function_">push</span>(fromVertex);</span><br><span class="line">  <span class="keyword">let</span> s = path.<span class="title function_">pop</span>();</span><br><span class="line">  <span class="keyword">while</span> (!path.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    s += <span class="string">&#x27;-&#x27;</span> + path.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="variable constant_">BFS</span></span><br></pre></td></tr></table></figure>



<h5 id="1-2-深度优先搜索-（算法工作原理的实现；构建森林；拓扑排序）"><a href="#1-2-深度优先搜索-（算法工作原理的实现；构建森林；拓扑排序）" class="headerlink" title="1.2 深度优先搜索 （算法工作原理的实现；构建森林；拓扑排序）"></a>1.2 深度优先搜索 （算法工作原理的实现；构建森林；拓扑排序）</h5><p> 概念：深度优先搜索算法将会从一个指定的顶点开始遍历图，沿着路径直到这条路径最后一个顶点被访问了，接着原路回退并探索下一条路径（先深度后广度地访问顶点）。对于给定的图G，我们希望深度优先搜索算法遍历图G的所有节点，构建“森林”（有根树的一个集合）以及一组源顶点（根），并输出两个数组：发现时间和完成探索时间。而这些信息，我们可以用来做拓扑排序（当我们需要编排一些任务或者步骤的执行顺序时，这称为拓扑排序，其只能应用于有向无环图DAG）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import dictionary</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValuePair</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultToString</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (item === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;UNDEFINED&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">toStrFn = defaultToString</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toStrFn</span> = toStrFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">hasKey</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)] != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">table</span>[tableKey] = <span class="keyword">new</span> <span class="title class_">ValuePair</span>(key,value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasKey</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePair = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStrFn</span>(key)];</span><br><span class="line">    <span class="keyword">return</span> valuePair == <span class="literal">null</span> ? <span class="literal">undefined</span> : valuePair.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">keyValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">keys</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.<span class="property">key</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">forEach</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">callbackFn</span>(valuePairs[i].<span class="property">key</span>, valuePairs[i].<span class="property">value</span>);</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;valuePairs[<span class="number">0</span>].toString()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; valuePairs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;valuePairs[i].toString()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (isDirected = <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isDirected</span> = isDirected;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span> = <span class="keyword">new</span> <span class="title class_">Dictionary</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addVertex</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">includes</span>(v)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">push</span>(v);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">set</span>(v, []);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addEdge</span>(<span class="params">a, b </span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(a)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addVertex</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(b)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">adjList</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(a).<span class="title function_">push</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isDirected</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(b).<span class="title function_">push</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getVertices</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">vertices</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getAdjList</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">adjList</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      s += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.vertices[i]&#125;</span> -&gt; `</span>;</span><br><span class="line">      <span class="keyword">const</span> neighbors = <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>.<span class="property">vertices</span>[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; neighbors.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        s +=<span class="string">`<span class="subst">$&#123;neighbors[j]&#125;</span> `</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      s += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Colors</span> = &#123;</span><br><span class="line">  <span class="attr">WHITE</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">GREY</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">BLACK</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initializeColor</span> = vertices =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> color = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    color[vertices[i]] = <span class="title class_">Colors</span>.<span class="property">WHITE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">depthFirstSearchVisit</span> = (<span class="params">u, color, adjList, callback</span>) =&gt;&#123;</span><br><span class="line">  color[u] = <span class="title class_">Colors</span>.<span class="property">GREY</span>;</span><br><span class="line">  <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> neighbors = adjList.<span class="title function_">get</span>(u);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; neighbors.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> w = neighbors[i];</span><br><span class="line">    <span class="keyword">if</span> (color[w] === <span class="title class_">Colors</span>.<span class="property">WHITE</span>) &#123;</span><br><span class="line">      <span class="title function_">depthFirstSearchVisit</span>(w, color, adjList, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  color[u] = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">depthFirstSearch</span> = (<span class="params">graph, callback</span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> vertices = graph.<span class="title function_">getVertices</span>();</span><br><span class="line">  <span class="keyword">const</span> adjList =  graph.<span class="title function_">getAdjList</span>();</span><br><span class="line">  <span class="keyword">const</span> color = <span class="title function_">initializeColor</span>(vertices);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (color[vertices[i]] === <span class="title class_">Colors</span>.<span class="property">WHITE</span>) &#123;</span><br><span class="line">      <span class="title function_">depthFirstSearchVisit</span>(vertices[i], color, adjList, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DFSVisit</span> = (<span class="params">u, color, d, f, p, time, adjList</span>) =&gt; &#123;</span><br><span class="line">  color[u] = <span class="title class_">Colors</span>.<span class="property">GREY</span>;</span><br><span class="line">  d[u] = ++time.<span class="property">count</span>;</span><br><span class="line">  <span class="keyword">const</span> neighbors = adjList.<span class="title function_">get</span>(u);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span>; i &lt;neighbors.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> w = neighbors[i];</span><br><span class="line">    <span class="keyword">if</span> (color[w] === <span class="title class_">Colors</span>.<span class="property">WHITE</span>) &#123;</span><br><span class="line">      p[w] = u;</span><br><span class="line">      <span class="title class_">DFSVisit</span>(w, color, d, f, p, time, adjList);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  color[u] = <span class="title class_">Colors</span>.<span class="property">BLACK</span>;</span><br><span class="line">  f[u] = ++time.<span class="property">count</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DFS</span> = graph =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> vertices = graph.<span class="title function_">getVertices</span>();</span><br><span class="line">  <span class="keyword">const</span> adjList = graph.<span class="title function_">getAdjList</span>();</span><br><span class="line">  <span class="keyword">const</span> color = <span class="title function_">initializeColor</span>(vertices);</span><br><span class="line">  <span class="keyword">const</span> d = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> f = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> p = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> time = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    f[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">    d[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">    p[vertices[i]] = <span class="literal">null</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (color[vertices[i]] === <span class="title class_">Colors</span>.<span class="property">WHITE</span>) &#123;</span><br><span class="line">      <span class="title class_">DFSVisit</span>(vertices[i], color, d, f, p, time, adjList);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">discovery</span>: d,</span><br><span class="line">    <span class="attr">finished</span>: f,</span><br><span class="line">    <span class="attr">predecessors</span>:p</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> graph = <span class="keyword">new</span> <span class="title class_">Graph</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myVertices = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myVertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  graph.<span class="title function_">addVertex</span>(myVertices[i]);</span><br><span class="line">&#125;</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;I&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;********* printing graph ***********&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;********* dfs with callback ***********&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">printVertex</span> = value =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Visited vertex: &#x27;</span> + value);</span><br><span class="line"></span><br><span class="line"><span class="title function_">depthFirstSearch</span>(graph, printVertex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;*********  DFS ***********&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">DFS</span>(graph);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;discovery&#x27;</span>, result.<span class="property">discovery</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finished&#x27;</span>, result.<span class="property">finished</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;predecessors&#x27;</span>, result.<span class="property">predecessors</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;********* topological sort - DFS ***********&#x27;</span>);</span><br><span class="line"></span><br><span class="line">graph = <span class="keyword">new</span> <span class="title class_">Graph</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">myVertices = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; myVertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  graph.<span class="title function_">addVertex</span>(myVertices[i]);</span><br><span class="line">&#125;</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">DFS</span>(graph);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;discovery&#x27;</span>, result.<span class="property">discovery</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finished&#x27;</span>, result.<span class="property">finished</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;predecessors&#x27;</span>, result.<span class="property">predecessors</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fTimes = result2.<span class="property">finished</span>;</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> count = <span class="number">0</span>; count &lt; myVertices.<span class="property">length</span>; count ++) &#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> maxName = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; myVertices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fTimes[myVertices[i]] &gt; max ) &#123;</span><br><span class="line">      max = fTimes[myVertices[i]];</span><br><span class="line">      maxName = myVertices[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  s += <span class="string">&#x27; - &#x27;</span> + maxName;</span><br><span class="line">  <span class="keyword">delete</span> fTimes[maxName]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">DFS</span></span><br></pre></td></tr></table></figure>



<h5 id="1-3-最短路径算法（Dijkstra算法、Floyd-Warshall算法）"><a href="#1-3-最短路径算法（Dijkstra算法、Floyd-Warshall算法）" class="headerlink" title="1.3 最短路径算法（Dijkstra算法、Floyd-Warshall算法）"></a>1.3 最短路径算法（Dijkstra算法、Floyd-Warshall算法）</h5><p> 1.3.1 Dijkstra算法</p>
<p>概念：Dijkstra算法是一种计算从单个源到所有其他源的最短路径的贪心算法，这意味着我们可以用它来计算从图的一个顶点到其余各顶点的最短路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">INF</span> = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">minDistance</span> = (<span class="params">dist, visited</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> min = <span class="variable constant_">INF</span>;</span><br><span class="line">  <span class="keyword">let</span> minIndex = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; dist.<span class="property">length</span>; v++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[v] === <span class="literal">false</span> &amp;&amp; dist[v] &lt;= min) &#123;</span><br><span class="line">      min = dist[v];</span><br><span class="line">      minIndex = v;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> minIndex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dijkstra</span> = (<span class="params">graph, src</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dist = [];</span><br><span class="line">  <span class="keyword">const</span> visited = [];</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = graph;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++ ) &#123;</span><br><span class="line">    dist[i] = <span class="variable constant_">INF</span>;</span><br><span class="line">    visited[i] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  dist[src] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> u = <span class="title function_">minDistance</span>(dist, visited);</span><br><span class="line">    visited[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; length; v++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!visited[v] &amp;&amp; graph[u][v] !== <span class="number">0</span> &amp;&amp; dist[u] !== <span class="variable constant_">INF</span> &amp;&amp; dist[u] + graph[u][v] &lt; dist[v]) &#123;</span><br><span class="line">        dist [v] = dist[u] + graph[u][v];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dist;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;********* Dijkstra&#x27;s Algorithm - Shortest Path ***********&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dist = <span class="title function_">dijkstra</span>(graph, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dist.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&#x27;\t\t&#x27;</span> + dist[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dijkstra</span></span><br></pre></td></tr></table></figure>



<p> 1.3.2 Floyd-Warshall算法</p>
<p> 概念：Floyd-Warshall算法是一种计算图中所有最短路径的动态规划算法。通过该算法，我们可以找出从所有源到所有顶点的最短路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">floydWarshall</span> = graph =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dist = [];</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = graph;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    dist[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === j) &#123;</span><br><span class="line">        dist[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">isFinite</span>(graph[i][j])) &#123;</span><br><span class="line">        dist[i][j] = <span class="title class_">Infinity</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dist[i][j] = graph[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; length; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123;</span><br><span class="line">          dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dist;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INF</span> = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">const</span> graph = [</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="variable constant_">INF</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">3</span>, <span class="variable constant_">INF</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">3</span>, <span class="variable constant_">INF</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">dist = <span class="title function_">floydWarshall</span>(graph);</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dist.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; dist.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dist[i][j] === <span class="variable constant_">INF</span>) &#123;</span><br><span class="line">      s += <span class="string">&#x27;INF &#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      s += dist[i][j] + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">floydWarshall</span><br></pre></td></tr></table></figure>



<h5 id="1-4-最小生成树（Prim算法、Kruskal算法）"><a href="#1-4-最小生成树（Prim算法、Kruskal算法）" class="headerlink" title="1.4 最小生成树（Prim算法、Kruskal算法）"></a>1.4 最小生成树（Prim算法、Kruskal算法）</h5><p> 概念：最小生成树（MST，最小权重生成树）是一个有n个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的最少的边。最小生成树问题是网络设计中常见的问题，例如办公室电话线路通信问题和岛桥问题。</p>
<p> 1.4.1 Prim算法（“加点法”）</p>
<p> 概念：Prim算法是一种求解加权无向连通图的MST问题的贪心算法。它能找到一个边的子集，使得其构成的树包含图中所有顶点，并且边的权值之和最小。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">INF</span> = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">minKey</span>  = (<span class="params">graph, key, visited</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> min = <span class="variable constant_">INF</span>;</span><br><span class="line">  <span class="keyword">let</span> minIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; graph.<span class="property">length</span>; v++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[v] === <span class="literal">false</span> &amp;&amp; key[v] &lt; min) &#123;</span><br><span class="line">      min = key[v];</span><br><span class="line">      minIndex = v;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> minIndex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">prim</span> = graph =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> parent = [];</span><br><span class="line">  <span class="keyword">const</span> key = [];</span><br><span class="line">  <span class="keyword">const</span> visited = [];</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = graph;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    key[i] = <span class="variable constant_">INF</span>;</span><br><span class="line">    visited[i] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  key[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  parent[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> u = <span class="title function_">minKey</span>(graph, key, visited);</span><br><span class="line">    visited[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; length; v++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (graph[u][v] &amp;&amp; !visited[v] &amp;&amp; graph[u][v] &lt; key[v]) &#123;</span><br><span class="line">        parent[v] = u;</span><br><span class="line">        key[v] = graph[u][v];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parent = <span class="title function_">prim</span>(graph);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Edge   Weight&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; graph.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(parent[i] + <span class="string">&#x27; - &#x27;</span> + i + <span class="string">&#x27;   &#x27;</span> + graph[i][parent[i]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prim</span><br></pre></td></tr></table></figure>



<p> 1.4.2 Kruskal算法（“加边法”）</p>
<p> 概念：Kruskal算法也是一种求加权无向连通图的MST的贪心算法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">INF</span> = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">find</span> = (<span class="params">i, parent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">while</span> (parent[i]) &#123;</span><br><span class="line">    i = parent[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">union</span> = (<span class="params">i, j, parent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (i !== j) &#123;</span><br><span class="line">    parent[j] = i;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initializeCost</span> = graph =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cost = [];</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = graph;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    cost[i] =[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (graph[i][j] === <span class="number">0</span>) &#123;</span><br><span class="line">        cost[i][j] = <span class="variable constant_">INF</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cost[i][j] = graph[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">kruskal</span> = graph =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = graph;</span><br><span class="line">  <span class="keyword">const</span> parent = [];</span><br><span class="line">  <span class="keyword">let</span> ne = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> a;</span><br><span class="line">  <span class="keyword">let</span> b;</span><br><span class="line">  <span class="keyword">let</span> u;</span><br><span class="line">  <span class="keyword">let</span> v;</span><br><span class="line">  <span class="keyword">const</span> cost = <span class="title function_">initializeCost</span>(graph);</span><br><span class="line">  <span class="keyword">while</span> (ne &lt; length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, min = <span class="variable constant_">INF</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost[i][j] &lt; min) &#123;</span><br><span class="line">          min = cost[i][j];</span><br><span class="line">          a = u = i;</span><br><span class="line">          b = v = j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    u = <span class="title function_">find</span>(u, parent);</span><br><span class="line">    v = <span class="title function_">find</span>(v, parent);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">union</span>(u, v, parent)) &#123;</span><br><span class="line">      ne++;</span><br><span class="line">    &#125;</span><br><span class="line">    cost[a][b] = cost[b][a] = <span class="variable constant_">INF</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parent = <span class="title function_">kruskal</span>(graph);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Edge   Weight&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; graph.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(parent[i] + <span class="string">&#x27; - &#x27;</span> + i + <span class="string">&#x27;   &#x27;</span> + graph[i][parent[i]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kruskal</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>图</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>常用算法编程题目学习与训练的网站</title>
    <url>/2019/11/18/blog17/</url>
    <content><![CDATA[<h3 id="列出一些用于算法题目学习与训练的网站："><a href="#列出一些用于算法题目学习与训练的网站：" class="headerlink" title="列出一些用于算法题目学习与训练的网站："></a>列出一些用于算法题目学习与训练的网站：</h3><p>UVA Online Judge： <a href="https://onlinejudge.org/">https://onlinejudge.org/</a></p>
<p>Sphere Online Judge: <a href="https://www.spoj.com/">https://www.spoj.com/</a></p>
<p>Coderbyte: <a href="https://www.coderbyte.com/">https://www.coderbyte.com/</a></p>
<p>Project Euler: <a href="http://projecteuler.com/">http://projecteuler.com/</a></p>
<p>HackerRank: <a href="https://www.hackerrank.com/">https://www.hackerrank.com/</a></p>
<p>CodeChef: <a href="https://www.codechef.com/">https://www.codechef.com/</a></p>
<p>Top Coder: <a href="https://www.topcoder.com/">https://www.topcoder.com/</a></p>
<p>freeCodeCamp: <a href="https://www.freecodecamp.cn/">https://www.freecodecamp.cn/</a></p>
<p>leetcode:<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p>
]]></content>
      <categories>
        <category>网站推荐</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习之JavaScript的框架</title>
    <url>/2019/11/20/blog18/</url>
    <content><![CDATA[<p>目的：学习并掌握JS的框架（心得记录和启发）</p>
<p>内容：框架，框架原理，Vue，React，Angular（三大框架）。（未完成，待继续）</p>
<span id="more"></span>

<h3 id="学习思路："><a href="#学习思路：" class="headerlink" title="学习思路："></a>学习思路：</h3><h4 id="0、学习框架之前，应该具备：JS，HTML，CSS的知识。（这些资源在bilibili网站上有不错的资源，可以边看边学）"><a href="#0、学习框架之前，应该具备：JS，HTML，CSS的知识。（这些资源在bilibili网站上有不错的资源，可以边看边学）" class="headerlink" title="0、学习框架之前，应该具备：JS，HTML，CSS的知识。（这些资源在bilibili网站上有不错的资源，可以边看边学）"></a>0、学习框架之前，应该具备：JS，HTML，CSS的知识。（这些资源在bilibili网站上有不错的资源，可以边看边学）</h4><h4 id="1、学习框架之前，应该了解下MVVM的设计思想：MVVM。"><a href="#1、学习框架之前，应该了解下MVVM的设计思想：MVVM。" class="headerlink" title="1、学习框架之前，应该了解下MVVM的设计思想：MVVM。"></a>1、学习框架之前，应该了解下MVVM的设计思想：<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html">MVVM</a>。</h4><h4 id="2、框架的基本原理：框架原理。"><a href="#2、框架的基本原理：框架原理。" class="headerlink" title="2、框架的基本原理：框架原理。"></a>2、框架的基本原理：<a href="https://yuchengkai.cn/docs/frontend/framework.html#mvvm">框架原理</a>。</h4><h4 id="3、Vue。Vue官网是最好的学习资料。对于刚入门的人来说，建议选择-Vue-入手，对初学者友好，比较简单，灵活，资料多。Vue的官网：Vue。"><a href="#3、Vue。Vue官网是最好的学习资料。对于刚入门的人来说，建议选择-Vue-入手，对初学者友好，比较简单，灵活，资料多。Vue的官网：Vue。" class="headerlink" title="3、Vue。Vue官网是最好的学习资料。对于刚入门的人来说，建议选择 Vue 入手，对初学者友好，比较简单，灵活，资料多。Vue的官网：Vue。"></a>3、Vue。Vue官网是最好的学习资料。对于刚入门的人来说，建议选择 Vue 入手，对初学者友好，比较简单，灵活，资料多。Vue的官网：<a href="https://cn.vuejs.org/index.html">Vue</a>。</h4><h4 id="4、React。React的官网：React。"><a href="#4、React。React的官网：React。" class="headerlink" title="4、React。React的官网：React。"></a>4、React。React的官网：<a href="https://www.reactjscn.com/">React</a>。</h4><h4 id="5、Angular。Angular的官网：Angular。"><a href="#5、Angular。Angular的官网：Angular。" class="headerlink" title="5、Angular。Angular的官网：Angular。"></a>5、Angular。Angular的官网：<a href="https://angular.cn/">Angular</a>。</h4>]]></content>
      <categories>
        <category>框架学习</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>react</tag>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之排序、搜索和随机算法</title>
    <url>/2019/11/05/blog15/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS算法的一些实现代码。（作为记录和启发）</p>
<p>内容：排序、搜索和随机算法。冒泡排序，选择排序，插入排序，归并排序，快速排序，计数排序，桶排序，基数排序；顺序搜索，二分搜索，内插搜索；Fisher-Yates随机。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/algorithms">ES6的JavaScript算法实现之排序、搜索和随机算法（分别在sorting、search、shuffle目录下）</a></p>
<h3 id="一、基础算法"><a href="#一、基础算法" class="headerlink" title="一、基础算法"></a>一、基础算法</h3><h4 id="1、排序"><a href="#1、排序" class="headerlink" title="1、排序"></a>1、排序</h4><h5 id="1-1、冒泡排序"><a href="#1-1、冒泡排序" class="headerlink" title="1.1、冒泡排序"></a>1.1、冒泡排序</h5><p>概念：冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换他们。元素项向上移动至正确的顺序，就好像气泡升至表面一样。其复杂度是O(n2)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = array;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">compareFn</span>(array[j], array[j + <span class="number">1</span>]) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(array, j, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createNonSortedArray</span>(<span class="params">size</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> array = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = size; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">      array.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = <span class="title function_">createNonSortedArray</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(array))</span><br><span class="line"></span><br><span class="line"> bubbleSort</span><br></pre></td></tr></table></figure>

<h5 id="1-2、改进的冒泡排序"><a href="#1-2、改进的冒泡排序" class="headerlink" title="1.2、改进的冒泡排序"></a>1.2、改进的冒泡排序</h5><p>说明：如果从内循环减去外循环中已跑过的轮数，就可以避免内循环中所有不必要的比较。其复杂度是O(n2)。（嵌套了两个循环）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modifiedBubbleSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = array;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">compareFn</span>(array[j], array[j + <span class="number">1</span>]) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">        <span class="title function_">swap</span>(array, j, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createNonSortedArray</span>(<span class="params">size</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> array = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = size; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">      array.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = <span class="title function_">createNonSortedArray</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">modifiedBubbleSort</span>(array))</span><br><span class="line"></span><br><span class="line">modifiedBubbleSort</span><br></pre></td></tr></table></figure>



<h5 id="1-3、选择排序"><a href="#1-3、选择排序" class="headerlink" title="1.3、选择排序"></a>1.3、选择排序</h5><p>概念：选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第一位，接着找到第二小的值并将其放置在第二位，以此类推。其复杂度是O(n2)。（嵌套了两个循环）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = array;</span><br><span class="line">  <span class="keyword">let</span> indexMin;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">    indexMin = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">compareFn</span>(array[indexMin], array[j]) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">        indexMin = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i !== indexMin) &#123;</span><br><span class="line">      <span class="title function_">swap</span>(array, i, indexMin);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createNonSortedArray</span>(<span class="params">size</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> array = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = size; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">      array.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = <span class="title function_">createNonSortedArray</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectionSort</span>(array))</span><br><span class="line"></span><br><span class="line">selectionSort</span><br></pre></td></tr></table></figure>



<h5 id="1-4、插入排序"><a href="#1-4、插入排序" class="headerlink" title="1.4、插入排序"></a>1.4、插入排序</h5><p>概念：插入排序每次排一个数组项，以此方式构建最后的排序数组。假定第一项已经排序了。接着，它和第二项进行比较–第二项是应该待在原位还是插入到第一项之前呢？这样，头两项就已正确排序，接着和第三项比较（它是该插入到第一、第二还是第三的位置呢），以此类推。（排序小型数组时，插入排序比选择排序和冒泡排序性能要好）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = array;</span><br><span class="line">  <span class="keyword">let</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    temp = array[j];</span><br><span class="line">    <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; <span class="title function_">compareFn</span>(array[j - <span class="number">1</span>], temp) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      array[j] = array [j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    array[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertionSort</span>(array));</span><br><span class="line"></span><br><span class="line">insertionSort</span><br></pre></td></tr></table></figure>



<h5 id="1-5-归并排序"><a href="#1-5-归并排序" class="headerlink" title="1.5 归并排序"></a>1.5 归并排序</h5><p>概念：归并排序是一种分而治之算法，其思想是将原始数组切分较小的数组，直到每个小数组只有一个位置，接着讲小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。归并排序是第一个可以实际使用的排序算法，归并排序性能不错（比上三种排序好），其复杂度为O(nlog(n))。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; left.<span class="property">length</span> &amp;&amp; j &lt; right.<span class="property">length</span>) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(<span class="title function_">compareFn</span>(left[i], right[j]) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> ? left[i++] : right[j++]);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">concat</span>(i &lt; left.<span class="property">length</span> ? left.<span class="title function_">slice</span>(i) : right.<span class="title function_">slice</span>(j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;length&#125; = array;</span><br><span class="line">    <span class="keyword">const</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> left = <span class="title function_">mergeSort</span>(array.<span class="title function_">slice</span>(<span class="number">0</span>, middle), compareFn);</span><br><span class="line">    <span class="keyword">const</span> right = <span class="title function_">mergeSort</span>(array.<span class="title function_">slice</span>(middle, length), compareFn);</span><br><span class="line">    array = <span class="title function_">merge</span>(left, right, compareFn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mergeSort</span>(array));</span><br><span class="line"></span><br><span class="line">mergeSort</span><br></pre></td></tr></table></figure>



<h5 id="1-6-快速排序"><a href="#1-6-快速排序" class="headerlink" title="1.6 快速排序"></a>1.6 快速排序</h5><p>概念：快速排序也许是最常用的排序算法了，它的复杂度为O(nlog(n))，且性能通常比其他复杂度为O(nlog(n))的排序算法好。快速排序也是使用分而治之的思想，将原始数组分为较小的数组（但它没有像归并排序那样将它们分割开）。思路：选择主元（pivot）；划分（partition）操作；对划分后的小数组重复前两步操作，直至数组已完全排序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">array, left, right, compareFn</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = array[<span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br><span class="line">  <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[i], pivot) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[j],pivot) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">      <span class="title function_">swap</span>(array, i ,j);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quick</span>(<span class="params">array, left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    index = <span class="title function_">partition</span>(array, left, right, compareFn);</span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, left, index - <span class="number">1</span>, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, index, right, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quick</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>, compareFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array));</span><br><span class="line"></span><br><span class="line">quickSort</span><br></pre></td></tr></table></figure>



<h5 id="1-7-计数排序"><a href="#1-7-计数排序" class="headerlink" title="1.7 计数排序"></a>1.7 计数排序</h5><p>概念：计数排序是一个分布式排序，使用已经组织好的辅助数据结构（称为桶），然后进行合并，得到排好序的数组。计数排序使用一个用来存储每个元素在原始数组中出现次数的临时数组。在所有元素都计数完成后，临时数组已拍好序并可迭代以构建排序后的结果数组。它是一个优秀的整数排序算法，时间复杂度为O(n+k)，其中k是临时计数数组的大小；但是它确实需要更多的内存来存放临时数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findMaxValue</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> max = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &gt; max) &#123;</span><br><span class="line">      max = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countingSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> maxValue = <span class="title function_">findMaxValue</span>(array);</span><br><span class="line">  <span class="keyword">let</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> counts = <span class="keyword">new</span> <span class="title class_">Array</span>(maxValue + <span class="number">1</span>);</span><br><span class="line">  array.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!counts[element]) &#123;</span><br><span class="line">      counts[element] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    counts[element]++;</span><br><span class="line">  &#125;);</span><br><span class="line">  counts.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(element &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      array[sortedIndex++] = i;</span><br><span class="line">      element--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countingSort</span>(array));</span><br><span class="line"></span><br><span class="line">countingSort</span><br></pre></td></tr></table></figure>



<h5 id="1-8-桶排序"><a href="#1-8-桶排序" class="headerlink" title="1.8 桶排序"></a>1.8 桶排序</h5><p>概念：桶排序（箱排序）也是分布式排序算法，它将元素分为不同的桶（较小的数组），再使用一个简单的排序算法，例如插入排序，来对每个桶进行排序。然后，它将所有的桶合并为结果数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">insertionSort</span> = (<span class="params">array, compareFn = defaultCompare</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array;</span><br><span class="line">  <span class="keyword">let</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    temp = array[i];</span><br><span class="line">    <span class="comment">// console.log(&#x27;to be inserted &#x27; + temp);</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; <span class="title function_">compareFn</span>(array[j - <span class="number">1</span>], temp) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;shift &#x27; + array[j - 1]);</span></span><br><span class="line">      array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;insert &#x27; + temp);</span></span><br><span class="line">    array[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">creatBuckets</span>(<span class="params">array, bucketSize</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> minValue = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> maxValue = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &lt; minValue) &#123;</span><br><span class="line">      minValue = array[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &gt; maxValue) &#123;</span><br><span class="line">      maxValue = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> bucketCount = <span class="title class_">Math</span>.<span class="title function_">floor</span>((maxValue - minValue) / bucketSize) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> buckets = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">    buckets[i] = [];</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    buckets[<span class="title class_">Math</span>.<span class="title function_">floor</span>((array[i] - minValue) / bucketSize)].<span class="title function_">push</span>(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buckets;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortBuckets</span>(<span class="params">buckets</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sortedArray = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buckets.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (buckets[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">insertionSort</span>(buckets[i]);</span><br><span class="line">      sortedArray.<span class="title function_">push</span>(...buckets[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sortedArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bucketSort</span> (array, bucketSize = <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> buckets = <span class="title function_">creatBuckets</span>(array, bucketSize);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">sortBuckets</span>(buckets);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bucketSort</span>(array));</span><br><span class="line"></span><br><span class="line">bucketSort</span><br></pre></td></tr></table></figure>



<h5 id="1-9-基数排序"><a href="#1-9-基数排序" class="headerlink" title="1.9 基数排序"></a>1.9 基数排序</h5><p>概念：基数排序是一个分布式排序算法，它根据数字的有效位或者基数将整数分布到桶中。基数是基于数组中值的记数制的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findMaxValue</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array &amp;&amp; array.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">compareFn</span>(max, array[i]) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">        max = array[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">findMinValue</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array &amp;&amp; array.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">compareFn</span>(min, array[i]) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">        min = array[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getBucketIndex</span> = (<span class="params">value, minValue, significantDigit, radixBase</span>) =&gt;</span><br><span class="line">  <span class="title class_">Math</span>.<span class="title function_">floor</span>(((value - minValue) / significantDigit) % radixBase);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">countingSortForRadix</span> = (<span class="params">array, radixBase, significantDigit, minValue</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> bucketsIndex;</span><br><span class="line">  <span class="keyword">const</span> buckets = [];</span><br><span class="line">  <span class="keyword">const</span> aux = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; radixBase; i++) &#123;</span><br><span class="line">    buckets[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    bucketsIndex = <span class="title function_">getBucketIndex</span>(array[i], minValue, significantDigit, radixBase);</span><br><span class="line">    buckets[bucketsIndex]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; radixBase; i++) &#123;</span><br><span class="line">    buckets[i] += buckets[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = array.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    bucketsIndex = <span class="title function_">getBucketIndex</span>(array[i], minValue, significantDigit, radixBase);</span><br><span class="line">    aux[--buckets[bucketsIndex]] = array[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    array[i] = aux[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radixSort</span>(<span class="params">array, radixBase = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> minValue = <span class="title function_">findMinValue</span>(array);</span><br><span class="line">  <span class="keyword">const</span> maxValue = <span class="title function_">findMaxValue</span>(array);</span><br><span class="line">  <span class="keyword">let</span> significantDigit = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ((maxValue - minValue) / significantDigit &gt;= <span class="number">1</span>) &#123;    <span class="comment">// console.log(&#x27;radix sort for digit &#x27; + significantDigit);</span></span><br><span class="line">    array = <span class="title function_">countingSortForRadix</span>(array, radixBase, significantDigit, minValue);</span><br><span class="line">    significantDigit *= radixBase;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">456</span>,<span class="number">789</span>,<span class="number">123</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">243</span>,<span class="number">321</span>,<span class="number">42</span>,<span class="number">90</span>,<span class="number">10</span>,<span class="number">999</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">radixSort</span>(array));</span><br><span class="line"></span><br><span class="line">radixSort</span><br></pre></td></tr></table></figure>



<h4 id="2、搜索算法"><a href="#2、搜索算法" class="headerlink" title="2、搜索算法"></a>2、搜索算法</h4><h5 id="2-1-顺序搜索"><a href="#2-1-顺序搜索" class="headerlink" title="2.1 顺序搜索"></a>2.1 顺序搜索</h5><p> 概念：顺序或线性搜索是最基本的搜索算法。它的机制是将每一个数据结构中的元素和我们要找的元素作比较。（最低效）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DOES_NOT_EXIST</span> = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultEquals</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sequentialSearch</span>(<span class="params">array, value, equalsFn = defaultEquals</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">equalsFn</span>(array[i], value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">DOES_NOT_EXIST</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">456</span>,<span class="number">789</span>,<span class="number">123</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">243</span>,<span class="number">321</span>,<span class="number">42</span>,<span class="number">90</span>,<span class="number">10</span>,<span class="number">999</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sequentialSearch</span>(array,<span class="number">999</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sequentialSearch</span>(array,<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">sequentialSearch</span><br></pre></td></tr></table></figure>



<h5 id="2-2-二分搜索"><a href="#2-2-二分搜索" class="headerlink" title="2.2 二分搜索"></a>2.2 二分搜索</h5><p>二分搜索要求被搜索的数组已排序。步骤：1、选择数组中间值；2、如果选中值是待搜索值，那么算法执行完毕；如果带搜索值比选中值要小，则返回步骤1并在选中值左边的子数组中寻找（较小）；4、 如果带搜索值比选中值要大，则返回步骤1并在选中值右边的子数组中寻找（较大）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DOES_NOT_EXIST</span> = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">array, left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = array[<span class="title class_">Math</span>.<span class="title function_">floor</span>((right + left) / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[i], pivot) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[j], pivot) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">      <span class="title function_">swap</span>(array, i, j);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quick</span>(<span class="params">array, left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    index = <span class="title function_">partition</span>(array, left, right, compareFn);</span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, left, index - <span class="number">1</span>, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, index, right, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quick</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>, compareFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">array, value, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sortedArray = <span class="title function_">quickSort</span>(array);</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> high = sortedArray.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((low + high) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> element = sortedArray[mid];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">compareFn</span>(element, value) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">compareFn</span>(element, value) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">DOES_NOT_EXIST</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">456</span>,<span class="number">789</span>,<span class="number">123</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">243</span>,<span class="number">321</span>,<span class="number">42</span>,<span class="number">90</span>,<span class="number">10</span>,<span class="number">999</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch</span>(array,<span class="number">42</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch</span>(array,<span class="number">43</span>));</span><br><span class="line"></span><br><span class="line">binarySearch</span><br></pre></td></tr></table></figure>



<h5 id="2-3-内插搜索"><a href="#2-3-内插搜索" class="headerlink" title="2.3 内插搜索"></a>2.3 内插搜索</h5><p> 概念：内插搜索是改良版的二分搜索。步骤：1、使用position公式选中一个值；2、如果选中值是待搜索值，那么算法执行完毕；如果带搜索值比选中值要小，则返回步骤1并在选中值左边的子数组中寻找（较小）；4、 如果带搜索值比选中值要大，则返回步骤1并在选中值右边的子数组中寻找（较大）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DOES_NOT_EXIST</span> = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lesserEquals</span>(<span class="params">a, b, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> comp = <span class="title function_">compareFn</span>(a, b);</span><br><span class="line">  <span class="keyword">return</span> comp === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> || comp === <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">biggerEquals</span>(<span class="params">a, b, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> comp = <span class="title function_">compareFn</span>(a, b);</span><br><span class="line">  <span class="keyword">return</span> comp === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span> || comp === <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultDiff</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Number</span>(a) - <span class="title class_">Number</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultEquals</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">array, left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = array[<span class="title class_">Math</span>.<span class="title function_">floor</span>((right + left) / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[i], pivot) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[j], pivot) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">      <span class="title function_">swap</span>(array, i, j);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quick</span>(<span class="params">array, left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    index = <span class="title function_">partition</span>(array, left, right, compareFn);</span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, left, index - <span class="number">1</span>, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, index, right, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quick</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>, compareFn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">interpolationSearch</span>(<span class="params"></span></span><br><span class="line"><span class="params">  array,</span></span><br><span class="line"><span class="params">  value,</span></span><br><span class="line"><span class="params">  compareFn = defaultCompare,</span></span><br><span class="line"><span class="params">  equalsFn = defaultEquals,</span></span><br><span class="line"><span class="params">  diffFn = defaultDiff</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">  <span class="title function_">quickSort</span>(array);</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = array;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> high = length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> position = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> delta = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (</span><br><span class="line">    low &lt;= high</span><br><span class="line">    &amp;&amp; <span class="title function_">biggerEquals</span>(value, array[low], compareFn)</span><br><span class="line">    &amp;&amp; <span class="title function_">lesserEquals</span>(value, array[high],compareFn)</span><br><span class="line">    ) &#123;</span><br><span class="line">    delta = <span class="title function_">diffFn</span>(value, array[low]) / <span class="title function_">diffFn</span>(array[high], array[low]);</span><br><span class="line">    position = low + <span class="title class_">Math</span>.<span class="title function_">floor</span>((high - low) * delta);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">equalsFn</span>(array[position], value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">compareFn</span>(array[position], value) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      low = position + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      high = position - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">DOES_NOT_EXIST</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">456</span>,<span class="number">789</span>,<span class="number">123</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">243</span>,<span class="number">321</span>,<span class="number">42</span>,<span class="number">90</span>,<span class="number">10</span>,<span class="number">999</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">interpolationSearch</span>(array,<span class="number">42</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">interpolationSearch</span>(array,<span class="number">43</span>));</span><br><span class="line"></span><br><span class="line">interpolationSearch</span><br></pre></td></tr></table></figure>



<h4 id="3、随机算法"><a href="#3、随机算法" class="headerlink" title="3、随机算法"></a>3、随机算法</h4><h5 id="3-1、Fisher-Yates随机算法"><a href="#3-1、Fisher-Yates随机算法" class="headerlink" title="3.1、Fisher-Yates随机算法"></a>3.1、Fisher-Yates随机算法</h5><p> 概念：迭代数组，从最后一位开始并将当前位置和一个随机位置进行交换。这个随机位置比当前位置小。这样，这个算法可以保证随机过得位置不会再被随机一次（洗扑克牌的次数越多，随机效果越差）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = array.<span class="property">length</span> -<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="title class_">Math</span>.<span class="title function_">random</span>() * (i+<span class="number">1</span>)));</span><br><span class="line">    <span class="title function_">swap</span>(array, i, randomIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shuffle</span>(array));</span><br><span class="line"></span><br><span class="line">shuffle</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>排序、搜索和随机算法</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>搜索</tag>
        <tag>随机算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之分而治之，动态规划，贪心算法和回溯算法</title>
    <url>/2019/11/13/blog16/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS算法的一些实现代码。（作为记录和启发）</p>
<p>内容：分而治之，动态规划，贪心算法，回溯算法及其著名算法问题。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/algorithms">ES6的JavaScript算法思想实现之分而治之，动态规划，贪心算法和回溯算法（分别在divide and rule、dynamic programming、greedy、backtracking目录下）</a></p>
<h3 id="一、基础算法"><a href="#一、基础算法" class="headerlink" title="一、基础算法"></a>一、基础算法</h3><h4 id="1、分而治之"><a href="#1、分而治之" class="headerlink" title="1、分而治之"></a>1、分而治之</h4><p> 概念：分而治之算法可以分为三个部分。1、分解原问题为多个子问题（原问题的多个小实例）；2、解决子问题，用返回解决子问题的方式的递归算法。递归算法的基本情形可以用来解决子问题；3、组合这些子问题的解决方式，得到原问题的解。</p>
<p>分而治之的二分搜索算法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DOES_NOT_EXIST</span> = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">array, a, b</span>) &#123;</span><br><span class="line">  <span class="comment">/* const temp = array[a];</span></span><br><span class="line"><span class="comment">  array[a] = array[b];</span></span><br><span class="line"><span class="comment">  array[b] = temp; */</span></span><br><span class="line">  [array[a], array[b]] = [array[b], array[a]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">array, left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = array[<span class="title class_">Math</span>.<span class="title function_">floor</span>((right + left) / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[i], pivot) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_">compareFn</span>(array[j], pivot) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">      <span class="title function_">swap</span>(array, i, j);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quick</span>(<span class="params">array, left, right, compareFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    index = <span class="title function_">partition</span>(array, left, right, compareFn);</span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, left, index - <span class="number">1</span>, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">      <span class="title function_">quick</span>(array, index, right, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">array, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quick</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>, compareFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearchRecursive</span>(<span class="params">array, value, low, high, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((low + high) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> element = array[mid];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">compareFn</span>(element, value) === <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">binarySearchRecursive</span>(array, value, low, mid -<span class="number">1</span>, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">compareFn</span>(element, value) === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">binarySearchRecursive</span>(array, value, mid + <span class="number">1</span>, high, compareFn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">DOES_NOT_EXIST</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">array, value, compareFn = defaultCompare</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> sortedArray = <span class="title function_">quickSort</span>(array);</span><br><span class="line">  <span class="keyword">const</span> low = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> high = sortedArray.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">binarySearchRecursive</span>(array, value, low, high, compareFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch</span>(array,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch</span>(array,<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">binarySearch</span><br></pre></td></tr></table></figure>

<h4 id="2、动态规划"><a href="#2、动态规划" class="headerlink" title="2、动态规划"></a>2、动态规划</h4><p> 概念：动态规划（dynamic programming，DP）是一种将复杂问题分解成更小的子问题来解决的优化技术（分而治之方法是把问题分解成相互独立的子问题，然后组合它们的答案；而动态规划是将问题分解成相互依赖的子问题）。用动态规划解决问题时，要遵循三个重要步骤：1、定义子问题；2、实现要反复执行来解决子问题的部分（考虑递归）；3、识别并求解出基线条件。</p>
<p>动态规划能解决一些著名算法问题：</p>
<h5 id="2-1-背包问题"><a href="#2-1-背包问题" class="headerlink" title="2.1 背包问题"></a>2.1 背包问题</h5><p>描述：给出一组项，各自有值和容量，目标是找出总值最大的项的集合。这个问题的限制是，总容量必须小于等于“背包”的容量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">knapSack</span>(<span class="params">capacity, weights, values, n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> kS = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    kS[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> w = <span class="number">0</span>; w &lt;= capacity; w++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ( i === <span class="number">0</span> || w === <span class="number">0</span>) &#123;</span><br><span class="line">        kS[i][w] = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weights[i - <span class="number">1</span>] &lt;= w) &#123;</span><br><span class="line">        <span class="keyword">const</span> a = values[i - <span class="number">1</span>] + kS[i - <span class="number">1</span>][w - weights[i - <span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">const</span> b = kS[i - <span class="number">1</span>][w];</span><br><span class="line">        kS[i][w] = a &gt; b ? a : b;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        kS[i][w] = kS[i - <span class="number">1</span>][w];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">findValues</span>(n, capacity, kS);</span><br><span class="line">  <span class="keyword">return</span> kS[n][capacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findValues</span>(<span class="params">n, capacity, kS</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = n;</span><br><span class="line">  <span class="keyword">let</span> k = capacity;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Items that are part of the solution:&#x27;</span>);</span><br><span class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (kS[i][k] !== kS[i - <span class="number">1</span>][k]) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">&#x27;item &#x27;</span> + i + <span class="string">&#x27; can be part of solution w,v: &#x27;</span> + weights[i - <span class="number">1</span>] + <span class="string">&#x27;,&#x27;</span> + values[i - <span class="number">1</span>]</span><br><span class="line">        );</span><br><span class="line">      i--;</span><br><span class="line">      k -= kS[i][k];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> weights = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> capacity = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> n = values.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">knapSack</span>(capacity, weights, values, n));</span><br><span class="line"></span><br><span class="line">knapSack</span><br></pre></td></tr></table></figure>

<h5 id="2-2-最长公共子序列"><a href="#2-2-最长公共子序列" class="headerlink" title="2.2 最长公共子序列"></a>2.2 最长公共子序列</h5><p>描述：找出一组序列的最长公共子序列（可由另一序列删除元素但不改变余下元素的顺序而得到）。最长子序列是指，在两个字符串序列中以相同顺序出现，但不要求连续（非字符串子串）的字符串序列。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printSolution</span>(<span class="params">solution, wordX, m, n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = m;</span><br><span class="line">  <span class="keyword">let</span> b = n;</span><br><span class="line">  <span class="keyword">let</span> x = solution[a][b];</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">while</span> (x !== <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (solution[a][b] === <span class="string">&#x27;diagonal&#x27;</span>) &#123;</span><br><span class="line">      answer = wordX[a - <span class="number">1</span>] + answer;</span><br><span class="line">      a--;</span><br><span class="line">      b--;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (solution[a][b] === <span class="string">&#x27;left&#x27;</span>) &#123;</span><br><span class="line">      b--;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (solution[a][b] === <span class="string">&#x27;top&#x27;</span>) &#123;</span><br><span class="line">      a--;</span><br><span class="line">    &#125;</span><br><span class="line">    x = solution[a][b];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">lcs</span>(<span class="params">wordX, wordY</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> m = wordX.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> n = wordY.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> l = [];</span><br><span class="line">  <span class="keyword">const</span> solution = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    l[i] = [];</span><br><span class="line">    solution[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      l[i][j] = <span class="number">0</span>;</span><br><span class="line">      solution[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span> || j === <span class="number">0</span>) &#123;</span><br><span class="line">        l[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wordX[i - <span class="number">1</span>] === wordY[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        l[i][j] = l[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        solution[i][j] = <span class="string">&#x27;diagonal&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> a = l[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">const</span> b = l[i][j - <span class="number">1</span>];</span><br><span class="line">        l[i][j] = a &gt; b ? a : b; <span class="comment">// max(a,b)</span></span><br><span class="line">        solution[i][j] = l[i][j] === l[i - <span class="number">1</span>][j] ? <span class="string">&#x27;top&#x27;</span> : <span class="string">&#x27;left&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(l[i].join());</span></span><br><span class="line">    <span class="comment">// console.log(solution[i].join());</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">printSolution</span>(solution, wordX, m, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">LCS</span></span><br></pre></td></tr></table></figure>

<h5 id="2-3-矩阵链相乘"><a href="#2-3-矩阵链相乘" class="headerlink" title="2.3 矩阵链相乘"></a>2.3 矩阵链相乘</h5><p>描述：给出一系列矩阵，目标是找到这些矩阵相乘的最高效办法（计算次数尽可能少）。相乘运算不会进行，解决方案是找到这些矩阵各自相乘的顺序（由于矩阵乘法结合律的原因）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">matrixChainOrder</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = p.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> m = [];</span><br><span class="line">  <span class="keyword">const</span> s = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    m[i] = [];</span><br><span class="line">    m[i][i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    s[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      s[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> l = <span class="number">2</span>; l &lt; n; l++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= (n - l) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> j = (i + l) - <span class="number">1</span>;</span><br><span class="line">      m[i][j] = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k = i; k &lt;= j - <span class="number">1</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">const</span> q = m[i][k] + m[k + <span class="number">1</span>][j] +((p[i - <span class="number">1</span>] * p [k]) * p[j]);</span><br><span class="line">        <span class="keyword">if</span> (q &lt; m[i][j]) &#123;</span><br><span class="line">          m[i][j] = q;</span><br><span class="line">          s[i][j] = k; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">printOptimalParenthesis</span>(s, <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> m[<span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printOptimalParenthesis</span>(<span class="params">s, i, j</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === j) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    <span class="title function_">printOptimalParenthesis</span>(s, i, s[i][j]);</span><br><span class="line">    <span class="title function_">printOptimalParenthesis</span>(s, s[i][j] + <span class="number">1</span>, j);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = [<span class="number">10</span>, <span class="number">100</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">matrixChainOrder</span>(p));</span><br><span class="line"></span><br><span class="line">matrixChainOrder</span><br></pre></td></tr></table></figure>

<h5 id="2-4-硬币找零"><a href="#2-4-硬币找零" class="headerlink" title="2.4 硬币找零"></a>2.4 硬币找零</h5><p>描述：给出面额为d1,…,dn的一定数量的硬币和要找零的钱数，找出有多少种找零的方法。</p>
<p>我们来研究一下最少硬币找零问题。（找出最少硬币个数的方案）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minCoinChange</span>(<span class="params">coins, amount</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">makeChange</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cache[value]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[value];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> min = [];</span><br><span class="line">    <span class="keyword">let</span> newMin;</span><br><span class="line">    <span class="keyword">let</span> newAmount;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; coins.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> coin = coins[i];</span><br><span class="line">      newAmount = value - coin;</span><br><span class="line">     <span class="comment">// console.log(coin);</span></span><br><span class="line">      <span class="keyword">if</span> (newAmount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        newMin  = <span class="title function_">makeChange</span>(newAmount);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        newAmount &gt;= <span class="number">0</span> </span><br><span class="line">        &amp;&amp; (newMin.<span class="property">length</span> &lt; min.<span class="property">length</span> - <span class="number">1</span> ||!min.<span class="property">length</span>)</span><br><span class="line">        &amp;&amp; (newMin.<span class="property">length</span> || !newAmount)</span><br><span class="line">        ) &#123;</span><br><span class="line">        min = [coin].<span class="title function_">concat</span>(newMin);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new Min &#x27;</span> + min + <span class="string">&#x27; for &#x27;</span> + amount);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (cache[value] = min);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">makeChange</span>(amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">minCoinChange</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">minCoinChange</span><br></pre></td></tr></table></figure>

<h5 id="2-5-图的全源最短路径"><a href="#2-5-图的全源最短路径" class="headerlink" title="2.5 图的全源最短路径"></a>2.5 图的全源最短路径</h5><p>描述：对所有顶点对（u，v），找出从顶点u到顶点v的最短路径。</p>
<p>用Floyd-Warshall算法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">floydWarshall</span> = graph =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dist = [];</span><br><span class="line">  <span class="keyword">const</span> &#123;length&#125; = graph;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    dist[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === j) &#123;</span><br><span class="line">        dist[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">isFinite</span>(graph[i][j])) &#123;</span><br><span class="line">        dist[i][j] = <span class="title class_">Infinity</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dist[i][j] = graph[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; length; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123;</span><br><span class="line">          dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dist;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INF</span> = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">const</span> graph = [</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="variable constant_">INF</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">3</span>, <span class="variable constant_">INF</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="number">3</span>, <span class="variable constant_">INF</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>, <span class="variable constant_">INF</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">dist = <span class="title function_">floydWarshall</span>(graph);</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dist.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; dist.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dist[i][j] === <span class="variable constant_">INF</span>) &#123;</span><br><span class="line">      s += <span class="string">&#x27;INF &#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      s += dist[i][j] + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">floydWarshall</span><br><span class="line"></span><br><span class="line"><span class="title class_">FloydWarshall</span></span><br></pre></td></tr></table></figure>

<h4 id="3、贪心算法"><a href="#3、贪心算法" class="headerlink" title="3、贪心算法"></a>3、贪心算法</h4><p> 概念：贪心算法遵循一种近似解决问题的技术，期盼通过每个阶段的局部最优选择（当前最好的解），从而达到全局的最优（全局最优解）。它不像动态规划算法那那样计算更大的格局。</p>
<h5 id="3-1最少硬币找零问题"><a href="#3-1最少硬币找零问题" class="headerlink" title="3.1最少硬币找零问题"></a>3.1最少硬币找零问题</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minCoinChangeGreedy</span> (coins, amount) &#123;</span><br><span class="line">  <span class="keyword">const</span> change = [];</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = coins.<span class="property">length</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> coin = coins[i];</span><br><span class="line">    <span class="keyword">while</span> (total + coin &lt;= amount) &#123;</span><br><span class="line">      change.<span class="title function_">push</span>(coin);</span><br><span class="line">      total += coin;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> change;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">minCoinChangeGreedy</span>([<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>], <span class="number">15</span>)); <span class="comment">// [5, 10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">minCoinChangeGreedy</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">6</span>)); <span class="comment">//not the best</span></span><br><span class="line"></span><br><span class="line">minCoinChangeGreedy</span><br></pre></td></tr></table></figure>

<h5 id="3-2-分数背包问题"><a href="#3-2-分数背包问题" class="headerlink" title="3.2 分数背包问题"></a>3.2 分数背包问题</h5><p> 概念：在分数背包问题中，可以装入分数的物品。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">knapSackGreedy</span>(<span class="params">capacity, weights, values</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = values.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> load = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> val = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; load &lt; capacity; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (weights[i] &lt;= capacity - load) &#123;</span><br><span class="line">      val += values[i];</span><br><span class="line">      load += weights[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> r = (capacity - load) / weights[i];</span><br><span class="line">      val += r*values[i];</span><br><span class="line">      load += weights[i]; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> weights = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> capacity = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">knapSackGreedy</span>(capacity, weights, values));</span><br><span class="line"></span><br><span class="line">knapSackGreedy</span><br></pre></td></tr></table></figure>

<h4 id="4、回溯算法"><a href="#4、回溯算法" class="headerlink" title="4、回溯算法"></a>4、回溯算法</h4><p> 概念：回溯是一种渐进式寻找并构建问题解决方式的策略。从一个可能的动作开始并试着用这个动作解决问题。如果不能解决，就回溯并选择另一个动作直到问题解决为止。根据这种行为，回溯算法会尝试所有可能的动作（如果更快找到了解决办法就尝试较少的次数）来解决问题。可用回溯解决的著名问题有：骑士巡逻问题，N皇后问题，迷宫老鼠问题，数独解问题。</p>
<h5 id="4-1-迷宫老鼠问题"><a href="#4-1-迷宫老鼠问题" class="headerlink" title="4.1 迷宫老鼠问题"></a>4.1 迷宫老鼠问题</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ratInAMaze</span>(<span class="params">maze</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> solution = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maze.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    solution[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; maze[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">      solution[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">findPath</span>(maze, <span class="number">0</span>, <span class="number">0</span>, solution) === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> solution;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;NO PATH FOUND&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findPath</span>(<span class="params">maze, x, y, solution</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = maze.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (x === n - <span class="number">1</span> &amp;&amp; y === n -<span class="number">1</span>) &#123;</span><br><span class="line">    solution[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isSafe</span>(maze, x, y) === <span class="literal">true</span>) &#123;</span><br><span class="line">    solution[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">findPath</span>(maze, x + <span class="number">1</span>, y, solution)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">findPath</span>(maze, x, y + <span class="number">1</span>, solution)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    solution[x][y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSafe</span>(<span class="params">maze, x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = maze.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n &amp;&amp; maze[x][y] !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> maze = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">ratInAMaze</span>(maze));</span><br><span class="line"></span><br><span class="line">ratInAMaze</span><br></pre></td></tr></table></figure>

<h5 id="4-2-数独解问题"><a href="#4-2-数独解问题" class="headerlink" title="4.2 数独解问题"></a>4.2 数独解问题</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sudokuSolver</span>(<span class="params">matrix</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">solveSudoku</span>(matrix) ===  <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;NO SOLUTION&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UNASSIGNED</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solveSudoku</span>(<span class="params">matrix</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> row = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> col = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> checkBlankSpaces = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (row = <span class="number">0</span>; row &lt; matrix.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (col = <span class="number">0</span>; col &lt; matrix[row].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (matrix[row][col] === <span class="variable constant_">UNASSIGNED</span>) &#123;</span><br><span class="line">        checkBlankSpaces = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (checkBlankSpaces === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (checkBlankSpaces === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> num = <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isSafe</span>(matrix, row, col, num)) &#123;</span><br><span class="line">      matrix[row][col] = num;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">solveSudoku</span>(matrix)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      matrix[row][col] = <span class="variable constant_">UNASSIGNED</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSafe</span>(<span class="params">matrix, row, col, num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    !<span class="title function_">usedInRow</span>(matrix, row, num) </span><br><span class="line">    &amp;&amp; !<span class="title function_">usedInCol</span>(matrix, col, num) </span><br><span class="line">    &amp;&amp; !<span class="title function_">usedInBox</span>(matrix, row - (row % <span class="number">3</span>), col - (col % <span class="number">3</span>), num)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">usedInRow</span>(<span class="params">matrix, row, num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; matrix.<span class="property">length</span>; col++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix[row][col] === num) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">usedInCol</span>(<span class="params">matrix, col, num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; matrix.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix[row][col] === num) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">usedInBox</span>(<span class="params">matrix, boxStartRow, boxStartCol, num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; <span class="number">3</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; <span class="number">3</span>; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (matrix[row + boxStartRow][col + boxStartCol] === num) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sudokuGrid = [</span><br><span class="line">  [<span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sudokuSolver</span>(sudokuGrid));</span><br><span class="line"></span><br><span class="line">sudokuSolver</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>分而治之，动态规划，贪心算法和回溯算法</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>分而治之</tag>
        <tag>动态规划</tag>
        <tag>贪心算法</tag>
        <tag>回溯算法</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue学习的心得记录（基础篇）</title>
    <url>/2019/12/03/blog19/</url>
    <content><![CDATA[<p>目标：快速上手Vue框架（2.x版本）</p>
<p>方法：通过看Vue的官方手册（<a href="https://cn.vuejs.org/">Vue官方网站</a>）</p>
<p>内容：本博客记录一些学习Vue官方文档中的心得，便于日后启发。（基础篇）</p>
<span id="more"></span>

<p>再次学习vue的心得记录：（在我最新的博客里）</p>
<p>注：遇到一些不懂的函数等，可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API参考</a>。</p>
<p>正文：</p>
<p>一、介绍</p>
<p>1、Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。最基本核心功能有：声明式渲染，条件与循环，处理用户输入，组件化应用构建。</p>
<p>2、声明式渲染。Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。指令带有前缀v-，以表示它们是 Vue 提供的特殊特性。</p>
<p>3、条件与循环。条件：v-if，v-else-if，v-else，v-show。用于控制条件选择去渲染对应的元素。注意只有被选中了的部分才会渲染在网页上（网页代码只显示了符合条件的元素），而v-show总是会渲染到页面，只是通过css的display属性控制显示与否。循环：v-for。</p>
<p>4、处理用户输入。包括表单处理。v-on指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法。Vue 还提供了v-model指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p>
<p>5、组件化应用构建。组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用，以使开发更易管理。在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。Vue.component（名称，对象）</p>
<p>二、Vue实例</p>
<p>1、创建Vue实例。一个 Vue 应用由一个通过new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成。所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。</p>
<p>2、数据与方法。当一个Vue实例被创建时，它将data对象中的所有的属性加入到Vue的响应系统中。只有当实例被创建时就已经存在于data中的属性才是响应式的。除了数据属性，Vue 实例还暴露了一些有用的实例属性与方法。它们都有前缀$，以便与用户定义的属性区分开来。</p>
<p>3、实例生命周期钩子。每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等（tips:挂载（mounting）是指由操作系统使一个存储设备（诸如硬盘、CD-ROM或共享资源）上的计算机文件和目录可供用户通过计算机的文件系统访问的一个过程）。注意：不要在选项属性或回调上使用箭头函数，因为它没this，会导致一些指向其他作用域而导致异常（原来的this指向Vue实例）。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。生命周期具体可以看官方的<a href="https://cn.vuejs.org/v2/guide/instance.html">生命周期图示</a>。</p>
<p>三、模板语法</p>
<p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数（tips:虚拟DOM可以看作是一个使用javascript模拟了DOM结构的树形结构，这个树结构包含整个DOM结构的信息;我们要尽量减少对DOM的操作，这是优化前端性能的必要手段，虚拟DOM就是将DOM的对比放在了js层，通过对比不同之处来选择新渲染DOM节点，从而提高渲染效率）。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。注意：如果在某些场景无法使用模板来创建我们的HTML，可以用JS写渲染函数或者是JSX（其是JS的扩展，运用于React架构中，其格式比较像是模版语言）。</p>
<p>1、插值</p>
<p>1.1 文本：数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值。通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。</p>
<p>1.2 原始HTML：双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，需要使用v-html指令。注意：站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击（Cross Site Scripting，攻击全称跨站脚本攻击）。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。</p>
<p>1.3 特性：Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令。</p>
<p>1.4 JavaScript表达式：表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，不能是语句和流控制（用三元表达式替代）。模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如Math和Date ，不应该在模板表达式中试图访问用户定义的全局变量。（tips: 沙箱就是js中一块完全独立的区域,使用的都是自己独立的属性和方法）</p>
<p>2、指令</p>
<p>指令 (Directives) 是带有v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for是例外情况)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>
<p>2.1 参数：一些指令能够接收一个“参数”，在指令名称之后以冒号表示（注意不要留空格），例如v-bind指令可以用于响应式地更新 HTML 特，,v-on指令用于监听 DOM 事件。</p>
<p>2.2 动态参数：从 版本2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数，其会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。注意：参数表达式的写法存在一些约束（动态参数预期会求出一个字符串，异常情况下值为null。这个特殊的null 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告），如对动态参数的值的约束和对动态参数的表达式的约束（动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的；在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写）。</p>
<p>2.3 修饰符：修饰符 (modifier) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</p>
<p>3、缩写</p>
<p>v-前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，v-前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，v-前缀也变得没那么重要了。因此，Vue 为 v-bind<code>：属性</code> 和v-on:属性 这两个最常用的指令，提供了特定简写分别为，：属性和@属性。</p>
<p>四、计算属性和侦听器</p>
<p>1、计算属性</p>
<p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。所以，对于任何复杂逻辑，都应当使用计算属性。</p>
<p>1.1 例子：先声明了一个计算属性xx。然后在Vue实例定义中（computed:下面）提供的函数将用作属性xx的 getter 函数，从而实现一些复杂的逻辑，如某些依赖关系。当然，我们可以像绑定普通属性一样在模板中绑定计算属性。</p>
<p>1.2 计算属性缓存 vs 方法：我们可以通过定义Vue实例中方法（methods:下面）来实现上述例子的方法。然而，不同的是计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。</p>
<p>1.3 计算属性 vs 侦听属性：Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当有一些数据需要随着其它数据变动而变动时，很容易滥用watch——特别是如果之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的watch回调。</p>
<p>1.4 计算属性的setter：计算属性默认只有 getter ，不过在需要时也可以提供一个 setter。 </p>
<p>2、侦听器</p>
<p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。除了watch选项之外，还可以使用命令式的 vm.$watch API。</p>
<p>五、Class与Style绑定</p>
<p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是属性，所以我们可以用v-bind处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将v-bind用于class和style时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p>
<p>1、绑定HTML Class</p>
<p>1.1 对象语法：我们可以传给v-bind:class 一个对象，以动态地切换 class。可以在对象中传入更多属性来动态切换多个 class。此外，v-bind:class指令也可以与普通的 class 属性共存。绑定的数据对象不必内联定义在模板里，也可以在这里绑定一个返回对象的计算属性。</p>
<p>1.2 数组语法：我们可以把一个数组传给v-bind:class，以应用一个 class 列表。如果你也想根据条件切换列表中的 class，可以用三元表达式，不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法。　　</p>
<p>1.3 用在组件上：当在一个自定义组件上使用class属性时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。</p>
<p>2、绑定内联样式</p>
<p>2.1 对象语法：v-bind:style的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名。同样的，对象语法常常结合返回对象的计算属性使用。</p>
<p>2.2 数组语法：v-bind:style的数组语法可以将多个样式对象应用到同一个元素上。</p>
<p>2.3 自动添加前缀：当v-bind:style使用需要添加浏览器引擎前缀的 CSS 属性时，如transform，Vue.js 会自动侦测并添加相应的前缀。（tips：Vendor prefix—浏览器引擎前缀，是一些放在CSS属性前的小字符串，用来确保这种属性只在特定的浏览器渲染引擎下才能识别和生效。例如 -moz- &#x2F;* 火狐等使用Mozilla浏览器引擎的浏览器 <em>&#x2F;；-webkit- &#x2F;</em> Safari, 谷歌浏览器等使用Webkit引擎的浏览器 <em>&#x2F;；-o- &#x2F;</em> Opera浏览器(早期) <em>&#x2F; -ms- &#x2F;</em> Internet Explorer *&#x2F;）</p>
<p>2.4 多重值：从版本 2.3.0 起你可以为style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，这样写只会渲染数组中最后一个被浏览器支持的值。</p>
<p>六、条件渲染</p>
<p>1、v-if</p>
<p>v-if指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染，还可以配合v-else使用。</p>
<p>1.1 在&lt; template&gt;元素上使用v-if条件渲染分组：因为v-if是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个&lt; template&gt; 元素当做不可见的包裹元素，并在上面使用v-if。最终的渲染结果将不包含 &lt; template&gt; 元素。</p>
<p>1.2 v-else：可以使用v-else 指令来表示v-if 的“else 块”。注意，v-else元素必须紧跟在带v-if或者v-else-if 的元素的后面，否则它将不会被识别。</p>
<p>1.3 v-else-if：顾名思义，充当v-if的“else-if 块”，可以连续使用。类似于v-else，v-else-if也必须紧跟在带v-if或者v-else-if 的元素的后面。</p>
<p>1.4 用key管理可复用的元素：Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。Vue 提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的key属性即可。</p>
<p>2、v-show。另一个用于根据条件展示元素的选项是v-show指令。不同的是带有v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性display。注意，v-show 不支持&lt; template&gt; 元素，也不支持v-else。</p>
<p>3、v-if vs v-show。v-if是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。v-if也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。相比之下，v-show就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。一般来说，v-if 有更高的切换开销，而v-show有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用v-show较好；如果在运行时条件很少改变，则使用v-if较好。</p>
<p>4、v-if 与v-for一起使用。官网不推荐同时使用v-if 和v-for。当v-if 与v-for 一起使用时，v-for具有比v-if更高的优先级。这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你只想为部分项渲染节点时，这种优先级的机制会十分有用。</p>
<p>七、列表渲染</p>
<p>1、v-for。用v-for把一个数组对应为一组元素。我们可以用v-for指令基于一个数组来渲染一个列表。v-for指令需要使用item in items形式的特殊语法，其中items 是源数据数组，而item则是被迭代的数组元素的别名。在v-for块中，我们可以访问所有父作用域的属性。v-for还支持一个可选的第二个参数，即当前项的索引。也可以用of 替代in作为分隔符，因为它更接近 JavaScript 迭代器的语法。我们还可以在v-for里面使用对象，可以遍历对象的属性。也可以提供第二个的参数为 property 名称 （也就是键名），还可以用第三个参数作为索引。注意：在遍历对象时，会按object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下都一致。</p>
<p>2、维护状态。当 Vue 正在更新使用v-for 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一key属性。建议尽可能在使用v-for 时提供keyattribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。因为它是 Vue 识别节点的一个通用机制，key并不仅与v-for 特别关联，还有别的用途。注意，不要使用对象或数组之类的非基本类型值作为v-for的key。请用字符串或数值类型的值。</p>
<p>3、数组检测更新。变异方法（mutation method），Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：push(),pop(),shift(),unshift(),splice(),sort(),reverse()。变异方法，顾名思义，会改变调用了这些方法的原始数组。相比之下，也有非变异 (non-mutating method) 方法，例如filte()、concat() 和slice() 。它们不会改变原始数组，而总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组，你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。由于 JavaScript 的限制，Vue 不能检测以下数组的变动：利用索引直接设置一个数组项时和修改数组的长度时（两种情况都是非响应性的）。对应第一种情况，我们可以用Vue.set(vm.items, indexOfItem, newValue)&#x2F;vm.$set实例方法和vm.items.splice(indexOfItem, 1, newValue)；第二种情况可以使用splice:vm.items.splice(newLength)。</p>
<p>4、对象变更检测注意事项。还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除。对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性。但是，可以使用方法Vue.set(object, propertyName, value)或vm.$set实例方法向嵌套对象添加响应式属性。有时你可能需要为已有对象赋值多个新属性，比如使用Object.assign() 或 _.extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象（对象的合并），如Object.assign({}, vm1.userProfile, {XX}}。</p>
<p>5、显示过滤&#x2F;排序后的结果。有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际改变或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>
<p>6、在v-for里使用值范围。v-for也可以接受整数。在这种情况下，它会把模板重复对应次数。</p>
<p>7、在&lt; template&gt;上使用v-for。类似于v-if，你也可以利用带有v-for 的 &lt; template&gt;来循环渲染一段包含多个元素的内容。</p>
<p>8、v-for与v-if一同使用。官网不推荐同时使用v-if 和v-for。当v-if 与v-for 一起使用时，v-for具有比v-if更高的优先级。这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你只想为部分项渲染节点时，这种优先级的机制会十分有用。</p>
<p>9、在组件上使用v-for。在自定义组件上，你可以像在任何普通元素上一样使用 v-for，注意，2.2.0+ 的版本里，当在组件上使用 v-for 时，key 现在是必须的。然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要使用 prop，不自动将 item 注入到组件里的原因是，这会使得组件与 v-for 的运作紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</p>
<p>八、事件处理</p>
<p>1、监听事件。可以用v-on指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>
<p>2、事件处理方法。然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。因此 v-on 还可以接收一个需要调用的方法名称。</p>
<p>3、内联处理器中的方法。除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法。有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法。</p>
<p>4、事件修饰符。在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。 为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的：.stop ，.prevent ，.capture，.self， .once， .passive。注意：使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。版本2.1.4新增了.once修饰符，不像其它只能对原生的 DOM 事件起作用的修饰符，.once 修饰符还能被用到自定义的组件事件上。版本2.3.0新增 .passive 修饰符（Vue 对应 addEventListener 中的 passive 选项提供的）。.passive 修饰符尤其能够提升移动端的性能。注意，不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。</p>
<p>5、按键修饰符。在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符。为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：.enter .tab .delete (捕获“删除”和“退格”键) .esc .space .up .down .left .right。还可以通过全局 config.keyCodes 对象自定义按键修饰符别名。</p>
<p>6、系统修饰符。版本2.1.0新增：可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器：.ctrl .alt .shift .meta。2.5.0新增：.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。版本2.2.0新增一些鼠标按键修饰符：.left .right .middle。 这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p>
<p>7、为什么在HTML中监听事件。你可能注意到这种事件监听的方式违背了关注点分离 (separation of concern) 这个长期以来的优良传统。但不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 v-on 有几个好处： 扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。 因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。 当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。（tips:关注点分离原则，也叫正交原则，HTML CSS JS 分离 互不影响）</p>
<p>九、表单输入绑定</p>
<p>1、基础用法</p>
<p>可以用 v-model 指令在表单 &lt; input&gt;、&lt; textarea&gt; 及 &lt; select&gt; 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。注意，v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件： text 和 textarea 元素使用 value 属性和 input 事件； checkbox 和 radio 使用 checked 属性和 change 事件； select 字段将 value 作为 prop 并将 change 作为事件。基础用法包括：文本，多行文本，复选框，单选按钮，选择框。（在文本区域插值 (&lt; textarea&gt;&lt; &#x2F;textarea&gt;) 并不会生效，应用 v-model 来代替。如果 v-model 表达式的初始值未能匹配任何选项，&lt; select&gt; 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，推荐提供一个值为空的禁用选项。）</p>
<p>2、值绑定</p>
<p>对于单选按钮，复选框及选择框的选项，v-model 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)。但是有时我们可能想把值绑定到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现，并且这个属性的值可以不是字符串。</p>
<p>3、修饰符</p>
<p>修饰符有：.lazy,.number,.trim。.lazy：在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步。.number：如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符。.trim：如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符。</p>
<p>4、在组件上使用v-model</p>
<p>HTML 原生的输入元素类型并不总能满足需求。幸好，Vue 的组件系统允许你创建具有完全自定义行为且可复用的输入组件。这些输入组件甚至可以和 v-model 一起使用。</p>
<p>十、组件基础</p>
<p>1、创建组件</p>
<p>通过Vue.component（），我们可以创建一个组件。组件是可复用的 Vue 实例，且带有一个名字。我们可以在一个通过 new Vue 创建的 Vue 根实例中，把这个组件作为自定义元素来使用。注意，因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。</p>
<p>2、组件的复用</p>
<p> 我们可以将组件进行任意次数的复用，每个组件都会独立维护自己的元素，因为每次使用一次组件，相当于一个它的新实例被创建。注意，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，这样就不会再各个组件实例间相互影响。</p>
<p>3、组件的组织</p>
<p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：全局注册和局部注册。全局注册的组件可以用在其被注册之后的任何 (通过new Vue) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。</p>
<p>4、通过Prop向子组件传递数据</p>
<p>Prop 是你可以在组件上注册的一些自定义特性（props选项）。当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性。一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。</p>
<p>5、单个根元素</p>
<p>当使用组件时，出现every component must have a single root element (每个组件必须只有一个根元素)的问题时，我们可以将模板的内容包裹在一个父元素内，来修复这个问题。当组件变得越来越复杂的时候，为每个相关的信息定义一个 prop 会变得很麻烦，因而我们要重构这个组件让它变成接受一个单独的XX属性的 prop，在template里面添加关于XX属性的定义说明即可。</p>
<p>6、监听子组件事件</p>
<p>在我们开发某些组件时，它的一些功能可能要求我们和父级组件进行沟通。父级组件可以像处理 native DOM 事件一样通过v-on监听子组件实例的任意事件，同时子组件可以通过调用内建的 $emit 方法 并传入事件名称来触发一个事件。有的时候用一个事件来抛出一个特定的值是非常有用的：可以使用 $emit 的第二个参数来提供这个值，然后当在父级组件监听这个事件的时候，我们可以通过 $event 访问到被抛出的这个值，或者，如果这个事件处理函数是一个方法，那么这个值将会作为第一个参数传入这个方法。自定义事件也可以用于创建支持v-model 的自定义输入组件。</p>
<p>7、通过插槽分发内容</p>
<p>和 HTML 元素一样，我们经常需要向一个组件传递内容，Vue 自定义的 slot&gt; 元素让这变得非常简单。</p>
<p>8、动态组件</p>
<p>有的时候，在不同组件之间进行动态切换是非常有用的。可以通过 Vue 的&lt; component&gt; 元素加一个特殊的is 特性来实现。</p>
<p>9、解析DOM模板时的注意事项</p>
<p>有些 HTML 元素，诸如 &lt; ul&gt;、&lt; ol&gt;、&lt; table&gt; 和 &lt; select&gt;，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 &lt; li&gt;、&lt; tr&gt; 和 &lt; option&gt;，只能出现在其它某些特定的元素内部。这会导致我们使用这些有约束条件的元素时遇到一些问题。幸好这个特殊的is 特性给了我们一个变通的办法。</p>
<p>（上述就是关于Vue框架的基础，其它深入的用法心得也在我的其他博客下，欢迎一起学习：)）</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计（Professional JavaScript for Web Developers）-阅读记录与心得</title>
    <url>/2019/09/15/blog2/</url>
    <content><![CDATA[<h2 id="目标：掌握JS的基本概念。（本书大都是ES5标准的，先用本书入门，在去看ES6标准的书籍）"><a href="#目标：掌握JS的基本概念。（本书大都是ES5标准的，先用本书入门，在去看ES6标准的书籍）" class="headerlink" title="目标：掌握JS的基本概念。（本书大都是ES5标准的，先用本书入门，在去看ES6标准的书籍）"></a>目标：掌握JS的基本概念。（本书大都是ES5标准的，先用本书入门，在去看ES6标准的书籍）</h2><h2 id="内容：（未完成，待继续）"><a href="#内容：（未完成，待继续）" class="headerlink" title="内容：（未完成，待继续）"></a>内容：（未完成，待继续）</h2><h2 id="一、第一阶段：JavaScript基本内容"><a href="#一、第一阶段：JavaScript基本内容" class="headerlink" title="一、第一阶段：JavaScript基本内容"></a>一、第一阶段：JavaScript基本内容</h2><p>1、第一章，主要讲的是JavaScript的历史发展与版本问题。本章节可以快速阅读，小结重点记忆：JS是由三个不同的部分组成：ECMAScript,DOM,BOM.</p>
<p>2、第二章，主要讲script脚本元素、嵌入脚本及外部脚本等的基本概念。本章节可以快速阅读，其中XHTML的内容可以不看。（因为我们最好在学习的过程中遵从比较新的标准–HTML5）</p>
<p>3、第三章，JS基本概念，包括语法，数据类型，函数等。如果读者有着其他编程语言基础，如C语言，Python语言等，本章节也是可以快速阅读的，但要注意JS语言的一些区别。如果没有，内容不多，还是建议仔细阅读。</p>
<p>4、第四章，变量，作用域，垃圾回收。重点通过看举例理解变量的作用域问题。</p>
<p>5、第五章，引用类型，包括有对象类型、数组类型、正则式类型、函数类型，基本包装类型。重点看每个引用类型的方法和一些使用技巧与区别。属于基础，需细看。</p>
<p>6、第六章，面向对象的程序设计。JS用得最多的就是对面，本章若没编程基础，建议细看。有基础的可以看快点，若对ECMAScript 6感兴趣的，建议本章只看基础概念，然后阅读ES6的书籍，如《ES6标准入门》，增加对该章节内容新的认识。</p>
<p>7、第七章，函数表达式。基础，需细看，重点理解闭包和私有变量。其中，第七章有提到一些JS的设计模式。为了进一步对第六章和第七章内容的理解，可以看一下《JavaScript设计模式与开发实践》，里面讲了很多面向对象的设计原则与编程技巧。</p>
<p><em>注：如果想了解比较新的ES6标准，用JS实现一些数据结构、算法等，读到这里可以直接转去读相关的书。（本人是在通过红宝书先学习JS基础，然后去看别的书籍和做Coding练习，增强自己对JS的掌握的。之后如果进一步学习HTML，再去看第二阶段和第三阶段的内容。）</em></p>
<h2 id="二、第二阶段：BOM、DOM、HTML5相关。"><a href="#二、第二阶段：BOM、DOM、HTML5相关。" class="headerlink" title="二、第二阶段：BOM、DOM、HTML5相关。"></a>二、第二阶段：BOM、DOM、HTML5相关。</h2><p>1、第八章–第十七章。</p>
<h2 id="三、第三阶段：JS与BOM、DOM、HTML、后端交互相关。"><a href="#三、第三阶段：JS与BOM、DOM、HTML、后端交互相关。" class="headerlink" title="三、第三阶段：JS与BOM、DOM、HTML、后端交互相关。"></a>三、第三阶段：JS与BOM、DOM、HTML、后端交互相关。</h2><p>1、第十八章–第二十一章。</p>
<h2 id="四、第四阶段：JS的高级技巧、离线应用、可维护、性能、部署和一些API应用。"><a href="#四、第四阶段：JS的高级技巧、离线应用、可维护、性能、部署和一些API应用。" class="headerlink" title="四、第四阶段：JS的高级技巧、离线应用、可维护、性能、部署和一些API应用。"></a>四、第四阶段：JS的高级技巧、离线应用、可维护、性能、部署和一些API应用。</h2><p>1、第二十二章–第二十五章。</p>
]]></content>
      <categories>
        <category>前端书籍</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue学习的心得记录（深入了解组件）</title>
    <url>/2019/12/06/blog20/</url>
    <content><![CDATA[<p>目标：深入了解Vue框架（2.x版本）的组件</p>
<p>方法：通过看Vue的官方手册（<a href="https://cn.vuejs.org/">Vue官方网站</a>）</p>
<p>内容：本博客记录一些学习Vue中的心得，便于日后启发。（深入了解组件）</p>
<span id="more"></span>

<p>注：遇到一些不懂的函数等，可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API参考</a>。</p>
<p>正文：</p>
<p>一、组件注册</p>
<p>1、组件名</p>
<p>在注册一个组件的时候（Vue.component），我们始终需要给它一个名字（组件名）。该组件名就是 Vue.component 的第一个参数。当直接在 DOM 中使用一个组件 (而不是在字符串模板或单文件组件) 的时候，我们强烈推荐遵循 W3C 规范中的自定义组件名 (字母全小写且必须包含一个连字符)。这会帮助你避免和当前以及未来的 HTML 元素相冲突。定义组件名的方式有两种：使用 kebab-case(当使用 kebab-case (短横线分隔命名) 定义一个组件时，你也必须在引用这个自定义元素时使用 kebab-case)和使用 PascalCase（当使用 PascalCase (首字母大写命名) 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用。）</p>
<p>2、全局注册</p>
<p>到目前为止，我们只用过 Vue.component 来创建组件，这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的 Vue 根实例 (new Vue) 的模板中。在所有子组件中也是如此，也就是说这三个组件在各自内部也都可以相互使用。</p>
<p>3、局部注册</p>
<p>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。在这些情况下，你可以通过一个普通的 JavaScript 对象来定义组件。然后在new Vue定义下的 components 选项中定义你想要使用的组件，对于 components 对象中的每个属性来说，其属性名就是自定义元素的名字，其属性值就是这个组件的选项对象。注意局部注册的组件在其子组件中不可用，除非把一个组件定义到另一个组件内。</p>
<p>4、模块系统</p>
<p>针对使用import&#x2F;require 来使用一个模块系统的情况，Vue官网提供了一些特殊的使用说明和注意事项。在模板系统中局部注册：在这些情况下，我们推荐创建一个 components 目录，并将每个组件放置在其各自的文件中。然后你需要在局部注册之前导入每个你想使用的组件。基础组件的自动化全局注册：可能你的许多组件只是包裹了一个输入框或按钮之类的元素，是相对通用的。我们有时候会把它们称为基础组件，它们会在各个组件中被频繁的用到。所以会导致很多组件里都会有一个包含基础组件的长列表，而只是用于模板中的一小部分。幸好如果你使用了 webpack (或在内部使用了 webpack 的 Vue CLI 3+)，那么就可以使用 require.context 只全局注册这些非常通用的基础组件。（这里有一份可以让你在应用入口文件 (比如 <code>src/main.js</code>) 中全局导入基础组件的<a href="https://cn.vuejs.org/v2/guide/components-registration.html">示例代码</a>）记住全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生。</p>
<p>二、Prop</p>
<p>1、Prop的大小写</p>
<p>HTML 中的特性名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法)（JS命名习惯） 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) （HTML命名习惯）命名。如果你使用字符串模板，那么这个限制就不存在了。</p>
<p>2、Prop的类型</p>
<p>除了以字符串数组形式列出的 prop，如果希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些属性的名称和值分别是 prop 各自的名称和类型。这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。</p>
<p>3、传递静态或者动态Prop</p>
<p>通过在组件定义中在Prop使用字符串数组声明属性，传递静态Prop给组件。prop 也可以通过 v-bind 动态赋值（如变量的值，复杂表达式的值）。之前我们传入的值都是字符串类型的，但实际上任何类型的值都可以传给一个 prop，如传入一个数字，一个布尔值，一个数组，一个对象和一个对象的所有属性。</p>
<p>4、单向数据流</p>
<p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身将会影响到父组件的状态。</p>
<p>5、Prop验证</p>
<p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p>
<p>6、非Prop的特性</p>
<p>一个非 prop 特性是指传向一个组件，但是该组件并没有相应 prop 定义的特性。因为显式定义的 prop 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的特性，而这些特性会被添加到这个组件的根元素上。替换&#x2F;合并已有的特性，对于绝大多数特性来说，从外部提供给组件的值会替换掉组件内部设置好的值，庆幸的是，class 和 style 特性会稍微智能一些，即两边的值会被合并起来，从而得到最终的值。禁用特性继承，如果你不希望组件的根元素继承特性，你可以在组件的选项中设置 inheritAttrs: false，这尤其适合配合实例的 $attrs 属性使用，该属性包含了传递给一个组件的特性名和特性值，有了 inheritAttrs: false 和 $attrs，你就可以手动决定这些特性会被赋予哪个元素。注意 inheritAttrs: false 选项不会影响 style 和 class 的绑定。</p>
<p>三、自定义事件</p>
<p>1、事件名</p>
<p> 不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。因此，我们推荐你始终使用 kebab-case 的事件名。</p>
<p>2、自定义组件的v-model</p>
<p>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突。</p>
<p>3、将原生事件绑定到组件</p>
<p>你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 v-on 的 .native 修饰符。在有的时候这是很有用的，不过在你尝试监听一个类似 &lt;   input&gt; 的非常特定的元素时，这并不是个好主意，例如它可能是被别的元素包裹，导致父级的 .native 监听器将静默失败。它不会产生任何报错，但是 onFocus 处理函数不会如你预期地被调用。为了解决这个问题，Vue 提供了一个 $listeners 属性，它是一个对象，里面包含了作用在这个组件上的所有监听器。</p>
<p>4、.sync修饰符</p>
<p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。这也是为什么我们推荐以 update:myPropName 的模式触发事件取而代之。然后父组件可以监听那个事件并根据需要更新一个本地的数据属性。为了方便起见，我们为这种模式提供一个缩写，即 .sync 修饰符。注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用。当我们用一个对象同时设置多个 prop 的时候，也可以将这个 .sync 修饰符和 v-bind 配合使用。</p>
<p>四、插槽</p>
<p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 这两个目前已被废弃但未被移除且仍在文档中的特性。</p>
<p>1、插槽内容</p>
<p>Vue 实现了一套内容分发的 API，这套 API 的设计灵感源自 Web Components 规范草案，将 &lt;  slot&gt; 元素作为承载分发内容的出口。当组件渲染的时候，插槽内可以包含任何模板代码，包括 HTML，甚至其它的组件。如果组件没有包含一个&lt;  slot&gt;元素，则该组件起始标签和结束标签之间的任何内容都会被抛弃。</p>
<p>2、编译作用域</p>
<p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p>
<p>3、后备内容</p>
<p>有时为一个插槽设置具体的后备 (也就是默认的) 内容是很有用的，它只会在没有提供内容的时候被渲染。</p>
<p>4、具名插槽（自 2.6.0 起有所更新）</p>
<p>有时我们需要多个插槽。对于这样的情况，&lt; slot&gt; 元素有一个特殊的特性：name。这个特性可以用来定义额外的插槽。一个不带 name 的 &lt; slot&gt; 出口会带有隐含的名字“default”。在向具名插槽提供内容的时候，我们可以在一个 &lt; template&gt; 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称。注意 v-slot 通常只能添加在 &lt; template&gt; 上。</p>
<p>5、作用域插槽（自 2.6.0 起有所更新）</p>
<p>有时让插槽内容能够访问子组件中才有的数据是很有用的。绑定在 &lt; slot&gt; 元素上的特性被称为插槽 prop。不带参数的 v-slot 被假定对应默认插槽。注意默认插槽的缩写语法不能和具名插槽混用，因为它会导致作用域不明确，只要出现多个插槽，请始终为所有的插槽使用完整的基于 &lt; template&gt; 的语法。作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里。这意味着 v-slot 的值实际上可以是任何能够作为函数定义中的参数的 JavaScript 表达式。所以在支持的环境下 (单文件组件或现代浏览器)，你也可以使用 ES2015 解构来传入具体的插槽 prop。</p>
<p>6、动态插槽名</p>
<p>动态指令参数也可以用在 v-slot 上，来定义动态的插槽名。</p>
<p>7、具名插槽的缩写</p>
<p>跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (v-slot:) 替换为字符 #。然而，和其它指令一样，该缩写只在其有参数的时候才可用。如果你希望使用缩写的话，你必须始终以明确插槽名取而代之。</p>
<p>8、说明</p>
<p>插槽 prop 允许我们将插槽转换为可复用的模板，这些模板可以基于输入的 prop 渲染出不同的内容。这在设计封装数据逻辑同时允许父级组件自定义部分布局的可复用组件时是最有用的。</p>
<p>9、废弃了的语法</p>
<p>v-slot 指令自 Vue 2.6.0 起被引入，提供更好的支持 slot 和 slot-scope 特性的 API 替代方案。在接下来所有的 2.x 版本中 slot 和 slot-scope 特性仍会被支持，但已经被官方废弃且不会出现在 Vue 3 中。</p>
<p>五、动态组件&amp;异步组件</p>
<p>1、在动态组件上使用keep-alive</p>
<p>我们之前曾经在一个多标签的界面中使用 is 特性来切换不同的组件。当在这些组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。如果更希望那些标签的组件实例能够被在它们第一次被创建的时候缓存下来。为了解决这个问题，我们可以用一个 &lt; keep-alive&gt; 元素将其动态组件包裹起来。注意这个 &lt; keep-alive&gt; 要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部&#x2F;全局注册。</p>
<p>2、异步组件</p>
<p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。一个推荐的做法是将异步组件和 webpack 的 code-splitting 功能一起配合使用。</p>
<p>六、处理边界情况</p>
<p>这里记录的都是和处理边界情况有关的功能，即一些需要对 Vue 的规则做一些小调整的特殊情况。不过注意这些功能都是有劣势或危险的场景的。我们会在每个案例中注明，所以当你使用每个功能的时候请稍加留意。</p>
<p>1、访问元素&amp;组件</p>
<p>在绝大多数情况下，我们最好不要触达另一个组件实例内部或手动操作 DOM 元素。不过也确实在一些情况下做这些事情是合适的。</p>
<p>1.1 访问根节点</p>
<p>在每个 new Vue 实例的子组件中，其根实例可以通过 $root 属性进行访问。所有的子组件都可以将这个实例作为一个全局 store 来访问或使用。对于 demo 或非常小型的有少量组件的应用来说这是很方便的。不过这个模式扩展到中大型应用来说就不然了。因此在绝大多数情况下，我们强烈推荐使用 Vuex 来管理应用的状态。（tips：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。）</p>
<p>1.2 访问父级组件实例</p>
<p>和 $root 类似，$parent 属性可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。注意，在绝大多数情况下，触达父级组件会使得你的应用更难调试和理解，尤其是当你变更了父级组件的数据的时候。</p>
<p>1.3 访问子组件实例或子元素</p>
<p>尽管存在 prop 和事件，有的时候你仍可能需要在 JavaScript 里直接访问一个子组件。为了达到这个目的，你可以通过 ref 特性为这个子组件赋予一个 ID 引用。注意，$refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。</p>
<p>1.4 依赖注入</p>
<p>使用 $parent 属性无法很好的扩展到更深层级的嵌套组件上。这也是依赖注入的用武之地，它用到了两个新的实例选项：provide 和 inject。provide 选项允许我们指定我们想要提供给后代组件的数据&#x2F;方法。然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性。然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。</p>
<p>2、程序化的事件侦听器</p>
<p>现在，你已经知道了 $emit 的用法，它可以被 v-on 侦听，但是 Vue 实例同时在其事件接口中提供了其它的方法。我们可以： 通过 $on(eventName, eventHandler) 侦听一个事件， 通过 $once(eventName, eventHandler) 一次性侦听一个事件， 通过 $off(eventName, eventHandler) 停止侦听一个事件。</p>
<p>3、循环引用</p>
<p>组件是可以在它们自己的模板中调用自身的。不过它们只能通过 name 选项来做这件事。稍有不慎，递归组件就可能导致无限循环，所以请确保递归调用是条件性的 (例如使用一个最终会得到 false 的 v-if)。组件之间的循环引用：我们先把两个组件称为 A 和 B。模块系统发现它需要 A，但是首先 A 依赖 B，但是 B 又依赖 A，但是 A 又依赖 B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。为了解决这个问题，我们需要给模块系统一个点，在那里“A 反正是需要 B 的，但是我们不需要先解析 B。”</p>
<p>4、模板定义的替代品</p>
<p>当 inline-template 这个特殊的特性出现在一个子组件上时，这个组件将会使用其里面的内容作为模板，而不是将其作为被分发的内容。这使得模板的撰写工作更加灵活。另一个定义模板的方式是在一个 &lt; script&gt; 元素中，并为其带上 text&#x2F;x-template 的类型，然后通过一个 id 将模板引用过去。</p>
<p>5、控制更新</p>
<p>感谢 Vue 的响应式系统，它始终知道何时进行更新 (如果你用对了的话)。不过还是有一些边界情况，你想要强制更新，尽管表面上看响应式的数据没有发生改变。也有一些情况是你想阻止不必要的更新。</p>
<p>1,1 强制更新</p>
<p>如果你发现你自己需要在 Vue 中做一次强制更新，99.9% 的情况，是你在某个地方做错了事。你可能还没有留意到数组或对象的变更检测注意事项，或者你可能依赖了一个未被 Vue 的响应式系统追踪的状态。然而，如果你已经做到了上述的事项仍然发现在极少数的情况下需要手动强制更新，那么你可以通过 $forceUpdate 来做这件事。</p>
<p>1.2 通过v-once创建低开销的静态组件</p>
<p>渲染普通的 HTML 元素在 Vue 中是非常快速的，但有的时候你可能有一个组件，这个组件包含了大量静态内容。在这种情况下，你可以在根元素上添加 v-once 特性以确保这些内容只计算一次然后缓存起来。注意，试着不要过度使用这个模式。当你需要渲染大量静态内容时，极少数的情况下它会给你带来便利，除非你非常留意渲染变慢了，不然它完全是没有必要的——再加上它在后期会带来很多困惑。例如，设想另一个开发者并不熟悉 v-once 或漏看了它在模板中，他们可能会花很多个小时去找出模板为什么无法正确更新。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue学习的心得记录（过渡&amp;动画）</title>
    <url>/2019/12/08/blog21/</url>
    <content><![CDATA[<p>目标：深入了解Vue框架（2.x版本）的过渡和动画</p>
<p>方法：通过看Vue的官方手册（<a href="https://cn.vuejs.org/">Vue官方网站</a>）</p>
<p>内容：本博客记录一些学习Vue中的心得，便于日后启发。（过渡&amp;动画）</p>
<span id="more"></span>

<p>注：遇到一些不懂的函数等，可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API参考</a>。</p>
<p>正文：</p>
<p>一、概述</p>
<p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。 包括以下工具：</p>
<p>　　在 CSS 过渡和动画中自动应用 class</p>
<p>　　可以配合使用第三方 CSS 动画库，如 Animate.css</p>
<p>　　在过渡钩子函数中使用 JavaScript 直接操作 DOM 可以配合使用第三方 JavaScript 动画库，如 Velocity.js</p>
<p>在这里，我们只会讲到进入、离开和列表的过渡，你也可以看下一节的 管理过渡状态。</p>
<p>二、单元素&#x2F;组件的过渡</p>
<p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入&#x2F;离开过渡：条件渲染 (使用 v-if) ，条件展示 (使用 v-show) ，动态组件，组件根节点。</p>
<p>当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理： 自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加&#x2F;删除 CSS 类名。 如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用。 如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡&#x2F;动画，DOM 操作 (插入&#x2F;删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 nextTick 概念不同)</p>
<p>1.1 过渡的类名</p>
<p>在进入&#x2F;离开的过渡中，会有 6 个 class 切换。</p>
<p><img src="/2019/12/08/blog21/1803687-20191208163209018-1828462751-1577946500366.png" alt="img"></p>
<p>v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</p>
<p>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p>
<p>v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡&#x2F;动画完成之后移除。</p>
<p>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</p>
<p>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</p>
<p>v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡&#x2F;动画完成之后移除。</p>
<p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 &lt; transition&gt;，则 v- 是这些类名的默认前缀。如果你使用了 &lt; transition name&#x3D;”my-transition”&gt;，那么 v-enter 会替换为 my-transition-enter。</p>
<p>1.2 CSS过渡</p>
<p>常用的过渡都是使用CSS过渡。</p>
<p>1.3 CSS动画</p>
<p>CSS 动画用法同 CSS 过渡，区别是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend 事件触发时删除。（tips：animationend 事件在 CSS 动画完成后触发。）</p>
<p>1.4 自定义过渡的类名</p>
<p>我们可以通过以下特性来自定义过渡类名： enter-class， enter-active-class， enter-to-class (2.1.8+)， leave-class， leave-active-class， leave-to-class (2.1.8+)。他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 Animate.css 结合使用十分有用。</p>
<p>1.5 同时使用过渡和动画</p>
<p>Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 transitionend 或 animationend ，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。但是，在一些场景中，你需要给同一个元素同时设置两种过渡动效，比如 animation 很快的被触发并完成了，而 transition 效果还没结束。在这种情况中，你就需要使用 type 特性并设置 animation 或 transition 来明确声明你需要 Vue 监听的类型。</p>
<p>1.6 显性的过渡持续时间</p>
<p>在很多情况下，Vue 可以自动得出过渡效果的完成时机。默认情况下，Vue 会等待其在过渡效果的根元素的第一个 transitionend 或 animationend 事件。然而也可以不这样设定——比如，我们可以拥有一个精心编排的一系列过渡效果，其中一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果。 在这种情况下你可以用 &lt; transition&gt; 组件上的 duration 属性定制一个显性的过渡持续时间 (以毫秒计)，也可以定制进入和移出的持续时间。</p>
<p>1.7 JavaScript钩子</p>
<p>可以在transition属性中声明 JavaScript 钩子，即在transition属性中绑定（监听）一些事件（状态节点），然后在对应Vue定义下的方法里面定义JS函数，实现某些状态下对应的某些功能。钩子函数可以结合 CSS transitions&#x2F;animations 使用，也可以单独使用。注意，当只用 JavaScript 过渡的时候，在 enter 和 leave 中必须使用 done 进行回调。否则，它们将被同步调用，过渡会立即完成。推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css&#x3D;”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</p>
<p>三、初始渲染的过渡</p>
<p>可以通过 appear 特性设置节点在初始渲染的过渡。这里默认和进入&#x2F;离开过渡一样，同样也可以自定义 CSS 类名。自定义 JavaScript 钩子。</p>
<p>四、多个元素的过渡</p>
<p>最常见的多标签过渡是一个列表和描述这个列表为空消息的元素（通过结合使用v-if和v-else等条件渲染）。注意，当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，给在 &lt; transition&gt; 组件中的多个元素设置 key 是一个更好的实践。</p>
<p>同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了 过渡模式（mode属性）：in-out：新元素先进行过渡，完成之后当前元素过渡离开。 out-in：当前元素先进行过渡，完成之后新元素过渡进入。</p>
<p>五、多个组件的过渡</p>
<p>多个组件的过渡简单很多， 我们不需要使用 key 特性。相反，我们只需要使用动态组件（通过使用 is 特性来切换不同的组件）。</p>
<p>六、列表过渡</p>
<p>怎么同时渲染整个列表，比如使用 v-for ？在这种场景中，使用 &lt; transition-group&gt; 组件。在我们深入例子之前，先了解关于这个组件的几个特点：不同于 &lt; transition&gt;，它会以一个真实元素呈现：默认为一个 &lt; span&gt;。你也可以通过 tag 特性更换为其他元素，例如p,ul等。 过渡模式不可用，因为我们不再相互切换特有的元素。 内部元素 总是需要 提供唯一的 key 属性值。 CSS 过渡的类将会应用在内部的元素中，而不是这个组&#x2F;容器本身。</p>
<p>1.1 列表的进入、离开过渡</p>
<p>使用 &lt; transition-group&gt; 组件，进入和离开的过渡使用之前一样的 CSS 类名。存在一个问题：当添加和移除元素的时候，周围的元素会瞬间移动到他们的新布局的位置，而不是平滑的过渡，我们下面会解决这个问题。</p>
<p>1.2 列表的排序过渡</p>
<p>&lt; transition-group&gt; 组件还有一个特殊之处。不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 v-move 特性，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 name 属性来自定义前缀，也可以通过 move-class 属性手动设置。v-move 对于设置过渡的切换时机和过渡曲线非常有用。Vue 使用了一个叫 FLIP 简单的动画队列 使用 transforms 将元素从之前的位置平滑过渡新的位置。FLIP 动画不仅可以实现单列过渡，多维网格也同样可以过渡。</p>
<p>1.3列表的交错过渡</p>
<p>通过 data 属性与 JavaScript 通信 ，就可以实现列表的交错过渡。</p>
<p>七、可复用的过渡</p>
<p> 过渡可以通过 Vue 的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将 &lt; transition&gt; 或者 &lt; transition-group&gt; 作为根组件，然后将任何子组件放置在其中就可以了。</p>
<p>八、动态过渡</p>
<p>在 Vue 中即使是过渡也是数据驱动的！动态过渡最基本的例子是通过 name 特性来绑定动态值。当你想用 Vue 的过渡系统来定义的 CSS 过渡&#x2F;动画 在不同过渡间切换会非常有用。所有过渡特性都可以动态绑定，但我们不仅仅只有特性可以利用，还可以通过事件钩子获取上下文中的所有数据，因为事件钩子都是方法。这意味着，根据组件的状态不同，你的 JavaScript 过渡会有不同的表现。</p>
<p>九、状态过渡</p>
<p>Vue 的过渡系统提供了非常多简单的方法设置进入、离开和列表的动效。那么对于数据元素本身的动效呢，比如： 数字和运算， 颜色的显示， SVG 节点的位置， 元素的大小和其他的属性。这些数据要么本身就以数值形式存储，要么可以转换为数值。有了这些数值后，我们就可以结合 Vue 的响应式和组件系统，使用第三方库来实现切换元素的过渡状态。</p>
<p>1、动态动画与侦听器</p>
<p>通过侦听器（watch）我们能监听到任何数值属性的数值更新。</p>
<p>2、动态状态过渡</p>
<p>就像 Vue 的过渡组件一样，数据背后状态过渡会实时更新，这对于原型设计十分有用。当你修改一些变量，即使是一个简单的 SVG 多边形也可实现很多难以想象的效果。（tips:SVG 意为可缩放矢量图形（Scalable Vector Graphics））</p>
<p>3、把过渡放到组件里</p>
<p>管理太多的状态过渡会很快的增加 Vue 实例或者组件的复杂性，幸好很多的动画可以提取到专用的子组件。</p>
<p>4、赋予设计以生命</p>
<p> 只要一个动画，就可以带来生命。不幸的是，当设计师创建图标、logo 和吉祥物的时候，他们交付的通常都是图片或静态的 SVG。所以，虽然 GitHub 的章鱼猫、Twitter 的小鸟以及其它许多 logo 类似于生灵，它们看上去实际上并不是活着的。</p>
<p>Vue 可以帮到你。因为 SVG 的本质是数据，我们只需要这些动物兴奋、思考或警戒的样例。然后 Vue 就可以辅助完成这几种状态之间的过渡动画，来制作你的欢迎页面、加载指示、以及更加带有情感的提示。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue学习的心得记录（可复用性&amp;组合）</title>
    <url>/2019/12/09/blog22/</url>
    <content><![CDATA[<p>目标：深入了解Vue框架（2.x版本）的可复用性和组合</p>
<p>方法：通过看Vue的官方手册（<a href="https://cn.vuejs.org/">Vue官方网站</a>）</p>
<p>内容：本博客记录一些学习Vue中的心得，便于日后启发。（可复用性&amp;组合）</p>
<span id="more"></span>

<p>注：遇到一些不懂的函数等，可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API参考</a>。</p>
<p>正文：</p>
<p>一、混入</p>
<p>1.1 基础</p>
<p>混入 (mixin) 提供了一种非常灵活的方式（Vue中的mixins:属性），来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>
<p>1.2 选项合并</p>
<p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。注意：Vue.extend() 也使用同样的策略进行合并。</p>
<p>1.3 全局混入</p>
<p>混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响每一个之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。请谨慎使用全局混入，因为它会影响每个单独创建的 Vue 实例 (包括第三方组件)。大多数情况下，只应当应用于自定义选项，推荐将其作为插件发布，以避免重复应用混入。</p>
<p>1.4 自定义选项合并策略</p>
<p>自定义选项将使用默认策略，即简单地覆盖已有值。如果想让自定义选项以自定义逻辑合并，可以向 Vue.config.optionMergeStrategies 添加一个符合自己意愿的函数。对于多数值为对象的选项，可以使用与 methods 相同的合并策略。</p>
<p>二、自定义指令</p>
<p>1、简介</p>
<p>除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令（Vue.directive定义，后面使用就变成了v-xx的形式）。</p>
<p>2、钩子函数</p>
<p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p>
<p>　　bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p>
<p>　　inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p>
<p>　　update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 。</p>
<p>　　componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</p>
<p>　　unbind：只调用一次，指令与元素解绑时调用。</p>
<p>3、钩子函数的参数</p>
<p>指令钩子函数会被传入以下参数：</p>
<p>el：指令所绑定的元素，可以用来直接操作 DOM 。</p>
<p>binding：一个对象，包含以下属性：</p>
<p>　　name：指令名，不包括 v- 前缀。</p>
<p>　　value：指令的绑定值，例如：v-my-directive&#x3D;”1 + 1” 中，绑定值为 2。</p>
<p>　　oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</p>
<p>　　 expression：字符串形式的指令表达式。例如 v-my-directive&#x3D;”1 + 1” 中，表达式为 “1 + 1”。</p>
<p>　　arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</p>
<p>　　modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</p>
<p>vnode：Vue 编译生成的虚拟节点。</p>
<p>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p>
<p>注意，除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。</p>
<p>指令的参数可以是动态的。指令的参数可以是动态的。这使得自定义指令可以在应用中被灵活使用。</p>
<p>4、函数简写</p>
<p>在很多时候，你可能想在 bind 和 update 时触发相同行为，而不关心其它的钩子。就可以函数简写。</p>
<p>5、对象字面量</p>
<p>如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令函数能够接受所有合法的 JavaScript 表达式。</p>
<p>三、渲染函数&amp;JSX</p>
<p>1、基础</p>
<p>Vue 推荐在绝大多数情况下使用模板来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力。这时你可以用渲染函数，它比模板更接近编译器（使用Vue.component下的render函数）。</p>
<p>2、节点、树以及虚拟DOM</p>
<p>在深入渲染函数之前，了解一些浏览器的工作原理是很重要的。当浏览器读到一些HTML代码时，它会建立一个“DOM 节点”树来保持追踪所有内容，如同你会画一张家谱树来追踪家庭成员的发展一样。每个元素都是一个节点。每段文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，每个节点都可以有孩子节点 (也就是说每个部分可以包含其它的一些部分)。</p>
<p>高效地更新所有这些节点会是比较困难的，不过所幸你不必手动完成这个工作。你只需要告诉 Vue 你希望页面上的 HTML 是什么，这可以是在一个模板里，或者一个渲染函数里（在这两种情况下，Vue 都会自动保持页面的更新）。</p>
<p>Vue 通过建立一个虚拟 DOM 来追踪自己要如何改变真实 DOM。例如：</p>
<p>　　return createElement(‘h1’, this.blogTitle)</p>
<p>createElement 到底会返回什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，包括及其子节点的描述信息。我们把这样的节点描述为“虚拟节点 (virtual node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</p>
<p>3、createElement参数</p>
<p>3.1 深入数据对象</p>
<p>有一点要注意：正如 v-bind:class 和 v-bind:style 在模板语法中会被特别对待一样，它们在 VNode 数据对象中也有对应的顶层字段。该对象也允许你绑定普通的 HTML 特性，也允许绑定如 innerHTML 这样的 DOM 属性 (这会覆盖 v-html 指令)。</p>
<p>3.2 约束</p>
<p>VNode必须唯一，组件树中的所有 VNode 必须是唯一的。如果你真的需要重复很多次的元素&#x2F;组件，你可以使用工厂函数来实现。（tips：所谓工厂函数，就是指这些内建函数都是类对象，当你调用他们时，实际上是创建了一个类实例）</p>
<p>4、使用JavaScript代替模板功能</p>
<p>4.1 v-if和v-for</p>
<p>只要在原生的 JavaScript 中可以轻松完成的操作，Vue 的渲染函数就不会提供专有的替代方法。比如，在模板中使用的 v-if 和 v-for，都可以在渲染函数中用 JavaScript 的 if&#x2F;else 和 map 来重写。</p>
<p>4.2 v-model</p>
<p>渲染函数中没有与 v-model 的直接对应——你必须自己实现相应的逻辑。</p>
<p>4.3 事件&amp;按键修饰符</p>
<p>对于 .passive、.capture 和 .once 这些事件修饰符, Vue 提供了相应的前缀可以用于 on。对于所有其它的修饰符，私有前缀都不是必须的，因为你可以在事件处理函数中使用事件方法。</p>
<p>4.4 插槽</p>
<p>对于所有其它的修饰符，私有前缀都不是必须的，因为你可以在事件处理函数中使用事件方法。也可以通过 this.$scopedSlots 访问作用域插槽，每个作用域插槽都是一个返回若干 VNode 的函数。如果要用渲染函数向子组件中传递作用域插槽，可以利用 VNode 数据对象中的 scopedSlots 字段。</p>
<p>5、JSX</p>
<p> 一个 Babel 插件，用于在 Vue 中使用 JSX 语法，它可以让我们回到更接近于模板的语法上。</p>
<p>6、函数式组件</p>
<p>之前创建的锚点标题组件是比较简单，没有管理任何状态，也没有监听任何传递给它的状态，也没有生命周期方法。实际上，它只是一个接受一些 prop 的函数。 在这样的场景下，我们可以将组件标记为 functional，这意味它无状态 (没有响应式数据)，也没有实例 (没有 this 上下文)。</p>
<p>注意：在 2.3.0 之前的版本中，如果一个函数式组件想要接收 prop，则 props 选项是必须的。在 2.3.0 或以上的版本中，你可以省略 props 选项，所有组件上的特性都会被自动隐式解析为 prop。 当使用函数式组件时，该引用将会是 HTMLElement，因为他们是无状态的也是无实例的。</p>
<p>组件需要的一切都是通过 context 参数传递，它是一个包括如下字段的对象：</p>
<p>　　props：提供所有 prop 的对象</p>
<p>　　children: VNode 子节点的数组</p>
<p>　　slots: 一个函数，返回了包含所有插槽的对象</p>
<p>　　scopedSlots: (2.6.0+) 一个暴露传入的作用域插槽的对象。也以函数形式暴露普通插槽。</p>
<p>　　data：传递给组件的整个数据对象，作为 createElement 的第二个参数传入组件</p>
<p>　　parent：对父组件的引用</p>
<p>　　listeners: (2.3.0+) 一个包含了所有父组件为当前组件注册的事件监听器的对象。这是 data.on 的一个别名。</p>
<p>　　injections: (2.3.0+) 如果使用了 inject 选项，则该对象包含了应当被注入的属性。</p>
<p>因为函数式组件只是函数，所以渲染开销也低很多。 在作为包装组件时它们也同样非常有用。比如，当你需要做这些时： 程序化地在多个组件中选择一个来代为渲染； 在将 children、props、data 传递给子组件之前操作它们。</p>
<p>在普通组件中，没有被定义为 prop 的特性会自动添加到组件的根元素上，将已有的同名特性进行替换或与其进行智能合并，然而函数式组件要求你显式定义该行为。如果你使用基于模板的函数式组件，那么你还需要手动添加特性和监听器。因为我们可以访问到其独立的上下文内容，所以我们可以使用 data.attrs 传递任何 HTML 特性，也可以使用 listeners (即 data.on 的别名) 传递任何事件监听器。</p>
<p>7、模板编译</p>
<p>你可能会有兴趣知道，Vue 的模板实际上被编译成了渲染函数。这是一个实现细节，通常不需要关心。但如果你想看看模板的功能具体是怎样被编译的，可能会发现会非常有意思。</p>
<p>四、插件</p>
<p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p>
<p>　　添加全局方法或者属性。如: vue-custom-element</p>
<p>　　添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 vue-touch</p>
<p>　　通过全局混入来添加一些组件选项。如 vue-router</p>
<p>　　添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</p>
<p>　　一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router</p>
<p>1、使用插件</p>
<p>通过全局方法 Vue.use() 使用插件。它需要在你调用 new Vue() 启动应用之前完成，也可以传入一个可选的选项对象。Vue.use 会自动阻止多次注册相同插件，届时即使多次调用也只会注册一次该插件。Vue.js 官方提供的一些插件 (例如 vue-router) 在检测到 Vue 是可访问的全局变量时会自动调用 Vue.use()。然而在像 CommonJS 这样的模块环境中，你应该始终显式地调用 Vue.use()。（<a href="https://github.com/vuejs/awesome-vue#components--libraries">awesome-vue</a> 集合了大量由社区贡献的插件和库）</p>
<p>2、开发插件</p>
<p>Vue.js 的插件应该暴露一个 install 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象。</p>
<p>五、过滤器</p>
<p> Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示（“|”）。你可以在一个组件的选项中定义本地的过滤器，或者在创建 Vue 实例之前全局定义过滤器，当全局过滤器和局部过滤器重名时，会采用局部过滤器。过滤器可以串联，过滤器是 JavaScript 函数，因此可以接收参数。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue学习的心得记录（规模化）</title>
    <url>/2019/12/10/blog24/</url>
    <content><![CDATA[<p>目标：深入了解Vue框架（2.x版本）的规模化</p>
<p>方法：通过看Vue的官方手册（<a href="https://cn.vuejs.org/">Vue官方网站</a>）</p>
<p>内容：本博客记录一些学习Vue中的心得，便于日后启发。（规模化）</p>
<span id="more"></span>

<p>注：遇到一些不懂的函数等，可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API参考</a>。</p>
<p>正文：</p>
<p>一、路由</p>
<p>1、官方路由</p>
<p>对于大多数单页面应用，都推荐使用官方支持的 <a href="https://github.com/vuejs/vue-router">vue-router 库</a>。更多细节可以移步 <a href="https://router.vuejs.org/">vue-router 文档</a>。</p>
<p>2、从零开始简单的路由</p>
<p>如果你只需要非常简单的路由而不想引入一个功能完整的路由库，可以像这样动态渲染一个页面级的组件：<a href="https://cn.vuejs.org/v2/guide/routing.html">实例</a>。结合 HTML5 History API，你可以建立一个麻雀虽小五脏俱全的客户端路由器。可以直接看<a href="https://github.com/chrisvfritz/vue-2.0-simple-routing-example">实例应用</a>。</p>
<p>3、整合第三方路由</p>
<p>如果你有更偏爱的第三方路由，如 <a href="https://github.com/visionmedia/page.js">Page.js</a> 或者 <a href="https://github.com/flatiron/director">Director</a>，整合起来也<a href="https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs">一样简单</a>。这里有一个使用了 Page.js 的<a href="https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs">完整示例</a>。</p>
<p>二、状态管理</p>
<p>1、类Flux状态管理的官方实现</p>
<p>由于状态零散地分布在许多组件和组件之间的交互中，大型应用复杂度也经常逐渐增长。为了解决这个问题，Vue 提供 <a href="https://github.com/vuejs/vuex">vuex</a>：我们有受到 Elm 启发的状态管理库。vuex 甚至集成到 <a href="https://github.com/vuejs/vue-devtools">vue-devtools</a>，无需配置即可进行<a href="https://raw.githubusercontent.com/vuejs/vue-devtools/master/media/demo.gif">时光旅行调试 (time travel debugging)</a>。</p>
<p>如果你是来自 React 的开发者，你可能会对 Vuex 和 <a href="https://github.com/reactjs/redux">Redux</a> 间的差异表示关注，Redux 是 React 生态环境中最流行的 Flux 实现。Redux 事实上无法感知视图层，所以它能够轻松的通过一些[简单绑定](<a href="https://yarnpkg.com/en/packages?q=redux">https://yarnpkg.com/en/packages?q=redux</a> vue&amp;p&#x3D;1)和 Vue 一起使用。Vuex 区别在于它是一个专门为 Vue 应用所设计。这使得它能够更好地和 Vue 进行整合，同时提供简洁的 API 和改善过的开发体验。</p>
<p>2、简单状态管理起步使用</p>
<p>经常被忽略的是，Vue 应用中原始数据对象的实际来源 - 当访问数据对象时，一个 Vue 实例只是简单的代理访问。所以，如果你有一处需要被多个实例间共享的状态，可以简单地通过维护一份数据来实现共享。现在我们有了唯一的数据来源，但是，调试将会变为噩梦。任何时间，我们应用中的任何部分，在任何数据改变后，都不会留下变更过的记录。 为了解决这个问题，我们采用一个简单的 <a href="https://cn.vuejs.org/v2/guide/state-management.html">store 模式</a>。</p>
<p>需要注意，所有 store 中 state 的改变，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的 mutation 将会发生，以及它们是如何被触发。当错误出现时，我们现在也会有一个 log 记录 bug 之前发生了什么。此外，每个实例&#x2F;组件仍然可以拥有和管理自己的私有状态。</p>
<p>接着我们继续延伸约定，组件不允许直接修改属于 store 实例的 state，而应执行 action 来分发 (dispatch) 事件通知 store 去改变，我们最终达成了 <a href="https://facebook.github.io/flux/">Flux</a> 架构。这样约定的好处是，我们能够记录所有 store 中发生的 state 改变，同时实现能做到记录变更 (mutation)、保存状态快照、历史回滚&#x2F;时光旅行的先进的调试工具。</p>
<p>说了一圈其实又回到了<a href="https://github.com/vuejs/vuex">vuex</a>，如果你已经读到这儿，或许可以去尝试一下！</p>
<p>三、服务端渲染</p>
<p>1、SSR完全指南</p>
<p>在 2.3 发布后我们发布了一份完整的构建 Vue 服务端渲染应用的指南。这份指南非常深入，适合已经熟悉 Vue, webpack 和 Node.js 开发的开发者阅读。请移步 <a href="https://ssr.vuejs.org/zh/">ssr.vuejs.org</a>。</p>
<p>2、Nuxt.js</p>
<p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 <a href="https://nuxtjs.org/">Nuxt.js</a> 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。更酷的是，你甚至可以用它来做为静态站生成器。推荐尝试。</p>
<p>3、Quasar Framework SSR + PWA</p>
<p><a href="https://quasar.dev/">Quasar Framework</a> 可以通过其一流的构建系统、合理的配置和开发者扩展性生成 (可选地和 PWA 互通的) SSR 应用，让你的想法的设计和构建变得轻而易举。你可以在服务端挑选执行超过上百款遵循“Material Design 2.0”的组件，并在浏览器端可用。你甚至可以管理网站的 &#96;&#96; 标签。Quasar 是一个基于 Node.js 和 webpack 的开发环境，它可以通过一套代码完成 SPA、PWA、SSR、Electron 和 Cordova 应用的快速开发。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue学习的心得记录（工具）</title>
    <url>/2019/12/10/blog23/</url>
    <content><![CDATA[<p>目标：深入了解Vue框架（2.x版本）的工具</p>
<p>方法：通过看Vue的官方手册（<a href="https://cn.vuejs.org/">Vue官方网站</a>）</p>
<p>内容：本博客记录一些学习Vue中的心得，便于日后启发。（工具）</p>
<span id="more"></span>

<p>注：遇到一些不懂的函数等，可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API参考</a>。</p>
<p>正文：</p>
<p>一、单文件组件</p>
<p>1、介绍</p>
<p>在很多 Vue 项目中，我们使用 Vue.component 来定义全局组件，紧接着用 new Vue({ el: ‘#container ‘}) 在每个页面内指定一个容器元素。</p>
<p>这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p>
<p>　　全局定义 (Global definitions) 强制要求每个 component 中的命名不得重复</p>
<p>　　字符串模板 (String templates) 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 \</p>
<p>　　不支持 CSS (No CSS support) 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</p>
<p>　　没有构建步骤 (No build step) 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</p>
<p>文件扩展名为 .vue 的 single-file components(单文件组件) 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p>
<p>1.1 如何看待关注点分离？</p>
<p>一个重要的事情值得注意，关注点分离不等于文件类型分离。在现代 UI 开发中，我们已经发现相比于把代码库分离成三个大的层次并将其相互交织起来，把它们划分为松散耦合的组件再将其组合起来更合理一些。在一个组件里，其模板、逻辑和样式是内部耦合的，并且把他们搭配在一起实际上使得组件更加内聚且更可维护。</p>
<p>即便你不喜欢单文件组件，你仍然可以把 JavaScript、CSS 分离成独立的文件然后做到热重载和预编译。（tips：热重载就是页面每次改动，不需要手动去刷新，可自动刷新。保持vuex的状态。）</p>
<p>2、起步</p>
<p>2.1 例子沙箱</p>
<p>如果你希望深入了解并开始使用单文件组件，请来 CodeSandbox <a href="https://codesandbox.io/s/o29j95wx9">看看这个简单的 todo 应用</a>。</p>
<p>2.2 针对刚接触JS模块开发系统的用户</p>
<p>有了.vue组件，我们就进入了高级 JavaScript 应用领域。如果你没有准备好的话，意味着还需要学会使用一些附加的工具：Node Package Manager (NPM)，Modern JavaScript with ES2015&#x2F;16。我们建议你参考 <a href="https://cli.vuejs.org/zh/">Vue CLI 3</a>。只要遵循指示，你就能很快地运行一个带有.vue 组件、ES2015、webpack 和热重载 (hot-reloading) 的 Vue 项目!</p>
<p>2.3 针对高级用户</p>
<p>CLI 会为你搞定大多数工具的配置问题，同时也支持细粒度自定义<a href="https://cli.vuejs.org/zh/config/">配置项</a>。</p>
<p>有时你会想从零搭建你自己的构建工具，这时你需要通过 <a href="https://vue-loader.vuejs.org/zh/">Vue Loader</a> 手动配置 webpack。关于学习更多 webpack 的内容，请查阅<a href="https://webpack.js.org/configuration/">其官方文档</a> 和 <a href="https://webpack.academy/p/the-core-concepts">Webpack Academy</a>。</p>
<p>二、单元测试</p>
<p><a href="https://cli.vuejs.org/zh/">Vue CLI</a> 拥有开箱即用的通过 <a href="https://github.com/facebook/jest">Jest</a> 或 <a href="https://mochajs.org/">Mocha</a> 进行单元测试的内置选项。我们还有官方的 <a href="https://vue-test-utils.vuejs.org/zh/">Vue Test Utils</a> 提供更多详细的指引和自定义设置。</p>
<p>1.1 简单的断言</p>
<p>我们对断言使用，往往是为了去嗅探边界条件和非正常条件，从而去检查不应该发生的情况。你不必为了可测性在组件中做任何特殊的操作，导出原始设置就可以了。然后随着 Vue 导入组件的选项，你可以使用许多常见的断言，例如asmine&#x2F;Jest 风格的 expect 断言或者其他任何断言库或测试工具。</p>
<p>1.2 编写可被测试的组件</p>
<p>很多组件的渲染输出由它的 props 决定。事实上，如果一个组件的渲染输出完全取决于它的 props，那么它会让测试变得简单，就好像断言不同参数的纯函数的返回值。</p>
<p>1.3 断言异步更新</p>
<p> 由于 Vue 进行 异步更新 DOM 的情况，一些依赖 DOM 更新结果的断言必须在 Vue.nextTick 回调中进行。</p>
<p>三、TypeScript支持</p>
<p>1、发布为NPM包的官方</p>
<p>静态类型系统能帮助你有效防止许多潜在的运行时错误，而且随着你的应用日渐丰满会更加显著。这就是为什么 Vue 不仅仅为 Vue core 提供了针对 <a href="https://www.typescriptlang.org/">TypeScript</a> 的<a href="https://github.com/vuejs/vue/tree/dev/types">官方类型声明</a>，还为 <a href="https://github.com/vuejs/vue-router/tree/dev/types">Vue Router</a> 和 <a href="https://github.com/vuejs/vuex/tree/dev/types">Vuex</a> 也提供了相应的声明文件。</p>
<p>而且，我们已经把它们<a href="https://cdn.jsdelivr.net/npm/vue/types/">发布到了 NPM</a>，最新版本的 TypeScript 也知道该如何自己从 NPM 包里解析类型声明。这意味着只要你成功地通过 NPM 安装了，就不再需要任何额外的工具辅助，即可在 Vue 中使用 TypeScript 了。</p>
<p>2、开发工具链</p>
<p>工程创建：<a href="https://github.com/vuejs/vue-cli">Vue CLI 3</a> 可以使用 TypeScript 生成新工程。</p>
<p>编辑器支持：要使用 TypeScript 开发 Vue 应用程序，我们强烈建议您使用 <a href="https://code.visualstudio.com/">Visual Studio Code</a>，它为 TypeScript 提供了极好的“开箱即用”支持。如果你正在使用<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a> (SFC), 可以安装提供 SFC 支持以及其他更多实用功能的 <a href="https://github.com/vuejs/vetur">Vetur 插件</a>。<a href="https://www.jetbrains.com/webstorm/">WebStorm</a> 同样为 TypeScript 和 Vue 提供了“开箱即用”的支持。</p>
<p>3、基本用法</p>
<p>要让 TypeScript 正确推断 Vue 组件选项中的类型，您需要使用 Vue.component 或 Vue.extend 定义组件</p>
<p>4、基于类的Vue组件</p>
<p>如果您在声明组件时更喜欢基于类的 API，则可以使用官方维护的 vue-class-component 装饰器</p>
<p>5、增强类型以配合插件使用</p>
<p>插件可以增加 Vue 的全局&#x2F;实例属性和组件选项。在这些情况下，在 TypeScript 中制作插件需要类型声明。庆幸的是，TypeScript 有一个特性来补充现有的类型，叫做<a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation">模块补充 (module augmentation)</a>。</p>
<p>6、标注返回值</p>
<p>因为 Vue 的声明文件天生就具有循环性，TypeScript 可能在推断某个方法的类型的时候存在困难。因此，你可能需要在 render 或 computed 里的方法上标注返回值。如果你发现类型推导或成员补齐不工作了，标注某个方法也许可以帮助你解决这个问题。使用 –noImplicitAny 选项将会帮助你找到这些未标注的方法。</p>
<p>四、生产环境部署</p>
<p>1、开启生产环境模式</p>
<p>开发环境下，Vue 会提供很多警告来帮你对付常见的错误与陷阱。而在生产环境下，这些警告语句却没有用，反而会增加应用的体积。此外，有些警告检查还有一些小的运行时开销，这在生产环境模式下是可以避免的。</p>
<p>1.1 不适用构建工具</p>
<p>如果用 Vue 完整独立版本，即直接用 &lt; script&gt; 元素引入 Vue 而不提前进行构建，请记得在生产环境下使用压缩后的版本 (vue.min.js)。两种版本都可以在安装指导中找到。</p>
<p>1.2 使用构建工具</p>
<p>当使用 webpack 或 Browserify 类似的构建工具时，Vue 源码会根据 process.env.NODE_ENV 决定是否启用生产环境模式，默认情况为开发环境模式。在 webpack 与 Browserify 中都有方法来覆盖此变量，以启用 Vue 的生产环境模式，同时在构建过程中警告语句也会被压缩工具去除。所有这些在 vue-cli 模板中都预先配置好了，但了解一下怎样配置会更好。</p>
<p>webpack</p>
<p>　　在 webpack 4+ 中，你可以使用 mode 选项。但是在 webpack 3 及其更低版本中，你需要使用 <a href="https://webpack.js.org/plugins/define-plugin/">DefinePlugin</a>。</p>
<p>Browserify</p>
<p>　　在运行打包命令时将 NODE_ENV 设置为 “production”。这等于告诉 vueify 避免引入热重载和开发相关的代码。 对打包后的文件进行一次全局的 envify 转换。这使得压缩工具能清除掉 Vue 源码中所有用环境变量条件包裹起来的警告语句，或者在 Gulp 中使用 envify，或者配合 Grunt 和 grunt-browserify 使用 envify。</p>
<p>Rollup</p>
<p>　　使用 rollup-plugin-replace</p>
<p>2、模板预编译</p>
<p>当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在运行时被编译为渲染函数。通常情况下这个过程已经足够快了，但对性能敏感的应用还是最好避免这种用法。</p>
<p>预编译模板最简单的方式就是使用<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。</p>
<p>如果你使用 webpack，并且喜欢分离 JavaScript 和模板文件，你可以使用 vue-template-loader，它也可以在构建过程中把模板文件转换成为 JavaScript 渲染函数。</p>
<p>3、提取组件的CSS</p>
<p>当使用单文件组件时，组件内的 CSS 会以 &lt; style&gt; 标签的方式通过 JavaScript 动态注入。这有一些小小的运行时开销，如果你使用服务端渲染，这会导致一段“无样式内容闪烁 (fouc)”。将所有组件的 CSS 提取到同一个文件可以避免这个问题，也会让 CSS 更好地进行压缩和缓存。</p>
<p>4、跟踪运行时错误</p>
<p>如果在组件渲染时出现运行错误，错误将会被传递至全局 Vue.config.errorHandler 配置函数 (如果已设置)。利用这个钩子函数来配合错误跟踪服务是个不错的主意。比如 Sentry，它为 Vue 提供了官方集成。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue学习的心得记录（深入响应式原理）</title>
    <url>/2019/12/10/blog25/</url>
    <content><![CDATA[<p>目标：深入了解Vue框架（2.x版本）的深入响应式原理</p>
<p>方法：通过看Vue的官方手册（<a href="https://cn.vuejs.org/">Vue官方网站</a>）</p>
<p>内容：本博客记录一些学习Vue中的心得，便于日后启发。（深入响应式原理）</p>
<span id="more"></span>

<p>注：遇到一些不懂的函数等，可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API参考</a>。</p>
<p>前言：</p>
<p>现在是时候深入一下了！Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。这使得状态管理非常简单直接，不过理解其工作原理同样重要，这样你可以避开一些常见的问题。在这个章节，我们将研究一下 Vue 响应式系统的底层的细节。</p>
<p>正文：</p>
<p>一、如何追踪变化</p>
<p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter&#x2F;setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p>
<p>这些 getter&#x2F;setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在属性被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter&#x2F;setter 的格式化并不同，所以建议安装 <a href="https://github.com/vuejs/vue-devtools">vue-devtools</a> 来获取对检查数据更加友好的用户界面。</p>
<p>每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据属性记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p>
<p><img src="/2019/12/10/blog25/1803687-20191210151915674-331687536.png" alt="img"></p>
<p>二、检测变化的注意事项</p>
<p>受现代 JavaScript 的限制 (而且 Object.observe 也已经被废弃)，Vue 无法检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。</p>
<p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, propertyName, value) 方法向嵌套对象添加响应式属性。您还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名。</p>
<p>有时你可能需要为已有对象赋值多个新属性，比如使用 Object.assign() 或 _.extend()。但是，这样添加到对象上的新属性不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的属性一起创建一个新的对象。</p>
<p>三、声明响应式属性</p>
<p>由于 Vue 不允许动态添加根级响应式属性，所以你必须在初始化实例前声明所有根级响应式属性，哪怕只是一个空值。这样的限制在背后是有其技术原因的，它消除了在依赖项跟踪系统中的一类边界情况，也使 Vue 实例能更好地配合类型检查系统工作。但与此同时在代码可维护性方面也有一点重要的考虑：data对象就像组件状态的结构 (schema)。提前声明所有的响应式属性，可以让组件代码在未来修改或给其他开发人员阅读时更易于理解。</p>
<p>四、异步更新队列</p>
<p> 可能你还没有注意到，Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。</p>
<p>例如，当你设置 vm.someData &#x3D; ‘new value’，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之初见Vue（一）</title>
    <url>/2019/12/12/blog26/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（初见Vue）</p>
<p>内容：通过官网一些<a href="https://cn.vuejs.org/v2/guide/">小实例</a>，初步对Vue有所理解。</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="初见Vue"><a href="#初见Vue" class="headerlink" title="初见Vue"></a>初见Vue</h3><h3 id="一、Vue-js安装（分为开发环境版本和生产环境版本）"><a href="#一、Vue-js安装（分为开发环境版本和生产环境版本）" class="headerlink" title="一、Vue.js安装（分为开发环境版本和生产环境版本）"></a>一、Vue.js安装（分为开发环境版本和生产环境版本）</h3><p>　　1、直接CDN引入（在script标签的src引入完整源文件地址）</p>
<p>　　2、官网下载和引入</p>
<p>　　3、NPM安装（后续通过webpack和CLI的使用，就用该方式）</p>
<h3 id="二、helloVue事例"><a href="#二、helloVue事例" class="headerlink" title="二、helloVue事例"></a>二、helloVue事例</h3><p>　　1、尽量以ES6标准去写，定义变量用let，而不是var，定义常量用const。</p>
<p>　　2、之前原生JS的做法是一步一步做（编程范式：命令式编程），现在的vue的做法是外部声明内部（Vue实例）管理（编程范式：声明式编程）。后者在三大框架都很流行。优点：数据与界面完全分离，响应式（数据变了，界面响应改变对应部分）。</p>
<p>　　3、创建的Vue对象，传入了一些options：{}，包括el属性：决定这个Vue对象挂载到哪一个元素上；data属性：通常会存储一些数据，其可以是我们直接定义的，也可以是来自网络，从服务器加载的。</p>
<h3 id="三、Vue列表的展示"><a href="#三、Vue列表的展示" class="headerlink" title="三、Vue列表的展示"></a>三、Vue列表的展示</h3><p>　　1、使用v-for指令。（同样也是响应式的，在数据部分修改，如添加，还是可以渲染更新页面）</p>
<h3 id="四、小案例-计数器"><a href="#四、小案例-计数器" class="headerlink" title="四、小案例-计数器"></a>四、小案例-计数器</h3><p>　　1、使用v-on：监听事件。简写是@（相当于一个语法糖）。</p>
<p>　　2、事件比较复杂的时候，把事件名称放在HTML元素的v-on绑定，然后在vue实例里面的methods属性下，定义该事件（方法）。</p>
<p>　　3、取事件涉及到的数据时候，在方法里面使用this指向vue实例，从而调用相关数据。</p>
<h3 id="五、Vue中的MVVM"><a href="#五、Vue中的MVVM" class="headerlink" title="五、Vue中的MVVM"></a>五、Vue中的MVVM</h3><p>　　<img src="/2019/12/12/blog26/1803687-20191212163346049-2087331766.png" alt="img"></p>
<p> 　　View层：</p>
<p>　　1、视图层</p>
<p>　　2、在我们前端开发中，通常就是DOM层</p>
<p>　　3、主要的作用是给用户展示各种信息</p>
<p>　　Model层：</p>
<p>　　1、数据层</p>
<p>　　2、数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据，也有可能是JS对象的数据形式</p>
<p>　　ViewModel层：</p>
<p>　　1、视图模型层</p>
<p>　　2、视图模型层是view和model沟通的桥梁</p>
<p>　　3、一方面它实现了 data binding，也就是数据绑定，将model的改变实时的反应到view中</p>
<p>　　4、另一方面它实现了DOM listener，也就是DOM监听，当DOM发生一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的data</p>
<p>举个简单例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt; !<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt; html&gt;</span><br><span class="line">&lt; head&gt;</span><br><span class="line">&lt; meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt; title&gt;&lt; /title&gt;</span><br><span class="line">&lt; script src=<span class="string">&quot;vue.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt; /script&gt;</span><br><span class="line">&lt; /head&gt;</span><br><span class="line">&lt; body&gt;</span><br><span class="line">    &lt; div id = <span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125; &#123;&#123;date&#125;&#125;</span><br><span class="line">    &lt; /div&gt;</span><br><span class="line">    &lt; div id = <span class="string">&#x27;app-2&#x27;</span>&gt;</span><br><span class="line">        &lt; span v-<span class="attr">bind</span>:title = <span class="string">&#x27;message&#x27;</span>&gt;</span><br><span class="line">            鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">        &lt; /span&gt;</span><br><span class="line">        &lt; /div&gt;</span><br><span class="line">    &lt; script&gt;</span><br><span class="line">        <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;Hello World Vue!&#x27;</span>,</span><br><span class="line">                <span class="attr">date</span>: <span class="number">20191128</span></span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>:<span class="string">&#x27;#app-2&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                message : <span class="string">&#x27;页面加载于&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);    </span><br><span class="line">    &lt; /script&gt;    </span><br><span class="line">&lt; /body&gt;</span><br><span class="line">&lt; /html&gt;</span><br></pre></td></tr></table></figure>



<p>分析：body下面的div模块就是展示给用户看的东西，这属于DOM，也就是View部分。而要展现的数据内容是data：{message：XX}的部分，这个就是Model部分。Model需要借助View Model展示到View中（这个过程就是Data Binding），也就是说我们新建的vue实例app就是我们的View Model。当我们在视图层（view）发生事件，例如我们把鼠标悬挂了第二个div模块，由于其被我们的viewModel，即app2（第二个新建的vue实例）监听到了（这个过程就是DOM listener），指向相应处理数据（在Model的data），然后又因数据绑定，执行相应处理程序，在界面显示。</p>
<p>总结：有了Vue帮助我们完成ViewModel层的任务，在后续的开发，我们就可以专注于数据的处理，以及DOM的编程工作了。</p>
<h3 id="六、创建Vue实例传入的Options"><a href="#六、创建Vue实例传入的Options" class="headerlink" title="六、创建Vue实例传入的Options"></a>六、创建Vue实例传入的Options</h3><p>　　1、我们在创建Vue实例时，传入了一个对象Options，其有很多属性，具体可以看官网的<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">API文档</a>。</p>
<p>　　2、目前学到的属性有：</p>
<p>　　　　el：类型：string|HTMLElement  作用：决定之后得Vue实例会管理哪一个DOM。</p>
<p>　　　　data：类型：Object|Function（组件当中data必须是一个函数）  作用：Vue实例对应的数据对象。</p>
<p>　　　　methods：类型： {[key:string]:Function} 作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</p>
<h3 id="七、Vue的生命周期"><a href="#七、Vue的生命周期" class="headerlink" title="七、Vue的生命周期"></a>七、Vue的生命周期</h3><p>　　1、生命周期：事物从诞生到消亡的整个过程。每个Vue实例也是有生命周期的，周期内会发生一系列事情，即有很多阶段。在开发中，我们是希望在vue实例内部的生命周期某个或某些阶段中进行某些我们想要做的操作（使用回调函数），例如最简单是让Vue实例输出它当前所处的阶段到控制台。用专业术语来说就是，过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p>
<p>　　2、生命周期具体可以看官方的<a href="https://cn.vuejs.org/v2/guide/instance.html">生命周期图示</a>。其回调函数有：created，mounted、updated 和 destroyed等。</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>初见</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>MVVM</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之Vue基础语法（二）</title>
    <url>/2019/12/12/blog27/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（Vue基础语法）</p>
<p>内容：通过<a href="https://cn.vuejs.org/v2/guide/syntax.html">官网说明</a>，掌握Vue基础语法。</p>
<span id="more"></span>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h3><p><strong>Vue基础语法</strong></p>
<h3 id="一、插值语法"><a href="#一、插值语法" class="headerlink" title="一、插值语法"></a>一、插值语法</h3><p>　　1、Mustache，即双大括号{{}} 。 括号里面可以是变量，也可以是简单的表达式。（tips:复杂的表达式不再适合，我们可以考虑使用计算属性，后面会说）（Mustache：胡子）</p>
<p>　　2、v-once。通过使用 v-once 指令，也能执行一次性地插值，当数据改变时，插值处的内容不会更新。</p>
<p>　　3、v-html。原始HTML：双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，需要使用v-html指令。注意：站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击（Cross Site Scripting，攻击全称跨站脚本攻击）。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。</p>
<p>　　4、v-text。与Mustache类似，接受一个string类型。但灵活性不够Mustache，尤其是字符串拼接下。用的比较少。</p>
<p>　　5、v-pre。跳过这个元素和它子元素额编译过程，用于显示原来的Mustache语法，即原封不动把内容显示出来。</p>
<p>　　6、v-cloak。当浏览器可能直接渲染出未编译的Mustache语法（可能网页卡了或者什么原因），会不好看，用上v-cloak可以过渡显示得过程，待渲染编译完Mustache语法后，才显示结果。 用得比较少。（cloak：斗篷）</p>
<h3 id="二、绑定属性"><a href="#二、绑定属性" class="headerlink" title="二、绑定属性"></a>二、绑定属性</h3><p>　　当我们不再是简单往HTML元素使用插值语法动态绑定其模板的内容，而是想根据某些需求动态的改变元素属性时，例如动态绑定a元素的href属性等，需要使用绑定属性。在实际开发中，数据都不是简单的绑死的，而是动态由服务器请求来的数据去传到对应的部分，进行渲染的。 </p>
<p>　　1、v-bind指令。作用：动态绑定属性。缩写（一个语法糖）：：（冒号）。注意，Mustache语法是在元素内容里面用。属性绑定时，用v-bind:属性&#x3D;‘变量名’，这样变量（在程序编译时）就绑定了对应属性。（tips：变量名内如果是有引号译为字符串，没有就译为变量）</p>
<p>　　2、动态绑定class（class属性）。也可以用v-bind简单绑定。</p>
<p>　　3、动态绑定class对象语法：也可以绑定为一个对象并把布尔值放在vue实例中的data里面控制对应class是否加入到元素class属性中，如{类名1：布尔值1，类名2：布尔值2}当布尔值1为true时，即把类名1（所代表的的类添加到这个Html元素中去），同样的类名2也是。（tips：直接通过{}绑定一个类；也可以通过判断，传入多个值；与普通类同时存在，并不冲突；如果过于复杂，可以放在一个methods或者computed计算属性里）</p>
<p>　　4、动态绑定class数组语法：也可以绑定为一个数组，与上述对象语法类似，可以放在一个methods或者computed计算属性里。</p>
<p>　　5、动态绑定style：多用于组件化开发的定制样式渲染。也是存在对象语法和数组语法。对象语法：{key:value}，与class绑定不一样，style的对象是{css属性名：属性值}。属性值通常是动态变化的，所以属性性一般是变量，在vue实例的data属性里面对其控制，类似渲染模板的意味。数组语法用的比较少，也是相当于先以数组形式进行绑定，然后在vue的data属性定义为对象（tips：变量名内如果是有引号译为字符串，没有就译为变量）</p>
<h3 id="三、计算属性"><a href="#三、计算属性" class="headerlink" title="三、计算属性"></a>三、计算属性</h3><p>　　我们知道，在模板中可以直接通过插值语法显示一些data中的数据。但在某些情况，我们可能需要对数据进行一些转换后再显示，或者需要将多个数据结合起来进行显示。因而可以使用到计算属性computed（在Vue实例中）。</p>
<p>　　1、在计算属性computed中定义显示数据的属性，然后在对应HTML元素位置调用。有点类似与方法定义（简写的时候），但是和方法不一样。</p>
<p>　　2、计算属性的setter和getter。完整写法是在具体计算属性变量中定义一个对象，对象里面包含set方法和get方法。一般只实现get方法，此时计算属性相当于只读属性（也就是先前简写方式所对应内在联系）。如果是需要改变的话，就需要set方法，通常也是方法是需要参数的，然后在定义具体方法。</p>
<p>　　3、计算属性和方法methods对比。计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。相比之下，每当触发重新渲染时，调用方法将总会再次执行函数，大大影响性能。</p>
<h3 id="四、事件监听"><a href="#四、事件监听" class="headerlink" title="四、事件监听"></a>四、事件监听</h3><p>　　1、在前端开发中，我们需要经常和用于交互，因而我们必须监听用户发生的事件，比如点击、拖拽、键盘事件等。所以，我们可以使用v-on实现事件监听。</p>
<p>　　2、v-on。作用：绑定事件监听器。缩写：@（也是一个语法糖）。参数：event。绑定事件到vue实例中的methods。</p>
<p>　　3、v-on的使用注意参数问题。如果方法不需要额外参数，那么方法后面的（）可以不添加。在事件定义时，写方法时省略了小括号，但是方法本身是需要一个参数的，这个时候，Vue会默认将浏览器产生的event事件对象（例如点击时，浏览器会产生一个MouseEvent事件对象）作为参数传入到方法。如果需要同时传入某个参数，同时需要event时，可以手动设置通过$event作为参数传入事件。类似于：&lt; button @click&#x3D;’btnClick(参数1,$event)’&gt;&lt; &#x2F;button&gt; （tips:如果当一个函数需要参数，但是没有传入，那么函数的形参为undefined）</p>
<p>　　4、v-on的修饰符。修饰符是由点开头的指令后缀来表示的：.stop ，.prevent ，.capture，.self， .once， .passive等。.stop 会调用event.stopPropagation()，阻止事件冒泡。.prevent 会调用event.preventDefault()，阻止默认事件。.{keyCode|keyAlias}只当事件是从特定键触发时才触发回调。.native监听组件根元素的原生事件。.once 只触发一次回调。注意：使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。</p>
<h3 id="五、条件和循环"><a href="#五、条件和循环" class="headerlink" title="五、条件和循环"></a>五、条件和循环</h3><p>　　1、v-if。条件判断某元素是否能被渲染输出。（有一个小tip，vue的底层是先构建虚拟DOM，在进行渲染，其会对比要改变的DOM和原来的DOM，尽可能地只把改变的部分渲染，保留原有没有改变的部分。如果我们需要元素都要重新渲染而不是让Vue出现类似重复利用的问题，则需要加上key属性并key属性的值不一样。）</p>
<p>　　2、v-else。通常与v-if配合使用。当元素中条件为真，执行v-if块，否则，执行v-else块。</p>
<p>　　3、v-else-if。通常也是与v-if配合使用。如果判断逻辑过于复杂，我们可以转而使用计算属性。</p>
<p>　　4、v-show。另一个用于根据条件展示元素的选项是v-show指令。不同的是带有v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性display。注意，v-show 不支持&lt; template&gt; 元素，也不支持v-else。当需要在显示与隐藏比较频繁时，用v-show。当只有一个切换时，使用v-if。（通常v-if使用比较多）</p>
<p>　　5、v-for。v-for遍历数组。遍历中，可以获取索引下标值。v-for遍历对象。在遍历对象过程，如果只是获取一个值，获取的是value。如果两个参数，用（key,value）。如果是三个参数，用（key,value,index）。</p>
<p>　　6、组价的key属性。官方推荐我们在使用v-for时，给对应的元素或组件添加上一个：key属性。这个与vue的虚拟DOM的DIff算法有关系。通过使用：key来给每一个节点做一个唯一标识（绑定之前要展示的变量）。从而高效地更新虚拟DOM。</p>
<p>　　7、哪些数组的方法是响应式的？可以响应的：push方法,pop,shift,unshift,splice,sort,reverse。不可以响应的：通过索引值修改数组中的元素（如果想要响应式修改数组元素，应该使用splice方法。或者是使用Vue.set函数）。</p>
<h3 id="六、表单绑定"><a href="#六、表单绑定" class="headerlink" title="六、表单绑定"></a>六、表单绑定</h3><p>　　表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单（input标签等）。Vue中使用v-model指令来实现表单元素和数据的双向绑定。（通过input标签的type属性选择单选框，复选框等）</p>
<p>　　1、v-model的基本使用及原理。在表单元素中设置v-model&#x3D;‘变量名’（变量是在vue实例中的data里面），就表单元素与数据data双向绑定。（v-model其实也是一个语法糖，其本质包含两个操作：通过使用v-bind绑定变量响应式地渲染表单元素，然后用v-on绑定事件并传入event事件参数，当表单元素变化，能同步修改data中的数据（event.target.value））</p>
<p>　　2、v-model结合radio类型。radio是单选框。通过v-model绑定表单的变量（例如当使用v-model绑定input标签的某个变量，就可以形成互斥（即不再需要在多个单选框中的name属性定义一样的值），从而实现单选，并且绑定对应变量）</p>
<p> 　3、v-model与checkbox类型。checkbox是复选框，分为单个勾选框，多个勾选框。注意结合label的使用（通过label的for属性赋值为input标签的id属性值，从而在点击input标签内容（label）的时候也能够选中勾选框）。</p>
<p>　　4、v-model与select类型（select-option）。分为单选和多选。多选就是在select标签中添加multiple属性（通过ctrl键实现多选）。</p>
<p>　　5、值绑定。即动态地给input标签赋值。在真实开发中，这些input的值可能是从网络获取或定义在data中的，所以我们可以通过v-bind:value动态地给value绑定值。例如：</p>
<p>&lt; label v-for&#x3D;”item in OriginItems” :for&#x3D;”item”&gt;<br>　　&lt; input type&#x3D;”checkbox” :value&#x3D;”item” :id&#x3D;”item” v-model&#x3D;”Items”&gt;<br>&lt; &#x2F;label&gt;</p>
<p>v-model绑定data中的items（数组），然后通过v-bind动态地给value绑定为item值。</p>
<p>　　6、v-model的修饰符。主要用三个：.lazy,.number,.trim。</p>
<p>　　lazy修饰符。之前v-model是实时绑定的（默认是在input事件中同步输入框的数据的，一旦有数据改变，对应的data数据就会自动发生改变），当我们不想实时绑定（例如在输入中，我们想按回车或者是失去焦点再进行绑定），就可以使用v-model.lazy。</p>
<p>　　number修饰符。默认下，v-model绑定的变量是字符串类型，如果需要数值型，则用.number修饰符。</p>
<p>　　trim修饰符。除去input的内容左右两边的空格去掉。</p>
<h3 id="应用案例（含源码）：（综合应用上述vue基础语法，做出一个图书购物车）"><a href="#应用案例（含源码）：（综合应用上述vue基础语法，做出一个图书购物车）" class="headerlink" title="应用案例（含源码）：（综合应用上述vue基础语法，做出一个图书购物车）"></a>应用案例（含源码）：（综合应用上述vue基础语法，做出一个图书购物车）</h3><p><img src="/2019/12/12/blog27/1803687-20191213164934517-474104932.png" alt="img"></p>
<p>　　要求：1、正确显示购物车书单内容并且计算出总价格；2、购买数量栏中存在加减按钮，并且控制购买数量不能减至0以下；3、使用移除按钮去除对应购物列表；4、价格显示要保留两位小数，并且显示￥符号。</p>
<p>　　涉及的知识：v-for，遍历对象；v-on，监听事件，包括参数传入问题；v-bind，绑定属性；methods，方法；computed，计算属性；filters，滤波器；for循环的使用let的块作用域等。</p>
<p>　　源码：在我的Github上：<a href="https://github.com/xinkuiwu/My-FE-learning/tree/master/vue-learning/books-shopping-trolley">图书购物车</a>。</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之ES6基本语法（补充）</title>
    <url>/2019/12/13/blog28/</url>
    <content><![CDATA[<p>本博客目的：记录Vue学习的进度和心得（ES6基本语法）</p>
<p>内容：掌握Vue中常用的ES6基础语法。</p>
<p>正文：</p>
<span id="more"></span>

<h3 id="ES6基本语法"><a href="#ES6基本语法" class="headerlink" title="ES6基本语法"></a>ES6基本语法</h3><h3 id="一、let与var（闭包，块级作用域）"><a href="#一、let与var（闭包，块级作用域）" class="headerlink" title="一、let与var（闭包，块级作用域）"></a>一、let与var（闭包，块级作用域）</h3><p>　　1、事实上var的设计可以看成JavaScript语言设计上的错误，但是这种错误多半不能修复和移除，因为需要向后兼容。例如if&#x2F;for的块级的影响（ES5中if、for没有作用域，只有函数有作用域），因而JS作者引入了let，我们可以将let看成更完美的var（let有块级作用域（作用域：在一定范围内是可用的），var通常是定义全局变量的）。</p>
<p>　　2、先前for的块级影响，通常的解决方法是使用闭包（因为函数有自己的作用域，应用外面的变量，能正确解决传参的问题）。（闭包是指有权访问另一个函数作用域中的变量的函数，或者说，函数对象可以通过作用域关联起来，函数体内的变量都可以保存在函数作用域内，这在计算机科学文献中称为“闭包”,所有的javascirpt函数都是闭包）</p>
<p>　　3、ES6中let具有块级作用域。ES5中var是没有块级作用域的。</p>
<h3 id="二、const"><a href="#二、const" class="headerlink" title="二、const"></a>二、const</h3><p>　　1、在JavaScript中，使用const修饰的标识符为常量。不可再次赋值，可以用来保证数据的安全性。</p>
<p>　　2、建议：在ES6开发中，优先使用const，只有需要改变某一个标识符额时候才使用let。</p>
<p>　　3、在使用const定义标识符时，必须进行赋值。</p>
<p>　　4、常量的含义是向的对象不能修改，但是可以改变对象内部的属性。（相当于是在内存空间，const指定了一个固定的对象内存地址（指向对象），但是我们可以修改内部的数据）</p>
<h3 id="三、对象字面量的增强写法"><a href="#三、对象字面量的增强写法" class="headerlink" title="三、对象字面量的增强写法"></a>三、对象字面量的增强写法</h3><p>　　1、属性的增强写法。相当于把变量名称作为key，对应的值作为value。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.80</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    height,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//&#123; name: &#x27;abc&#x27;, height: 1.8 &#125;</span></span><br></pre></td></tr></table></figure>

<p>2、函数的增强写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">done</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="四、for循环"><a href="#四、for循环" class="headerlink" title="四、for循环"></a>四、for循环</h3><p>　　1、普通的for循环。用具有块作用域的let控制循环变量。如for(let i &#x3D; 0; i &lt; item.length; i++){item[i]…}。</p>
<p>　　2、for(let i in items){i…..} 。{}里面可以正确调用i的索引。</p>
<p>　　3、for(let item of items){item}。{}里面可以直接遍历items，生成一个个item对象。</p>
<p>　　4、reduce&#x2F;filter&#x2F;map。对于数组来说：（看代码例子）【超级好用!】</p>
<p>　　filter函数的使用。filter中的回调函数有一个要求：必须返回一个布尔值，当返回true时，函数内部会自动将这次回调的参数加入到新的数组中，当返回false时，函数内部会过滤掉这个参数。</p>
<p>　　map函数的使用。对数组的每个元素都进行处理，返回处理后的结果。</p>
<p>　　reduce函数的使用。reduce是对数组中所有的内容进行汇总。可以传入两个参数，第一个参数是个函数，第二个参数是初始返回值。</p>
<p>　　上述函数可以链式组合。（这就是函数式编程）（tips：编程范式分类：命令式编程&#x2F;声明式编程；面向对象编程（第一公民：对象）&#x2F;函数式编程（第一公民：函数）。例如vue、react框架就是声明式编程，JavaScript就是函数式编程。）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">420</span>, <span class="number">50</span>, <span class="number">40</span>,]</span><br><span class="line"><span class="keyword">let</span> newNums = nums.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums);<span class="comment">//[ 10, 20, 50, 40 ]</span></span><br><span class="line"><span class="keyword">let</span> new2Nums = newNums.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(new2Nums);<span class="comment">//[ 20, 40, 100, 80 ]</span></span><br><span class="line"><span class="keyword">let</span> new3Nums = new2Nums.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">preValue, n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + n;</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//一共遍历4次，第1次：preValue 0 n 20 返回20（0+20）</span></span><br><span class="line"><span class="comment">//第2次：preValue 20 n 40 返回 60;</span></span><br><span class="line"><span class="comment">//第3次：preValue 60 n 100 返回 160;</span></span><br><span class="line"><span class="comment">//第4次：preValue 160 n 80 返回 240;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(new3Nums);<span class="comment">//240</span></span><br><span class="line"><span class="comment">//上述函数可以链式组合</span></span><br><span class="line"><span class="keyword">let</span> finalResult = nums.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">100</span>;</span><br><span class="line">&#125;).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">preValue, n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + n;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalResult);<span class="comment">//240</span></span><br><span class="line"><span class="comment">//还可以结合ES6的箭头函数写法</span></span><br><span class="line"><span class="keyword">let</span> finalResult2 = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">100</span>).<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, n</span>) =&gt;</span> pre + n,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalResult2);<span class="comment">//240</span></span><br></pre></td></tr></table></figure>



<h3 id="五、箭头函数的使用和this指向"><a href="#五、箭头函数的使用和this指向" class="headerlink" title="五、箭头函数的使用和this指向"></a>五、箭头函数的使用和this指向</h3><p>　　1、箭头函数</p>
<p>　　箭头函数是ES6特有的一种函数的写法，其目的是简化写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式1：</span></span><br><span class="line"><span class="comment">// const a = (参数列表) =&gt;&#123;</span></span><br><span class="line"><span class="comment">//     // 函数体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 例子1: 两个参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例子2：一个参数时，小括号可以省略</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">power</span> = num =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num * num</span><br><span class="line">&#125;<span class="comment">//等价于 const power = num =&gt; num * num</span></span><br></pre></td></tr></table></figure>

<p>　　当函数体代码块只有一行代码时，还可以简写，把return省略。</p>
<p> 1 const sum2 &#x3D; (num1, num2) &#x3D;&gt; num1 + num2 </p>
<p>　　2、箭头函数的this指向（可以参考这个博客：<a href="https://segmentfault.com/a/1190000009069167">js的this指向问题</a>）</p>
<p>　　ES5中，this总是指向调用的对象。　　</p>
<p>　　箭头函数中的this是向外层作用域中， 一层层查找this，直到有this的定义（父级作用域的this保持一致）。下例中，第一个this，setTimeout中的function可以理解为callback（回调函数）,相当于在setTimeout调用一个外部定义的函数，而这个函数没有显式绑定对象，所以其this指向window对象。而第二个this，由于使用的是箭头函数，箭头函数的this会绑定父级作用域，所以虽然在setTimeout调用一个外部定义的函数，这个箭头函数的外层作用域是aaa函数，这个aaa函数作用域的this，就是指向这个obj。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="title function_">aaa</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向window对象</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//指向obj对象</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六、Promise"><a href="#六、Promise" class="headerlink" title="六、Promise"></a>六、Promise</h3><p>　　1、什么是promise及基本使用</p>
<p>　　<strong>promise是异步（async）编程的一种解决方案</strong>。（ES6引入）</p>
<p>　　同步（sync）的缺点就是可能会产生阻塞，例如，用户在往服务器请求一些数据，如果使用的是同步，那么用户只能等待请求完数据才能进行别的操作，即产生了阻塞，这样用户体验是非常不好的。</p>
<p>　　处理异步事件的一种很常见的场景是<strong>网络请求</strong>。我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4&#x3D;7一样将结果返回。所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。但是当网络请求非常复杂时，就会出现<strong>回调地狱（callback hell），回调中嵌套着回调</strong>。</p>
<p>　　所以使用promise可以解决这个问题。</p>
<p>　　这里，我们用一个定时器（setTImeout）来模拟异步事件：假设下面的data是从网络上1秒后请求的数据，console.log就是我们的处理方式。</p>
<p>　　<img src="/2019/12/13/blog28/1803687-20191229144512170-1734542055.png" alt="img"></p>
<p> 　我们将它换成promise代码，即进行promise封装。</p>
<p><img src="/2019/12/13/blog28/1803687-20191229144552827-1960788008.png" alt="img"></p>
<p> 　其中，Promise是一个类，里面以一个函数作为参数，这个函数本身又包含两个参数：resolve，reject。resolve，reject本身又是函数。然后异步操作放置在promise中，但是我们不希望所有异步操作（如果很多个的话）都集中写在里面（不然和没有封装一样了，还是会出现回调地狱），我们需要调用resolve函数，resolve函数匹配一个函数叫then，然后把异步操作的代码放置在此，resolve把一些数据会传给then。注意then可以返回的一个新建的promise对象，在这个对象可以封装着另一个异步操作（这样代码结构逻辑就很清晰了）。这就是<strong>链式编程</strong>。</p>
<p>　　<strong>异步请求成功了调用resolve，失败了调用reject</strong>。对应地，reject函数对应一个函数叫catch，捕获错误，reject函数把这些数据传给catch，并执行catch函数。</p>
<p>　　当我们使用new Promise()时，new就会执行Promise类的构造函数（<strong>保存了一些状态信息；执行传入的函数</strong>），在执行传入的回调函数时，传入两个参数，resolve和reject。　　</p>
<p>　　2、Promise的三种状态和另外处理方式</p>
<p>　　首先，当我们开发中有异步操作时，就可以给异步操作包装一个Promise。异步操作之后会有三种状态：</p>
<p>　　pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p>
<p>　　fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()。</p>
<p>　　reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()。</p>
<p> 　我们也可以在then里面把错误的情况写在里面。即then里面可以使用两个函数，函数1对应resolve传入的数据做处理，函数2对应reject传入的数据做处理（相当于catch()）。</p>
<p>　　<img src="/2019/12/13/blog28/1803687-20191229152514924-1928114536.png" alt="img">（此时，执行的是consolo.log(err)）</p>
<p> 　3、Promise的链式调用</p>
<p>　　我们在看Promise的流程图时，发现无论是then还是catch都可以<strong>返回一个Promise对象</strong>。所以，我们的代码其实是可以进行<strong>链式调用</strong>的。</p>
<p><img src="/2019/12/13/blog28/1803687-20191229153835957-2146113745.png" alt="img"></p>
<p>　　这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了：Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve函数；Promise.reject()：将数据包装成Promise对象，并且在内部回调reject函数。</p>
<p>　　（进一步简化）　　<img src="/2019/12/13/blog28/1803687-20191229152942821-705812272.png" alt="img"></p>
<p>　　还可以进一步简化，<strong>then里面的return的对象会被promise封装的</strong>。　　<img src="/2019/12/13/blog28/1803687-20191229154119502-300852127.png" alt="img"></p>
<p>　　但并不是每次都是异步请求成功的，所以当有reject时，后续的then是不执行的，但catch可以捕获错误。　　<img src="/2019/12/13/blog28/1803687-20191229154429045-804354438.png" alt="img"></p>
<p> 　其也有简写，即使用**Promise.reject()**。此外，也可以是 **throw ‘error’**来代替return Promise.reject(‘error’)来抛出异常，也是可以被catch()捕获的。</p>
<p> 　　4、Promise的all方法使用</p>
<p>　　假设我们需求本身需要两个网络请求，请求一和请求二。如何判断两个请求结果都有了呢？使用Promise.all（）。只有都完成了，才会执行这个promise的then函数。results（是个iterator）返回的是上述请求的结果（两个）。　　<img src="/2019/12/13/blog28/1803687-20191229155808005-796957343.png" alt="img"></p>
]]></content>
      <categories>
        <category>vue</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>语法</tag>
        <tag>promise</tag>
        <tag>let</tag>
        <tag>var</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之Vue组件化开发（三）</title>
    <url>/2019/12/13/blog29/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（Vue组件化开发）</p>
<p>内容：通过<a href="https://cn.vuejs.org/v2/guide/syntax.html">官网说明</a>，掌握Vue组件化开发。</p>
<span id="more"></span>

<h3 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h3><p><strong>Vue组件化开发</strong></p>
<h3 id="一、认识组件化"><a href="#一、认识组件化" class="headerlink" title="一、认识组件化"></a>一、认识组件化</h3><p>　　1、什么是组件化？</p>
<p>　　任何一个人处理信息的逻辑能力都是有限的，所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。但是，我们人有一种天生的能力，就是将问题进行拆解，如果讲一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解。</p>
<p>　　组件化也是类似思想：如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。但如果，我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</p>
<p>　　2、Vue组件化思想</p>
<p>　　组件化是Vue.js中的重要思想。它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用，<strong>任何的应用都会被抽象成一颗组件树</strong>。</p>
<p>　　3、组件化思想的应用</p>
<p>　　有了组件化的思想，我们在之后得开发中就要充分地利用它。尽可能地将页面拆分成一个个小的、可复用的组件。这样让我们的代码更加方便组织和管理，并且扩展性也更强。（避免大量重复代码）</p>
<h3 id="二、组件化基础之注册组件"><a href="#二、组件化基础之注册组件" class="headerlink" title="二、组件化基础之注册组件"></a>二、组件化基础之注册组件</h3><p>　　组件的使用分为三个步骤：创建组件构造器对象（调用Vue.extend()方法），注册组件（调用Vue.component()方法），使用组件（在Vue实例的作用范围内 ）。</p>
<p>　　1、创建组件构造器对象（通常在最外层嵌套一层div）</p>
<p>　　例如：const cpnC &#x3D; Vue.extend({ template:<code>&lt; div&gt;&lt; h2&gt;XX标题&lt;  /h2&gt;&lt; /dix&gt;</code>}) 注意，template是模板的意思，里面用的是&#96;&#96;（tab键上的波浪线键，ES6语法，可以用于字符串，有能自动换行的效果），该模板就是在使用到组件的地方，要显示的HTML代码。这种写法在Vue2.x文档没了，会使用一个语法糖的写法。</p>
<p>　　2、注册组件（全局组件）</p>
<p>　　Vue.component(‘组件名’，附件构造器对象)</p>
<p>　　3、在Vue实例管理的HTML元素范围内调用组件（只有管理到的HTML，例如Vue实例通过id选择器选中下面这个div块）</p>
<p>　　&lt; div id&#x3D;’app’&gt;&lt; 组件名&gt;&lt; 组件名&gt;&lt; &#x2F;div&gt;　</p>
<p>　　4、全局组件与局部组件</p>
<p>　　全局组件意味着可以在多个vue实例下面使用。局部组件就是在Vue实例定义下，注册组件，例如在vue的components属性对象中定义{cpn: cpnC}，其中cpn是组件名，cpnC是组件构造器对象。在开发中，使用比较多的是局部组件。</p>
<p>　　5、父组件与子组件</p>
<p>　　在组件2中，使用components属性定义以组件1的构造器注册组件1，也就是在组件2中，注册组件1，此时，组件2中的构建器对象中可以调用组件1（因为在其内部已经注册），接着再Vue实例中注册组件2（Vue的components属性内），这个时候就可以在Vue实例管理的HTML元素中，调用组件2，组件2里面还包含着组件1。所以组件2就是父组件，组件1就是子组件。（其实，Vue实例也是一个组件（最顶层组件，root组件），也有template属性可以定义。）注意，在Vue实例管理的HTML元素中调用组件1是没有效果的，因为其没有在Vue实例中注册，如果想用，应该在Vue实例中注册组件1。（这也可以理解为什么任何一个应用都能用组件树表示了。）</p>
<p>　　6、注册组件的语法糖写法（内部还是会调用Vue.extend方法） </p>
<p>　　就是把原来在组件构造器中的Vue.extend（）中的对象{template：XXX}，直接放入Vue.component(‘组件名’,{template：xxx})。注册局部组件也是一样的，把对象{template：XXX}直接放入Vue实例的components中{‘组件名’：{template:xxx}}。</p>
<p>　　7、组件模板抽离的写法（后面用cli脚手架时，会有更好的写法）</p>
<p>　　第一种写法：在外部写一个script标签并定义text&#x2F;x-template类型并绑定id，然后在里面写模板HTML信息，如&lt;  script type &#x3D;’text&#x2F;x-template’ id&#x3D;’cpn’&gt;&lt; div&gt;&lt; h2&gt;&lt; &#x2F;h2&gt;&lt; &#x2F;div&gt;&lt; &#x2F;script&gt;。然后在注册组件中的构造器中用id选择器选中这个模板，如Vue.component(‘组件名1’,{template: ‘#cpn’})，接着再使用即可。</p>
<p>　　第二种写法：使用template标签，并且绑定id。例如，&lt; template id&#x3D;’cpn’&gt;div&gt;&lt; h2&gt;&lt; &#x2F;h2&gt;&lt; &#x2F;div&gt;&lt; &#x2F;template&gt; 。后面也是注册和使用。（推荐第二种）</p>
<h3 id="二、组件化基础之数据传递（组件通信）"><a href="#二、组件化基础之数据传递（组件通信）" class="headerlink" title="二、组件化基础之数据传递（组件通信）"></a>二、组件化基础之数据传递（组件通信）</h3><p>　　1、为什么组件data必须是函数？（其实组件的原型就是一个Vue实例，Vue实例有的，组件也有，即data属性，methods）</p>
<p>　　组件内部是不能直接访问vue实例内部的data属性的。 组件是一个单独功能模块的封装，这个模块有属于自己的HTML模板，也有属于自己的数据data。通过在组件构造器对象中的data属性方法（注意是方法，而不是属性对象），data方法要返回一个对象，该返回对象内部中，定义我们的具体的data。例如，&lt; template id&#x3D;’cpn’&gt;div&gt;&lt; h2&gt;前端框架Vue自学之Vue组件化开发（三）&lt;  &#x2F;h2&gt;&lt; &#x2F;div&gt;&lt; &#x2F;template&gt;，而在Vue.component(‘组件名1’,{template: ‘#cpn’, data() { return {title: ‘cba’}}})，这样就可以把模板的title用组件的data渲染出来了，为‘cba’。</p>
<p>　　组件里面有着自己的作用域（封装），当组件想要有某些功能的时候，应该在组件内部定义methods方法。 由于组件应该是独立的（为了更好的复用），如果之前在组件内部定义的data是一个属性对象，那么当使用多个同一组件是，就会共享这个data属性对象，导致，在一个组件修改data时（相当于修改同一个对象），会影响另一个组件的data。所以data属性应该使用方法返回一个大的对象（记得<strong>要用大括号包括</strong>，即<strong>栈空间</strong>，能够为return返回的对象创建多个变量每次返回新的对象（新的地址），不然直接传入对象的话，就可以属性对象的是同一种情况了，即指向同一个内存地址了），对象里面包含要用的数据，使得在组件中的数据修改不会影响别的同一组件。</p>
<p>　　2、父子组件通信之父传子</p>
<p>　　之前我们提到，子组件是不能引用父组件或者Vue实例的数据的，但是，在开发中，往往一些数据确实需要从上层传递到下层，例如，一般数据获取是通过外层组件（父组件）向服务器发送请求，获取相关数据，不会让子组件再次发送一个网络请求（这样对服务器压力很大），而是由父组件传数据给内部子组件（遍历）进行展示渲染，这时候就涉及到父子组件通信的问题。</p>
<p>　　<strong>Vue官方提到了两种方式：通过props向子组件传递数据（父传子）和通过事件向父组件发送消息（$emit event）（子传父）。</strong></p>
<p>　　在真实开发中，Vue实例和子组件的通信和父组件和子组件的通信过程是一样的。因为Vue实例就是一个根组件（父组件）。</p>
<p>　　即当我们要使用vue实例下面的data数据（变量2）时，通过在子组件定义props属性（可以是对象、字符串数组），格式为props:{变量1}，然后在使用这个子组件时，用v-bind绑定变量1到变量2上，此时就可以在子组件使用到data数据了，注意是调用变量1（其是调用变量2）。</p>
<p>　　除了数组之外，我们也可以使用是对象，当需要对props进行类型等验证时，就需要对象写法了。类似于：props:{cmessage: String}。可以是多个类型。或者可以提供一些默认值，类似于：props:{cmessage: {type: String, default:’abc’}}。类型是对象或者数组时，默认值必须是一个函数（通过定义函数返回对象或者数组等）。里面还可以有required属性，当设置为true时，就会要求必须要外部传入这个变量（必传值）。注意，如果是在子组件内的props设置了一些默认值，当通过v-bind绑定有重复的变量的时候，就会把默认值覆盖。当然，也可以设置自己的自定义验证类型。</p>
<p>　　父传子props中的驼峰标识。通常我们在写JS时，习惯使用驼峰标识。但是在v-bind后面是不支持驼峰标识识别的，必须把驼峰的地方用-连接，并且后面字符是小写。例如在props定义了cInfo，那么在v-bind后面用c-info。</p>
<p>　　在子组件定义模板时（&lt; template&gt;），里面必须要有一个根元素，所以一般里面用div包裹起来。例如&lt; template&gt;&lt; h2&gt;&lt;  &#x2F;h2&gt;&lt; h2&gt;&lt;  &#x2F;h2&gt;&lt; &#x2F;template&gt;，这样会报错，因为没有根元素，要改成&lt; template&gt;&lt; div&gt;&lt; h2&gt;&lt;  &#x2F;h2&gt;&lt; h2&gt;&lt;  &#x2F;h2&gt;&lt; &#x2F;div&gt;&lt; &#x2F;template&gt;，这样就不会报错了。</p>
<p>　　3、父子组件通信之子传父（自定义事件）</p>
<p>　　在实际开发中，经常会发生，当子组件发生一些事件时，父组件要知道子组件发生了什么事并且是得知道那个子组件发生了事件，从而可以进行后续的一些处理。这时候就是子组件与父组件通信的问题了。</p>
<p>　　通过在使用子组件的时候使用v-on监听事件，然后在子组件的methods里面定义方法，实现相关功能。但是注意，只是这样的话，是子组件监听子组件发生的事件。</p>
<p>　　我们希望是子组件告诉父组件发生的事件，在子组件的methods里面定义方法是有要求的， 得使用this.$emit(‘事件1’，参数)方式发送事件（这个是自定义事件，可以带参数，这个参数是默认发送的参数，像之前如果没有写参数，是默认的发送event事件），然后在调用父组件中调用的子组件中，用v-on监听子组件的自定义事件（之前v-on用的都是常规的DOM事件，如click等，而这里是我们自定义的事件），类似v-on：事件1&#x3D;‘事件2’，然后在父组件中的methods里面定义我们的事件2并且它是可以接收到参数的。这样就完成了子传父的通信。</p>
<p>　　4、在定义Vue组件时，一般封装为.vue文件。里面包含三大块：&lt; template&gt;&lt; &#x2F;template&gt;（写模代码），&lt; script&gt;&lt; &#x2F;script &gt;（写JS代码）和&lt; style&gt;&lt; &#x2F;style&gt;（写样式）。（tips：当组件被编译后，是没有模板&lt; template&gt;的，只有渲染函数render。）</p>
<p>　　5、当我们需要在子组件双向绑定Vue实例data数据（和input标签）时，官方推荐，不要直接绑定props中的数据，而是v-bind绑定在子组件的data方法下返回定义的数据（可以使返回的数据指向props的数据），然后在子组件中v-on监听事件，并且在子组件定义methods方法，通过定义传入event（默认下）的函数，并把子组件内的事件和值用$emit传出去，接着再使用子组件的地方监听这个自定义事件，最后在Vue实例（父组件）的methods定义这个方法。（其实这就是v-model的本质，综合应用v-bind和v-on，实现双向绑定）</p>
<p>　　6、watch。</p>
<p>　　组件内也存在watch监听属性，能够监听某些变量的改变，并且会缓存两个值：改变前的变量值和改变后的变量值，watch内可以定义相关函数处理。</p>
<p>　　7、父子组件的访问方式（通过访问对象的方法）</p>
<p>　　有时候我们需要父组件直接访问子组件，子组件直接访问父组件或者是子附件访问根组件。</p>
<p>　　父组件访问子组件：使用$children或$refs。这些都是对象，里面包含子组件的很多属性和方法。（reference引用的意思）$children会把父组件中的所有子组件作为一个对象，然后根据索引去控制使用哪个子组件。开发中，一般不用$children（因为索引会因为在中间插入别的组件时，不稳定会变化，导致取错子组件），而是使用$refs。 $refs的使用要求我们在想控制的子组件的属性加上ref引用属性，例如ref&#x3D;’abc’，然后通过$refs进行准确调用子组件对象了，例如this.$refs.aaa，就是刚刚那个子组件对象了并且与顺序索引无关。</p>
<p>　　子组件访问父组件：使用$parent。$root（访问根组件）。在子组件内使用$parent，可以获取父组件对象。（开发里面用的比较少，因为这样的操作会使得子组件不独立了，子与父的耦合度太高了。）</p>
<p>　　</p>
<h3 id="三、组件化高级之插槽slot"><a href="#三、组件化高级之插槽slot" class="headerlink" title="三、组件化高级之插槽slot"></a>三、组件化高级之插槽slot</h3><p>　　1、为什么使用slot?</p>
<p>　　组件的插槽是为了我们封装的组件更加具有扩展性，是让使用者可以决定组件内部的一些内容到底展示什么。例如在电商软件中，每个页面存在一个导航栏，我们可以看做一个nav-bar组件，但是会根据不同的状态显示不同的导航栏，如果我们想都应用这个组件，就可以通过加入插槽，通过根据不同的状态放入不同的扩展组件，实现同一个nav-bar组件的复用（提供一个大的相同结构，但是内容可以不一样（扩展组件））。</p>
<p>　　2、封装与插槽</p>
<p>　　抽取共性，保留不同。最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。一旦我们预留了插槽，就可以让 使用者根据自己的需求，决定插槽中插入什么内容。</p>
<p>　　3、slot基本使用</p>
<p>　　在组件模板&lt; template&gt;元素中添加插槽&lt; slot&gt;&lt; &#x2F;slot&gt;，作为组件预留扩展位置。然后在具体使用组件的时候，在内部把我们想用的组件（会当做一个整体）放进去（相当于对应于之前定义插槽位置），例如简单就放入一个button组件或者是一段HTML都行。 插槽里面可以定义默认值，当没有在使用组件时的其内部使用扩展组件，就会以默认的情况显示。</p>
<p>　　3、具名插槽slot</p>
<p>　　当我们在一个组件中使用了多个插槽，但是我们只想在使用组件的时候只改变某一个插槽（或者是插入别的组件），这时如果没有在模板的插槽中使用name属性，其会替换所有没有使用到name的插槽。所以我们应该对每个插槽使用name属性，然后在使用组件的时候，在要插入的元素中使用slot属性，让其等于要改变的插槽的name，指定该插槽。</p>
<p>　　4、编译作用域</p>
<p>　　变量编译的作用域是取决于在哪个模板内使用的变量。例如在vue实例定义了一个isActive变量为true，而在vue实例下的一个组件内定义了一个isActive变量为false。当在Vue实例下的使用这个组件，里面用了isActive变量，其值是为true，因为该变量是在Vue实例管理的模板里的。如果是在这个组件内的模板使用了isActive变量，则是为false，道理一样。（官方给出了一条准则：父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。）</p>
<p>　　5、作用域插槽</p>
<p>　　父组件替换插槽的标签，但是内容由子组件来提供。类似于数据内容是由子组件提供，但是父组件在使用子组件的时候，需要一些改变，例如改变原来在子组件默认的显示方式，变为自己可以定义的方式去显示。此时，就可以把子组件的对应内容先用slot插槽包裹并且通过在这个slot内v-bind绑定子组件的数据（如&lt; slot :data&#x3D;’子组件数据’&gt;），然后在父组件内使用到的子组件中定义一个模板（&lt; template&gt;或者HTML元素（2.X版本）），并且使用到slot-scope属性（相当于对之前在子组件的定义slot内容）（如&lt; template slot-scope&#x3D;’slot1’&gt;），由于之前slot内v-bind绑定了子组件的数据，这个时候就可以在这个模板（&lt; template&gt;或者HTML元素（2.X版本））内通过使用slot-scope属性的值（如slot1.data），就可以使用子组件的数据data了。外部父组件可以利用子组件提供的数据进行一些应用。</p>
<h3 id="四、组件化高级之动态组件"><a href="#四、组件化高级之动态组件" class="headerlink" title="四、组件化高级之动态组件"></a>四、组件化高级之动态组件</h3><h3 id="五、组件化高级之异步组件"><a href="#五、组件化高级之异步组件" class="headerlink" title="五、组件化高级之异步组件"></a>五、组件化高级之异步组件</h3><h3 id="六、组件声明周期"><a href="#六、组件声明周期" class="headerlink" title="六、组件声明周期"></a>六、组件声明周期</h3>]]></content>
      <categories>
        <category>vue</category>
        <category>组件</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>组件</tag>
        <tag>组件化</tag>
        <tag>插槽</tag>
        <tag>组件通信</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之webpack（四）</title>
    <url>/2019/12/15/blog31/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（webpack）</p>
<p>内容：学习和使用webpack。为学习Vue CLI做准备。</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h3 id="一、webpack"><a href="#一、webpack" class="headerlink" title="一、webpack"></a>一、webpack</h3><p>　　1、认识webpack</p>
<p>　　本质上来说，webpack是一个现代的JavaScript应用的静态<strong>模块打包</strong>工具。模块和打包。</p>
<p>　　前端的模块化：之前在我的博客也提到，目前一些模块规范有：AMD,CMD,CommonJS,ES6的module。在ES6之前，我们想要进行模块化开发，就必须借助于其他的工具，让我们可以进行模块化开发，并且在通过模块化开发完成了项目后，还需要处理模块间的各种依赖，并且将其进行整合打包。而webpack其中一个核心就是让我们可以进行<strong>模块化开发</strong>，并且会帮助我们处理模块间的依赖关系。而且不仅仅是JavaScript文件，我们的CSS、图片、json文件等等再webpack中都可以被当做模块来使用。这就是webpack中模块化的概念。</p>
<p>　　打包：将webpack中的各种资源模块进行打包合成一个或者多个包（Bundle），并且在打包的过程中，还可以对资源进行处理，比如压缩图片，将SCSS转（CSS扩展语言）成CSS，将ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。</p>
<p>　　2、与grunt&#x2F;gulp的对比（现在一般用webpack比较多）</p>
<p>　　grunt&#x2F;gulp的核心是task。可以配置一系列的task，并且定义task要处理的事务（比如ES6，TS转化等），之后让grunt&#x2F;gulp来依次执行这些task，并且让整个流程自动化。所以grunt&#x2F;gulp也被称为<strong>前端自动化任务管理</strong>工具。</p>
<p>　　如果我们的工程模块依赖非常简单，甚至是没有用到模块化的概念，只需要进行简单的合并、压缩，就使用grunt&#x2F;gulp即可。但是如果整个项目使用了模块化管理，而且相互依赖非常强，我们就可以使用更强大的webpack了。</p>
<p>　　3、webpack安装</p>
<p>　　webpack为了可以正常运行，必须依赖Node环境。Node环境为了可以正常的执行很多代码，必须其中包含各种各样的包， 也需要包管理工具npm工具。</p>
<p>　　安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm。Node.js可以在官网下载：<a href="http://nodejs.cn/">Node.js</a>(要大于8.9版本)，全局安装webpack（简易学习时，先用3.6.0版本，因为vue cli依赖这个版本。win系统下cmd命令：npm install <a href="mailto:&#119;&#101;&#x62;&#112;&#x61;&#x63;&#107;&#64;&#51;&#46;&#x36;&#46;&#x30;">&#119;&#101;&#x62;&#112;&#x61;&#x63;&#107;&#64;&#51;&#46;&#x36;&#46;&#x30;</a> -g）。后续可能需要我们局部安装webpack（–save-dev是开发时依赖，项目打包后不需要继续使用的。）</p>
<p>　　为什么全局安装后，还需要局部安装？在终端直接执行webpack命令，使用的是全局安装的webpack。当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack。</p>
<p> 　4、webpack的基本使用</p>
<p>　　一般在项目的根目录下，会创建两个文件夹：src和dist。src放置源码（打开的东西），dist（distribution发布）放置把源码打包的东西，最终发布。src一般会有main.js或者是index.js，然后根目录下会创建一个index.html文件（这个文件也是最后要放到dist文件夹内）。</p>
<p>　　由于之前讨论过，现在在src里面的js代码都是按照模块化的方式去写（CommonJS、Module等）。开发中，我们可能会创建多个js文件，假如说main.js（相当于一个入口文件）是依赖于某个mathUntils.js，那么意味着传统的做法是要在index.html下用script标签先引入mathUntils.js再引入main.js。但是按照模块化的思想，我们可以将mathUntils.js写成一个模块，然后用CommonJS的方法引入其进入main.js。然而，在index.html只使用这个main.js，是不行的，因为浏览器不认识main.js中的CommonJS代码（会报错说require,module未定义）。这个时候，可以使用webpack对js文件进行打包，打包出来一个浏览器能识别的js文件，然后在index.html引用这个js文件。</p>
<p>　　所以在开发中，我们都在通过CommonJS方式写js代码，用webpack自动会帮我们处理这些JS代码模块间的依赖关系，最后生成一个浏览器识别的js文件。在下面的例子，我们可以发现我们只需打包main.js这个入口文件，而不是打包main.js和mathUntils.js两个文件。因为webpack会自动帮我们在main.js查看是否有依赖其他文件，并且自动处理各种模块间的依赖，这点在大型项目里面非常有效，因为在一个大的开发项目中，有各种JS文件，各种相互依赖的模块，我们只用关心入口文件main.js即可。</p>
<p>　　总结：<strong>以后我们在开发中，只需要在src文件下开发，使用CommonJS或者是ES6的module模块化规范都行（甚至可以混合使用都行），最后我们通过使用webpack模块打包，最后在index.html代码引入打包后的文件即可。（当然，最后我们还有把index.html放入到dist文件内，后续再说）</strong></p>
<p>　　举例：</p>
<p>　　<img src="/2019/12/15/blog31/1803687-20191218091317777-1119588298.png" alt="img">（我们的工作目录）　　 <img src="/2019/12/15/blog31/1803687-20191218091341160-1758225901.png" alt="img">（index.html）</p>
<p><img src="/2019/12/15/blog31/1803687-20191218091439588-554438022.png" alt="img">（main.js）<img src="/2019/12/15/blog31/1803687-20191218091502383-2007043123.png" alt="img">（mathUtils.js）</p>
<p>　　这个时候直接引入main.js的index.html会报错。</p>
<p>　　所以，我们要使用webpack，即在终端输入webpack .&#x2F;src&#x2F;main.js .&#x2F;dist&#x2F;bundle.js(如果webpack没有权限，得用管理员的身份打开Windows PowerShell授权)</p>
<p><img src="/2019/12/15/blog31/1803687-20191218092942427-1987854295.png" alt="img"></p>
<p> 　这样就在dist目录下生成了js文件（里面相当于webpack自动帮我们定义解析了浏览器能识别的CommonJS的命令）</p>
<p><img src="/2019/12/15/blog31/1803687-20191218093242531-728104596.png" alt="img"></p>
<p>　　然后在index.html只引入webpack打包生成的bundle.js文件，最后就可以在浏览器得到正确结果显示了。</p>
<p><img src="/2019/12/15/blog31/1803687-20191218093523236-1595348133.png" alt="img">（index.html引入bundle.js）</p>
<p><img src="/2019/12/15/blog31/1803687-20191218093517567-2054698705.png" alt="img">（浏览器控制台显示正确结果）</p>
<p>　　5、webpack.config.js配置和package.json配置</p>
<p>　　有时候，我们直接在终端输入一个webpack（而不是长串的webpack .&#x2F;src&#x2F;main.js .&#x2F;dist&#x2F;bundle.js命令），直接将src文件夹中的文件就模块打包生成包文件进dist文件夹中。这就涉及到webpack的配置文件。 </p>
<p>　　首先，我们在根目录下创建webpack.config.js文件（名字不可改），然后通过CommonJS导出一个对象，定义入口和出口。当我们在终端输入webpack，执行命令时，它会自动找到webpack.config.js文件，读取入口和出口。</p>
<p>　　注意的是，我们在定义入口和出口时，把src&#x2F;main.js路径作为入口，而出口不是写成dist&#x2F;bundle.js，而是写为一个对象，里面包含path（有要求）和filename（bundle.js）。这个path，里面输入绝对地址，但不要复制文件夹地址的方式，而是用动态获取路径，即使用node语法，引入node中名为path的包。</p>
<p>　　我们项目中并没有node的包，所以得在终端输入npm init（npm init -y 全部选择yes，但注意这样得全英文路径），初始化node包，起包名，版本号，描述，入口点（index.js或者随便写此时还用不上），等等初始化项目，最后选择OK。现在就在我们根目录下生成了package.json文件，里面就是我们要依赖的Node环境的文件，告诉我们一些信息。如果package.json还依赖一些东西，我们还需要在终端输入npm install，其会帮助我们的package.json安装一些需要的东西（生成了一个package-lock.json文件）。 </p>
<p>　　最后在终端执行webpack，就可以自动打包生成在dist目录下的bundle.js文件了。    <img src="/2019/12/15/blog31/1803687-20191218104842127-808844585.png" alt="img">（webpack.config.js）</p>
<p>　　<img src="/2019/12/15/blog31/1803687-20191218105039710-196739467.png" alt="img">（终端执行webpack）</p>
<p>　　6、但是，一般在开发中，我们很少在终端输入webpack，而是输入npm run build，通过npm进行构建打包。</p>
<p>　　因为webpack.config.js名称是写死的，在开发中，我们可能需要用别的名字比较方便。并且，后续学习可以知道使用局部的webpack的命令行也很长，很麻烦。所以我们需要将其都映射在npm run XXX这样的格式的命令。</p>
<p>　　我们在package.json里面找到一个scripts的选项，在初始化的时候，里面有test对象。当我们在终端输入 npm run test，就会输出该对象。所以，我们在选项下面，定义一个build（”build”: “webpack”）。这样在终端输入npm run build就相当于输入webpack执行（相当于一次映射）。</p>
<p>　　注意，这种定义方式是优先在本地执行，例如先找本地安装的webpack，由于目前我们没有在本地安装webpack，所以它会找全局安装的webpack，所以执行了全局的webpack。在开发项目中，一般用的都是本地的webpack。而且假如本地用的webpack版本和全局用的webpack版本不同，这个时候这种方式就可以让我们指定使用项目开发中的本地版本的webpack，这样就不会选错版本而导致配置出错的问题了。</p>
<p>　　7、本地（局部）安装webpack</p>
<p>　　依赖分为：开发时依赖和运行时依赖。在开发阶段才用到webpack，但在打包完，给服务器，运行时就用不到webpack（也就是说webpack是一个打包后就不用的东西）。我们后面使用的Vue是运行时依赖，要写入dependencies 节点。</p>
<p>　　所以在本地安装webpack用命令：npm install <a href="mailto:&#119;&#x65;&#98;&#112;&#x61;&#x63;&#x6b;&#x40;&#51;&#x2e;&#x36;&#46;&#48;">&#119;&#x65;&#98;&#112;&#x61;&#x63;&#x6b;&#x40;&#51;&#x2e;&#x36;&#46;&#48;</a> –save-dev（3.6.0是版本号，-save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies（开发时依赖）节点写入依赖。devDependencies 节点下的模块是我们只开发时需要用的。如果是开发和运行阶段都要用，则写入dependencies 节点，用–save后缀）。package.json里面会写入devDependencies对象，里面是我们3.6.0版本的webpack。</p>
<p>　　补充：我们要在自己的编译器受理管理员权限，例如我用的是VSCode，要在程序的兼容性中给予管理员权限。在我们自己的练习中，可能会有两个warn，就是说没有description和repository，也就是说缺少项目的基本描述文件和仓库字段，一般团队合作时会用到，比如readme和git仓库，设置了就不会有警报了，当然也可以在package.json中添加”private”: true选项表示这是私人的，这样也不会有警报。 可能还会有两个optional和notsup的警告，因为这个fsevents依赖是个可选的依赖包，只有项目运行环境是mac OS时才会使用，所以在windows和linux下会报这个warn，无关紧要。</p>
<p>　　注意，只要我们是在终端执行的命令（不管是编译器下的还是WIN的CMD下的），如输入webpack，都是在全局使用webpack。但是如果使用npm run build（刚刚在我们package.json定义的”build”:”package”），就可以优先在本地搜索webpack，从而本地执行webpack（即执行的是从项目内的node_modules文件夹内的webpack）。</p>
<p>　　8、webpack中使用CSS文件的配置（loader）</p>
<p>　　之前用webpack模块打包了用模块化规范写的JS文件，但在实际开发中，我们还会写CSS文件，我们也想将其当做模块，去引用。类似的，可能还有其他类型的文件需要引入（例如图片，ES6转ES5，TS转ES，.jsx或.vue转JS文件等）。对于webpack本身的能力来说，这些转换时不支持的，那么就需要给webpack扩展对应的loader就可以了。</p>
<p>　　loader是webpack中一个非常核心的概念<strong>。loader的使用步骤：通过npm安装需要使用的loader；在webpack.config.js中的module关键字下进行配置。</strong>大部分loader我们都可以在webpack的官网中找到，并且学习对应的用法。</p>
<p>　　通常的文件组织方式是在src文件夹里面创建一个js文件夹，里面放置除了main.js的js文件，main.js是入口文件放在src内的最外层，其他js文件就放到js文件夹里面。</p>
<p> 　我们在src文件夹里创建css文件夹，并创建一些css文件。我们不能在index.html里直接引入这些CSS文件，一个个引入太麻烦了。我们可以将css文件看做是一个模块，将它们打包进bundle.js文件里面。但注意webpack是根据入口文件进行找依赖，然后打包，如果入口文件假设没有依赖这个CSS文件，那么直接打包是没有引入这个CSS文件的。</p>
<p>　　所以，我们在main.js里面写入对这个CSS依赖。例如直接加入require(‘.&#x2F;css&#x2F;normal.css’)，然后运行npm run build进行打包，这个时候，你会发现有错误，上面说需要一个合适的loader去处理这个文件。</p>
<p>　　这个时候我们可以去<a href="https://webpack.js.org/">webpack官网</a>，找这个loader。进入官网，点文档，点右上角有个Loaders选项，根据需求选择loader。例如我们现在需要的是css样式的loader，选择样式（style），选择css-loader，里面会告诉我们如何使用css-loader。使用loader步骤如之前所述：安装和配置。按照说明，先在终端执行npm install –save-dev css-loader。然后在webpack.config.js中创建module关键字并进行配置（复制官网的规则粘贴即可）。最后，我们再使用npm run build进行打包。（我们会发现这个规则，第一部分是一个正则表达式，用于匹配相关文件；第二部分用来引用loader的）　　<img src="/2019/12/15/blog31/1803687-20191218164101966-14522303.png" alt="img"> </p>
<p>　　补充1：官网的css-loader规则里除了使用了css-loader（我们之前已经安装），还使用了style-loader（我们还没安装）。 假如我们只使用了css-loader（删除style-loader），在打包构建后，index.html展示不出我们写的normal.css的效果。原因是因为css-loader只负责将css文件进行加载，不负责解析。所以还是得补全写入style-loader选项，因为我们没有这个loader，所以得安装这个style-loader（回到官网，找到style-loader，安装和配置），style-loader的作用是将模块的导出作为样式添加到DOM中。最后，在点开index.html文件，确实展示了我们写的CSS文件了。</p>
<p>　　补充2：使用了多个loader时，其顺序是很重要的。在上例，由于我们使用了多个loader，按照逻辑，我们应该是先把CSS加载，然后在把样式添加到DOM中。但由于webpack规定，使用多个loader的顺序是从右向左的。所以得写成use: [‘style-loader’, ‘css-loader’]。如果交换，则会报错。</p>
<p> 　9、less文件的处理（webpack下）</p>
<p>　　CSS预处理器是 CSS 语言的超集，比CSS更丰满。CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。</p>
<p>　　CSS预处理器语音，常用的有Sass（SCSS）、LESS、Stylus等。例如less可以@变量名：值来定义一个变量，然后在样式代码中使用（类似编程思想）。</p>
<p>　　webpack也是可以处理这些文件的，以less（.less文件）为例。 首先，在CSS创建一个less文件，文件名为special.less。然后在main.js里面引用（依赖）这个less文件（require(‘.&#x2F;css&#x2F;special.less’)），此时，如果就打包的话就会报错，还是因为没有合适的loader处理less文件。同样地，打开官网，找到less-loader，安装与配置。注意，我们会发现官网除了安装了less-loader（负责加载）还安装了一个less包（工具），less包就是用来解析less代码，转换为CSS文件。此外，在配置的时候，我们只复制添加rules对象（包含test和use的对象）而不是整个module。接着在按照之前说的，打包，点击index.html查看即可。</p>
<p>　　10、图片文件的处理</p>
<p>　　开发中，我们可能还需要别的一些资源文件，例如图片，视频等。</p>
<p>　　webpack也是可以处理这些资源文件的，我们以图片文件举例。</p>
<p>　　首先，在src文件夹中创建图片img文件夹，里面放些图片，举例放一张joker.jpg。然后，我们在CSS文件夹下的normal.css的body引入这个图片（background: url(‘..&#x2F;img&#x2F;joker.jpg’);）。这次，打包时，发现报错，还是说没有一个合适的loader处理图片。同样地，上webpack官网，找文件的loader，因为我们是通过url引入的图片，应该使用url-loader。接着安装和配置。最后打包，即可使用。</p>
<p>　　注意，我们在配置图片url-loader时，有个options对象，里面有个limit属性，值为一个数值（字节数），当加载图片，（图片大小）小于limit时，会加载url-loader，将图片编译成base64字符串形式。如果图片大小大于这个limit时，会报错，说找不到file-loader模块，此时如果要加载比limit大的图片时，我们只需安装file-loader。file-loader只安装不用配置（因为要用的是url-loader）。此时，打包，没有报错，在dist文件夹内生成了一张32位哈希值（防止图片名重复）的图片，但是运行index.html代码时，发现没有加载图片，打开控制台，发现提示没有找到图片（项目根目录下），（如果我们把哈希值名的图片放在项目根目录就可以显示，但是实际中我们应该把图片打包进bundle.js里面），也就是说我们希望在dist的目录路径搜索应用的图片而不是在根目录下。此时，需要我们配置一个路径。</p>
<p>　　通过修改webpack.config.js文件，在output里面添加publicPath（publicePath: ‘dist&#x2F;‘），以后我们每次用到url就会在前面拼接这个路径，即dist&#x2F;（相当于在根目录下添加这个目录）。这样我们再次进行打包，此时，index.html能正确显示我们的图片了。</p>
<p>　　注意，如果我们最终把index.html打包到dist文件夹时（还没说到，暂时不管），publicPath就不需要了。</p>
<p>　　此外，在真实开发中，我们可能对打包的图片名字有一定要求。比如，将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复。所以，我们在webpack.config.js中的url-loader规则内的options内，添加name属性（name: ‘img&#x2F;[name].[hash:8].[ext]’），意思是img：文件要打包到的文件夹。name：有中括号，获取原来图片的名字。hash:8：防止图片名称重复，使用8位的hash值，仍然是中括号内。ext：使用图片原来的扩展名，仍然是中括号内。这样之后，再打包，就可以在dist文件夹下创建img文件夹，并且有名为joker.112e36c8.jpg的图片，最终的index.html也是可以展示出来。</p>
<p>　　11、ES6转ES5的Babel</p>
<p>　　之前的用webpack打包的js文件，发现ES6语法并没有转成ES5语法，那么意味着可能一些对ES6还不支持的浏览器没有办法很好地运行我们的代码（例如我们之前打包生成的bundle.js里面含有const的ES6语法）。所以我们希望使用webpack打包时，顺带着把ES6转成ES5。</p>
<p>　　如果我们想要把ES6转成ES5，那么使用babel。而在webpack中，我们直接使用babel对应的loader就可以了。终端输入npm install –save-dev babel-loader@7 babel-core babel-preset-es2015（7版本，还需babel-core和babel-preset-2015。官网是配置-env，后面我们会学），接着在webpack.config.js进行配置（这个loader对应的rules），这个rules里面多个exclude:&#x2F;(node_modules|bower_components)&#x2F;（（exclude排除，不包括），它的意思是只需转换src文件夹里面js代码，由于之前本地安装了一些包依赖，这些包放在node_modules文件夹内，里面有一些ES6语法写的模块，但是不需要转换为ES5语法。此外，由于我们是配置babel-preset-es2015（与官网不同，官网是配置-env），所以我们得在loader的options的 presets: [‘@babel&#x2F;preset-env’]修改为 presets: [‘es2015’]。接着打包，此时，打包文件都是ES5语法了（例如此时我们的bundle.js的const转为了ES5的var）。</p>
<p>　　12、使用Vue的配置过程</p>
<p> 　为了能在我们src文件夹里使用vue相关的东西，必须进行配置。后续项目中，我们会使用vue,js进行开发，而且会以特殊的文件来组织vue的组件。所以，我们得学习如何在webpack环境中集成vue.js。之前我们使用vue.js都是把该文件通过script标签引入，而不是模块化管理的方式。我们希望以模块化思想使用vue.js，即使用npm安装的方式，把vue.js安装到node_modules里，把vue当成一个模块，即可以在代码中通过import Vue from ‘vue’即可（这样vue文件是通过在node_modules文件夹路径搜索，因为node_modules里对应模块是用export default Vue）。</p>
<p>　　我们希望在项目中使用vue.js，那么必要需要对其有依赖，所以先进行安装。终端输入npm install vue –save(vue是运行时依赖，打包和使用bundle.js都要用)。注意，在main.js使用vue的时候，先引用vue，并在对应的index.html写入对应代码，然后打包。</p>
<p>　　可能这样的index.html运行时会报错，说runtime-only版本vue的模板不可靠。这是因为vue在构建最终发布版本的时候，构建了两类版本：runtime-only和runtime-compiler。runtime-only要求代码中，不可以有任何的template，因为这个版本没有编译template的代码。runtime-compiler中可以有template，因为有complier可以用于编译template。</p>
<p>　　所以当我们遇到runtime-only这个问题时，需要对webpack进行配置。我们可以先去<a href="https://cn.vuejs.org/index.html">vue.js的官网</a>，搜索webpack，里面提及希望使用完整版vue时，则需要在打包工具里配置一个别名。在webpack.config.js中加入resolve选项，填入alias: {‘vue$’: ‘vue&#x2F;dist&#x2F;vue.esm.js’ }，意思是在我们引入vue时，先引用这个vue路径下的&#x2F;vue.esm.js（vue的一个发布版本，里面包含着runtime-compiler，默认下，使用的是vue.runtime.js版本）。这个时候再重新打包构建，就发现已经解决了runtime-only报错的问题。</p>
<p>　　13、创建Vue时template和el关系</p>
<p>　　之前我们使用的都是单页面网络应用SPA（single page web application），多个页面的话，后续学习是通过前端路由（vue-router）跳转的，一般只有一个html代码（index.html），一般是不修改，固定的，当做一个模板。所以在真实开发中，不会把大量的关于vue的代码写到html代码中（只需给元素简单配个id，为在main.js中的vue组件等对应起来）。所以，通常是把在用到vue的html代码写在main.js中用template属性中（注意template一般得给一个根元素节点）。</p>
<p>　　在vue源码中，可以知道上面这种把html代码写在template中，在编译时，vue会复制template的html代码，替换el绑定的元素中。这样的好处就是不用每次手动修改html代码（index.html）了。</p>
<p>　　14、Vue的终极使用方案</p>
<p>　　但是在main.js里面写大量的template，也会显得非常冗余。所以，我们考虑使用组件。</p>
<p>　　首先，我们看一下基本思路。首先，我们把原来写到Vue实例的template内容，data内容和methods内容，写到外面，在外面定义一个对象（例如名为App），该对象包含原来的template属性，data属性（注意，组件中的data属性要写成函数形式，返回数据对象的形式）和methods属性。然后vue实例对象，只剩下el属性。接着，在vue实例里，使用components属性注册这个对象为组件（即 components: { App}），并在vue实例里使用template属性，把这个组件作为模板内容（即template:<code>&lt; App/&gt;</code>，&lt; App&#x2F;&gt;相当于&lt; App&gt;&lt; &#x2F;App&gt;）。同样地，最后也是可以正常执行html文件。</p>
<p>　　为了更进一步地简化，我们在src文件夹里面创建vue文件夹，并创建一个js文件，我们把刚刚那个组件对象的代码剪切到这个vue文件夹下的s文件并用模块的方法导出（例如export default XX对象），然后在原来main.js的对应部分删除，只需导入这个模块（import ‘App’ from ‘.&#x2F;vue.&#x2F;app.js’）就可以一样使用这个组件了。</p>
<p>　　【.vue文件的封装处理】但是仍存在一个问题，就是在我们vue下的js文件中，模板与JS代码没有分离。所以，我们可以在vue文件夹中创建一个.vue文件（如果使用VScode编译器，会提示安装vetur插件，才能解析我们的.vue文件），.vue文件就是一个vue组件文件，里面包含三大块：template块，script块和style块。然后，我们把之前在.js写的代码内容，对应的写到template块，script块（注意，这个script块中，是通过export default 开头，表示导出这个对象，里面要有name属性（一般与文件名一样））和style块（可以定义我们在template块中的html代码的一些样式）。然后，我们在原来的main.js中引入这个组件（例如import App from ‘.&#x2F;vue&#x2F;App.vue’），而不是先前的那个js文件。</p>
<p>　　此时，回想起之前我们用webpack加载除了js以外的文件，如css文件，会需要一个合适的loader。同样地，当我们加载vue文件时，也是需要一个loader，所以得安装与配置。在这里，我们需要vue-loader（负责加载vue）和vue-template-complier（vue的模板编译），即在终端输入npm install vue-loader vue-template-compiler –save-dev（我们在加载完编译完就不用了，所以是开发时依赖），接着就是webpack.config.js中配置，在rules下添加{ test:&#x2F;.vue$&#x2F;, use:{loader: ‘vue-loader’,}}，此时会报错，说vue-loader缺少一个插件（plugin），由于vue-loader版本（在package.json中查看）在14版本开始，需要额外配置插件。如果不想额外配置插件，我们在package.json修改vue-loader的版本为13.0.0，然后在终端输入npm install（重新根据我们的package.json的版本要求，更新依赖）。最后在重新打包，这个时候就不会报错了。而且在index.html中也没有出错，和我们之前用vue文件夹的js文件的方法结果是等效的。</p>
<p>　　以后的我们是想组件化开发（一般组件名是首字母大写），所以同样的，我们是可以在vue文件夹里面创建别的组件（例如Cpn.vue），然后可以在我们之前写的App.vue里面中使用，即在script块中先引入该组件，在原组件对象内注册该组件；template块使用该组件。最后打包，点开index.html，还是可以使用到该组件。</p>
<p>　　所以以后，我们可以创建一个自定义组件（例如我们的App.vue），其可以引用别的组件（别的组件也是可以引用别的组件），从而形成了一个组件树（其根就是我们自定义组件），每个组件都是独立的，这就是组件化开发。</p>
<p>　　补充1：对于我们的VScode编译器，每次创建vue文件（vue组件）时，都要写template标签，script标签和style标签，很麻烦，我们就可以借助VScode的代码模板的功能，依次点击菜单栏 -文件 - 首选项 - 用户代码片段，然后搜索vue，然后添加我们对应的组件模板，保存。下次创建使用时，直接输入vue+tab键，即可快速创建代码模板了。</p>
<p>　　补充2：如果想简写引用文件的后缀名，如import App from ‘.&#x2F;vue&#x2F;App.vue’简写为import App from ‘.&#x2F;vue&#x2F;App’，需要我们在webpack.config.js中的resolve中添加extension选项（extensions: [‘.vue’]）。</p>
<p>　　15、plugin的使用（BannerPlugin的使用）</p>
<p>　　plugin是插件的意思，通常是用于对某些现有的架构进行扩展。webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。　　</p>
<p>　　loader和plugin区别。loader主要用于转换某些类型的模块或加载，它是一个转换器或加载器。plugin是插件，它是对webpack本身的扩展，是一个扩展器。</p>
<p>　　plugin的使用过程（安装与配置）：首先，通过npm安全需要使用的plugins（某些webpack已经内置的插件不需要安装）。接着就是在webpack.config.js中的plugins中配置插件。</p>
<p>　　下面就简单介绍几个webpack的插件。</p>
<p>　　添加版权的plugin。插件名字为BannerPlugin，属于webpack自带的插件，用于为打包的文件添加版权声明（或者一些说明信息）。</p>
<p>　　具体步骤是：由于该插件是webpack自带的，所以不需要npm安装。所以直接在webpack.config.js里面配置，首先，引入webpack包（const webpack &#x3D; require(‘webpack’)），然后在module.exports对象中，配置Plugins选项（ plugins: [new webpack.BannerPlugin(‘最终版权归ABC所有’) ]）。最后打包，可以发现，在打包后的bundle.js里面的第一行有我们的版权信息（&#x2F;*! 最终版权归ABC所有 *&#x2F;）。</p>
<p>　　16、HtmlWebpackPlugin的使用</p>
<p>　　之前我们使用的index.html是在根目录下的，在真实发布项目时，我们最终是希望将其也打包进dist文件夹内（让打包发布的文件都在一起），最后发布的版本应该是这个dist文件夹内html文件。 这个时候就需要用到HTMLWebpackPlugin插件。</p>
<p>　　HTMLWebpackPlugin插件可以自动生成一个index.html文件（可以指定模板来生成），并且可以将打包的js文件，自动通过script标签插入到body中。</p>
<p>　　这个HTMLWebpackPlugin插件不是webpack自带的，所以得先安装。终端输入npm install html-webpack-plugin –save-dev（开发时依赖）。接着在webpack.config.js配置plugins，首先还是先导入插件（const HtmlWebpackPlugin &#x3D; require(‘html-webpack-plugin’)），修改plugins选项（plugins: [new HtmlWebpackPlugin() ]）。然后打包，结果发现dist目录下生成了index.html文件，并且自动引入了bundle.js文件。此外，由于之前我们需要在body里面创建一个div块并且id为app，即我们vue实例所绑定的html元素，所以我们可以给它一个模板。在原来根目录下的index.html去除之前用script标签引入bundle.js（其实就是把这个index.html当做打包html的模板），接着在plugins: [new HtmlWebpackPlugin()]的括号里面添加这个index.html文件作为模板（ plugins: [ new HtmlWebpackPlugin({template: ‘index.html’})  ）。最后打包，点开dist文件夹内的index.html，没有问题。（注意，如果之前是按照在webpack.config.js里面配置一个路径，需要去掉（&#x2F;&#x2F; publicPath: ‘dist&#x2F;‘），因为此时的index.html是在dist目录下了。）</p>
<p>　　17、UglifyjsWebapckPlugin的使用</p>
<p>　　在项目发布之前，我们必然需要对js等文件进行压缩处理。这里，我们就对打包的js文件进行压缩（原理是通过去除空格，修改变量名为短长度变量名，删掉注释等）。这个使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致。</p>
<p>　　首先安装，在终端输入npm install <a href="mailto:&#117;&#x67;&#x6c;&#x69;&#x66;&#121;&#x6a;&#x73;&#x2d;&#x77;&#x65;&#x62;&#x70;&#x61;&#x63;&#107;&#45;&#x70;&#108;&#117;&#x67;&#105;&#x6e;&#x40;&#49;&#46;&#x31;&#x2e;&#49;">&#117;&#x67;&#x6c;&#x69;&#x66;&#121;&#x6a;&#x73;&#x2d;&#x77;&#x65;&#x62;&#x70;&#x61;&#x63;&#107;&#45;&#x70;&#108;&#117;&#x67;&#105;&#x6e;&#x40;&#49;&#46;&#x31;&#x2e;&#49;</a> –save-dev。接着配置，在webpack.config.js中先导入插件（const Uglifyjswebpack &#x3D; require(‘uglifyjs-webpack-plugin’) ），然后添加plugins（new Uglifyjswebpack() ）。最后打包，生成的bundle.js是压缩的了，里面没有什么格式，“紧紧靠在一起”，“像丑化了一样”（所以才是uglifyjs嘛）。但是不影响index.html的正常展示。</p>
<p>　　18、dev-server搭建本地服务器</p>
<p>　　webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架（可以服务于我们某个文件夹，实时监听其中代码的改变，根据配置，在内存里（非文件夹里）生成一些文件，待输入npm run build构建时，才真正把文件放入文件夹磁盘里），可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p>
<p>　　使用前，先安装。终端输入：npm install –save-dev <a href="mailto:&#119;&#x65;&#x62;&#x70;&#x61;&#x63;&#107;&#x2d;&#100;&#x65;&#x76;&#x2d;&#x73;&#101;&#x72;&#118;&#x65;&#114;&#64;&#x32;&#46;&#x39;&#46;&#x33;">&#119;&#x65;&#x62;&#x70;&#x61;&#x63;&#107;&#x2d;&#100;&#x65;&#x76;&#x2d;&#x73;&#101;&#x72;&#118;&#x65;&#114;&#64;&#x32;&#46;&#x39;&#46;&#x33;</a>（开发时依赖，并且版本是对应于我们的webpack版本，也是脚手架CLI2的版本） 。接着就是配置，在webpack.config.js中的module.exports中添加devServer对象（根据设定的选项，指定服务的文件夹，是否需要实时监听，端口号，H5history模式否等），这里我们配置基础简单的模式：devServer:{ contentBase:’.&#x2F;dist’, inline: true }（服务的是dist文件夹，需要实时监听）。接着就是在本地跑服务，先在package.json中配置scripts脚本”dev”: “webpack-dev-server”（千万别输入webpack-dev-server，因为在终端输入这个都是在全局上搜索执行的，而我们是装是本地的（没有带-g））。最后，在终端输入npm run dev 运行我们的服务，此时，我们点开终端输出的网络地址<a href="http://localhost:8080/%EF%BC%8C%E5%AE%9E%E6%97%B6%E5%86%8D%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%97%B6%EF%BC%8C%E8%AF%A5%E7%BD%91%E9%A1%B5%E4%B9%9F%E6%98%AF%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E6%9C%80%E6%96%B0%E7%9A%84%E4%B8%9C%E8%A5%BF%E3%80%82%E8%BF%99%E4%B8%AA%E5%B0%B1%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/，实时再修改代码，保存时，该网页也是实时显示最新的东西。这个就相当于是一个本地测试。</a></p>
<p>　　当我们测试满意了，就可以执行npm run build 进行打包构建。</p>
<p>　　此外，由于上述方法需要手动点开本地服务连接，如果我们希望一运行本地服务就打开浏览器，可以改为”dev”: “webpack-dev-server –open”。</p>
<p>　　19、配置文件的分离</p>
<p>　　在开发阶段，其实我们是不需要Uglifyjswebpack插件压缩我们的js代码（真正发布阶段才用），因为不好调试。在发布阶段，devServer是不需要的。也就是说，在webpack中，我们希望有些插件或配置是想在打包时使用，运行发布的时候不使用，或者是反过来。这个时候需要我们对它们进行分离。</p>
<p> 　首先，我们在根目录下创建build文件夹，里面创建base.config.js，prod.config.js，dev.config.js，分别代表着基本公共使用的配置代码，生产产品的配置代码和开发调试的配置代码。例如我们之前使用到的大部分配置是放在base.config.js（除了丑化js压缩插件和本地服务devServer），dev.config.js放入本地服务devServer配置，prod.config.js放入丑化js压缩插件配置。</p>
<p>　　也就是说最终编译生产时，我们需要的配置文件是base.config.js和prod.config.js。在开发调试的时候，需要的配置文件是base.config.js和dev.config.js。</p>
<p>　　由于我们需要一些工具将其合并。使用webpack-merge（merge合并）插件，首先安装，在终端输入npm install webpack-merge –save-dev。然后在prod.config.js引入webpack.merge，并且引入base.config.js，把模块导出写成如下图所示：　　<img src="/2019/12/15/blog31/1803687-20191221154906690-1599906316.png" alt="img"></p>
<p>　　同理，dev.config.js也是类似处理：　<img src="/2019/12/15/blog31/1803687-20191221155129664-213019665.png" alt="img"></p>
<p> 　　现在，是把原来一个webpack.config.js文件分离为三个文件，实现了生产配置与开发配置的分离。</p>
<p>　　此时，可以把原来的webpack.config.js文件删除。并且在package.json中修改scripts脚本（因为原来的webpack配置文件变成了build文件夹下的文件，所以是需要重新指定配置对象），修改build和dev，</p>
<p>  “build”: “webpack –config .&#x2F;build&#x2F;prod.config.js”,</p>
<p>  “dev”: “webpack-dev-server –open –config .&#x2F;build&#x2F;dev.config.js”</p>
<p>　　注意，由于此时的配置文件是在build文件夹下的（之前的配置文件是在根目录下的），最后我们打包是想把文件打包进根目录下的dist文件夹内，所以需要修改模块打包的输出路径，例如把path: path.resolve(__dirname, ‘dist’)改成path: path.resolve(__dirname, ‘..&#x2F;dist’)（即上一级目录（根目录）的dist文件夹下），否则打包生成的会是在build文件夹的dist文件夹内。</p>
<p>　　此时指定了生产配置和开发配置。最后像之前一样，终端输入npm run build就可以生产版本配置，npm run dev可以打开本地服务进行开发调试。</p>
<p>　　 </p>
<p><strong>webpack部分终于结束了，可以回归我们的vueCLI脚手架的“正题”了:)</strong></p>
<p><strong>（在我下一个博客里：<a href="https://www.cnblogs.com/xinkuiwu/p/12060776.html">前端框架Vue自学之Vue CLI（五）</a>）</strong></p>
]]></content>
      <categories>
        <category>vue</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>webapck</tag>
        <tag>配置</tag>
        <tag>vue配置</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之前端模块化（补充）</title>
    <url>/2019/12/14/blog30/</url>
    <content><![CDATA[<p>目标：了解一下前端模块化的知识</p>
<p>内容：用于记录一些心得。（前端模块化）</p>
<span id="more"></span>

<h3 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h3><h3 id="一、JavaScript原始功能"><a href="#一、JavaScript原始功能" class="headerlink" title="一、JavaScript原始功能"></a>一、JavaScript原始功能</h3><p>　　在网页开发的早期，JS作为一种脚本语言，做一些简单的表单验证或者动画实现，那个时候代码还是很少的，一般是直接写在&lt; script&gt;标签中。</p>
<h3 id="二、存在问题"><a href="#二、存在问题" class="headerlink" title="二、存在问题"></a>二、存在问题</h3><p>　　随着AJAX异步请求的出现，慢慢形成了前后端的分离。客户端需要完成的事情越来越多，代码量也是与日俱增。为了应对代码量的剧增，我们通常会将代码组织在多个JS文件中，进行维护。但是这种维护方式，依然不能避免一些灾难性的问题。比如说全局变量同名问题（因为一个大的项目是多人完成的，需要导入每个人写的代码汇总）；另外，这种代码的编写方式对JS文件的依赖顺序几乎是强制性的，也无法避免全局变量同名问题。</p>
<h3 id="三、模块化雏形（早期的模块化）"><a href="#三、模块化雏形（早期的模块化）" class="headerlink" title="三、模块化雏形（早期的模块化）"></a>三、模块化雏形（早期的模块化）</h3><p>　　之前解决上述的问题的方法有匿名函数，类似于(function () {} )()的格式。但是代码的复用性又不得不降低了，甚至不可复用。所以在ES5中可以通过把需要可复用的代码添加到一个对象，通过匿名函数的返回这个对象（使用模块作为出口，暴露到外面的属性和方法，不需要暴露的直接定义），并用某个变量去接收这个返回对象，这个变量就是模块。然后在别的文件导入这个模块，就可以使用这个模块的代码了。</p>
<p>　　幸运的是，前端模块化开发以及有了很多既有的规范，以及对应的实现方案。</p>
<p>　　常见的模块化规范有：CommonJS（通过node实现），AMD，CMD，也有ES6的Modules。（tips：模块化包括导出和导入）</p>
<h3 id="四、CommonJS（webpack也使用这个，因为也是依赖node环境）"><a href="#四、CommonJS（webpack也使用这个，因为也是依赖node环境）" class="headerlink" title="四、CommonJS（webpack也使用这个，因为也是依赖node环境）"></a>四、CommonJS（webpack也使用这个，因为也是依赖node环境）</h3><p>　　CommonJS的导出：（注意是要在node环境下，要用node底层解析module.exports）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">flag</span>: ture,</span><br><span class="line">    <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　CommonJS的导入：（moduleA是刚刚导出文件的文件名（可加路径））</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123;test, demo, flag&#125; = <span class="built_in">require</span>(<span class="string">&#x27;moduleA&#x27;</span>)</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> _mA = <span class="built_in">require</span>(<span class="string">&#x27;moduleA&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> test = _mA.<span class="property">test</span>;</span><br><span class="line"><span class="keyword">let</span> demo = _mA.<span class="property">demo</span>;</span><br><span class="line"><span class="keyword">let</span> flag = _mA.<span class="property">flag</span>;</span><br></pre></td></tr></table></figure>

<h3 id="五、ES6的Modules"><a href="#五、ES6的Modules" class="headerlink" title="五、ES6的Modules"></a>五、ES6的Modules</h3><p>　　export（导出）&#x2F;import（导入）</p>
<p>　　当我们在引入别人JS文件时，用&lt; script src&#x3D;”xxx.js’&gt;，当我们在script标签下使用type&#x3D;‘module’时，这意味着我们是按照模块化使用这个xxx.js文件。相当于这个文件是在一个模块内，有着自己独立的作用域。</p>
<p>　　export（导出了模块对外提供的接口）。可以导出变量，函数，类（ES6提供了class类）。或者是导出一个默认的东西，让导入者自己来命名（export default），这样的好处就是导入者可以不必知道要导入的模块代码的名字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;coco&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line"><span class="comment">// let name = &#x27;coco&#x27;</span></span><br><span class="line"><span class="comment">// let age = 18 </span></span><br><span class="line"><span class="comment">// export &#123;name, age&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">logInfo</span> (value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am a class&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// export logInfo, Person&#125;</span></span><br><span class="line"><span class="comment">//默认导出只能有一个</span></span><br><span class="line"><span class="keyword">const</span> address = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> address</span><br></pre></td></tr></table></figure>

<p>　　import（导入，加载对应模块）。导入之后就可以对应使用了。通过<em>可以导入模块中所有的export变量，但是通常情况下我们需要个</em>用as起一个别名，方便后续使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//func.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">&#x27;info.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span>&#123;logInfo, <span class="title class_">Person</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;info.js&#x27;</span></span><br><span class="line"><span class="comment">//默认导出adress并命名为add</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;info.js&#x27;</span></span><br><span class="line"><span class="comment">//import * as info from &#x27;./info&#x27;</span></span><br><span class="line"><span class="comment">//console.log(info.name, info.age)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue</category>
        <category>模块化</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>模块化</tag>
        <tag>导入</tag>
        <tag>导出</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6标准入门（阮一峰）-阅读记录与心得</title>
    <url>/2019/09/19/blog3/</url>
    <content><![CDATA[<h3 id="目标：学习ES6标准，并能灵活使用ES6标准的JavaScript"><a href="#目标：学习ES6标准，并能灵活使用ES6标准的JavaScript" class="headerlink" title="目标：学习ES6标准，并能灵活使用ES6标准的JavaScript"></a>目标：学习ES6标准，并能灵活使用ES6标准的JavaScript</h3><p>　　（其免费电子书为：<a href="http://es6.ruanyifeng.com/#docs/string">http://es6.ruanyifeng.com/#docs/string</a> ）</p>
<h3 id="内容：（都是新的内容，需要结合ES5的理解去看，这样看得比较有意思）"><a href="#内容：（都是新的内容，需要结合ES5的理解去看，这样看得比较有意思）" class="headerlink" title="内容：（都是新的内容，需要结合ES5的理解去看，这样看得比较有意思）"></a>内容：（都是新的内容，需要结合ES5的理解去看，这样看得比较有意思）</h3><h3 id="第一阶段：准备阶段"><a href="#第一阶段：准备阶段" class="headerlink" title="第一阶段：准备阶段"></a>第一阶段：准备阶段</h3><p>1、第一章，入门准备。主要讲了ES6简介与ECMAScript历史（这部分快速阅读），重点掌握ES6环境具体部署，建议使用Babel转码器。在配置Babel转码器之前，需要下载安装node环境，可以适当理解包管理的概念。(也可以适当理解webpack的用法)</p>
<h3 id="第二阶段：基础：新特性"><a href="#第二阶段：基础：新特性" class="headerlink" title="第二阶段：基础：新特性"></a>第二阶段：基础：新特性</h3><p>1、第二章，let和const命令。let是ES6新增的命令。注意let改进了ES5中很多特性，let要求我们养成先声明再使用变量的习惯（为了避免暂时性死区），也提出了ES5没有的块作用域。还有const，声明常量就必须初始化，还有ES6声明变量的6种方法（ES5中的var和function，还有ES6本章的let和const，及后面章节的import和class），ES6中的顶层对象和global对象。</p>
<p>2、第三章，变量的解构赋值。主要讲述ES6中各自变量的解构赋值格式与说明（可能有一些基于ES6的新方法、函数的解构赋值，可以先看，有个思路，后面章节遇到对应部分在回过头看这部分），末节总结的应用场景可以细细品味。</p>
<p>3、第四章，字符串的扩展。牢记通常的用法，例如padStart()用于为数值补全指定位数，或者用于提示字符串格式。模板字符串，用反引号把变量嵌入（变量名写在${}中就行，大括号内部理解为要执行的JS代码），适用于函数，对象。还有一些模板字符串的扩展例子。</p>
<p>4、第五章，正则的扩展。ES6添加了许多正则修饰符，如u,i,y,s等；还有添加了后行断言（提案）；具名组匹配（提案）。</p>
<p>5、第六章，数值的扩展。数值（number）的一些方法，如进制转换，有限判断，NAN判断，数值类型转换，整型数判断（3和3.0看做一样的），EPSILON值（用于表示一个可以接受的误差范围，例如0.1+0.2与0.3的差值小于EPSILON就可以认为是相等），安全整数（整型数的范围的上下限）及其判断。此外，还有Math对象的扩展，新增许多静态方法（即只能调用Math对象使用），包括.trunc()，.sign()，.imul()（用于很大数值乘法，使其低位数值精确），.hypot()（返回所有参数的平方和的平方根）和对数方法、指数方法（<strong>，</strong>&#x3D;）等。（注：对于没有部署某个方法的环境，我们应该学会自己去编写相应功能的代码）</p>
<p>6、第七章，函数的扩展。ES6中，可以直接在函数参数中设置默认值（是默认声明了，所以不能在用let和const再次声明），此外，函数可以与（对象的）解构赋值的默认值结合使用。rest参数（剩余参数），严格模式（在ES6中，如果函数参数使用了默认值、解析赋值、扩展运算符，则函数内部就不能显式设定严格模式），函数的name属性。箭头函数，注意一些在箭头函数中的事项，例如箭头函数中的this对象就是定义时所在的对象，而不是使用时所在的对象（根本原因在于箭头函数内部没有this对象，而是引用外层的this），ES7提案中的函数绑定（Babel转码器已经支持）。尾调用优化，尾调用是指某个函数的最后一步（不一定是出现在函数的尾部）是“纯粹地”调用另一个函数；而尾调用优化就是只保留内部函数的调用帧，节省内存。尾递归，尾调用自身，相当于普通的递归，由于只存在一个调用帧，不会发生“栈溢出”，例如用尾调用写阶乘函数，Fibonacci数列等（好好理解，很有意思）。ES6也明确规定，ES的实现都必须部署“尾调用优化”，即在ES中，只要使用尾递归，就不会发生栈溢出。递归的本质就是一种循环操作，也这是尾调用的重要性。</p>
<p>7、第八章，数组的扩展。扩展运算符（…）及其应用（如将函数参数转为一个参数序列，合并数组，与解构赋值结合，用于函数的多个返回值（相当于可以返回数组或对象），字符串转换为数组，任何Iterator接口对象，如Map,set结构，Generator函数都可以用扩展运算符转为真正的数组）。Array.from()方法可以将类似数组的对象和可遍历的对象转为真正的数组，并且相比于扩展运算符，其可以提供map功能。Array.of()方法基本可以代替Array(),new Array(）将一组值转换为数组。此外，还有数组实例的方法，例如copyWithin(),find(),findIndex(),fill(),还有ES6的新方法：entries(),keys(),values()。数组实例的includes()方法，数组的空位，在ES6中上面的方法会将空位处理为undefined。</p>
<p>8、第九章，对象的扩展。对象中的属性和方法可以简写，但属性名表达式和简洁表示法不能同时使用。对象中的方法也有name属性，Object.is（）方法与严格相等&#x3D;&#x3D;&#x3D;类似，但有所不同。Object.assign()是一种浅复制，其常见用途有为对象添加属性、方法，克隆对象，合并多个对象，为属性指定默认值（但注意是浅复制）。对象有属性的描述对象，控制着对象属性的行为。属性的可枚举性及其遍历方法。_proto_属性，Object.setPrototypeOf()，Object.getPrototypeOf()，Object.keys()，Object.values()，Object.entries()。对象的扩展运算符（…），可用于解构赋值（其复制也是浅复制）。Object.getOwnPropertyDescriptors()。Null传导运算符。</p>
<p>9，第十章，Symbol。ES6中引入了一种新的原始数据类型Symbol，表示独一无二的值。Symbol值通过Symbol函数生成，对象的属性名除了用字符串，也可以使用Symbol。Symbol非对象，其类似于字符串的数据类型。常量也可以使用Symbol值。Symbol适合消除魔术字符串，所谓魔术字符串是指在代码中多次出现，与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串。Object.getOwnProperySymbols方法可以获取指定对象的所有Symbol属性名，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和Symbol键名。通常，利用Symbol特性为对象定义一些非私有但又希望只用于内部的方法。Symbol.for()，Symbol.keysFor()。模块的SingleTon模式，其指的是调用一个类并且在任何时候都返回同一个实例。内置的Symbol值，除了自定义使用的Symbol值，ES6提供了11个内置的Symbol值，指向语言内部使用的方法。Symbol.hasInstance，Symbol.isConcatSpreadable，Symbol.species，Symbol,match，Symbol.replace，Symbol.search，Symbol.split，Symbol.iterator，Symbol.toPrimitive，Symbol.toStringTag，Symbol.unscopables。</p>
<p>10、第十一章，Set和Map数据结构。ES6提供了新的数据结构–Set（集合），它类似于数组，但是成员的值都是唯一的，没有重复。Set本身是一个构造函数，用来生成Set数据结构。set结构的属性和方法（操作方法和遍历方法）。WeakSet结构，其与Set结构类似，也是不重复的值的集合，区别在于：WeakSet的成员只能是对象；WeakSet中的对象都是弱引用，如果其他对象都不在引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象是否还存在于WeakSet之中，WeakSet是不可遍历的。WeakSet的一个用处是存储DOM节点，而不用担心这些节点从文档移除时会引发内存泄露。JavaScript对象本质上是键值对的集合（Hash结构），但是只能用字符串作为键，这给它的使用带来了很大的限制。为了解决这个问题，ES6提供了Map数据结构，它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当做键。相当于Object结构提供了“字符串–值”的对应，Map结构提供了“值–值”的对应，是一种更完善的Hash结构实现。Map的键实际上市和内存地址绑定的，只要内存地址不一样，就视为两个键，这就可以解决同名属性碰撞（clash）的问题。如果Map的键是一个简单类型的值（数字、字符串、布尔值），只要两个值严格相等，Map就将其视为一个键，包括0和-0（NAN不严格等于自身，但是也Map视为同一个值）。Map结构的实例的属性和操作方法，遍历方法。Map与数组，对象，JSON的相互转化。WeakMap结构，与Map结构类似，也用于生成键值对的集合，区别在于WeakMap只接受对象作为键名（null除外）；WeakMap的键名所指向的对象不计入垃圾回收机制。WeakMap同样是为了解决内存泄漏问题而诞生的。WeakMap弱引用的只是键名而不是键值，键值依然是正常引用的。此外，WeakMap适合实现注册监听事件的listener对象和部署私有属性。</p>
<p>11、第十二章，Proxy。Proxy(代理器）用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。Proxy可以理解成在目标对象前架设一个“拦截”层，外界对该对象的访问都必须先通过这层拦截，因此提供了一种机制可以对外界的访问进行过滤和改写。ES6原生提供Proxy构造函数，用于生成Proxy实例。要使Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作。拦截方法有get()，set()，has()，deleteProperty()，ownKeys()，个tOwnPropertyDescriptor()，defineProperty()，preventExtensions()，getPrototype()，isExtensible()，setPrototypeOf()，apply()，construct()。利用Proxy，可以将读取属性的操作（get）转变为执行某个函数，从而实现属性的链式操作。例如可以用get拦截实现一个生成各种DOM节点的通用函数dom。如果一个属性不可配置或者不可写，则该属性不能被代理，通过Proxy对象访问该属性将会报错。而set()可以保证一些属性的输入值范围符合要求的（相当于数据验证的一种实现方法）。利用set()还可以实现数据绑定，即每当对象发生变化时，会自动更新DOM。当对对象设置内部属性时，下划线命名属性之外，可以结合get()和set()，能够防止这些内部属性被外部读、写。同样地，如果对象某个属性不可写不可配置，set不能改变该属性，会报错。apply()拦截函数的调用、call和apply操作。has()用来拦截HasProperty操作（注意不是HasOwnProperty），且对in循环生效。has方法当对象不可配置或禁止扩展时，拦截会出错。has拦截对for…in 循环不生效。construct()用于拦截new命令。deleteProperty方法用于拦截delete操作（若不可配置则会报错）。defineProperty方法拦截了Object.defineProperty操作。getOwnPropertyDesciptor方法拦截Object.getOwnPropertyDesctiptor()，返回一个属性描述对象（值、可读，枚举，配置）或者undefined。getPrototypeOf方法主要用来拦截获取对象原型。isExtensible方法拦截Object.isExtensible操作（该方法有一个强限制，它的返回值必须与目标对象的isExtensible属性保持一致，否则抛出错误）。ownKeys方法用来拦截对象自身属性的读取操作。preventExtensions方法拦截Object.preventExtensions()，返回一个布尔值（只有目标对象不可扩展时，才能返回true，否则报错）。setPrototypeOf方法用于拦截Object.setPrototypeOf方法。Proxy.revocable()返回一个可取消的Proxy实例（其一个使用场景是，目标对象不允许直接方法，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问）。虽然Proxy可以代理针对目标对象的访问，但不做任何拦截的情况下无法保证与目标对象的行为一致，主要在于目标对象内部的this关键词会指向Proxy代理，此时，可以用this绑定原始对象可以解决这个问题。Proxy适用于编写Web服务的客户端，也可以实现数据库的ORM层。</p>
<p>12、第十三章，Reflect。Reflect对象与Proxy对象一样，也是ES6为了操作对象而提供的新的API。Reflect对象设计的目的是将Object对象的一些明显属于语言内部的方法（如Object.defineProperty）放到Reflect对象上；修改某些Object方法的返回结果（如把返回抛出错误变为返回false）；让Object操作都变成函数行为；Reflect对象的方法与Proxy对象方法一一对应（例如可以确保原生行为正常执行，然后再部署额外的功能）。Reflect对象一共有13个静态方法，大部分与Object对象的同名方法的作业是相同的（在报错方法有所不同），且与Proxy对象的方法是一一对应的。Reflect.get方法查找并返回target对象的name属性。Reflect.set方法设置target对象name属性等于value（会触发Proxy.defineProperty拦截）。Reflect.has方法对应name in obj 中的in运算符。Reflect.deleteProperty方法等同于delete obj[name]，用于删除对象的属性。Reflect.construct方法等同于new target()，提供了一种不使用new来调用构造函数的方法。Reflect.getPrototypeOf方法用于读取对象的_proto_属性，对应Object.getPrototypeof(obj)。Reflect.setPrototypeOf方法用于读取对象的_proto_属性，对应Object.setPrototypeof(obj, newProto)。Reflect.apply方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。Reflect.defineProperty方法基本等同于Object.defineProperty，用于为对象定义属性（作者提出，后者会逐渐被废除，请开始使用前者代替后者）。Reflect.getOwnPropertyDescriptor基本等同于Object.getOwnPropertyDescriptor，用于获取指定属性的描述对象（也是要使用前者）。Reflect.isExtensible方法等同于Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。Reflect.preventExtensions对应Object.preventExtensions方法，用于使一个对象变为不可扩展。Reflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。实例：使用Proxy实现观察者模式（即使用Proxy编写observable和observe这两个函数），思路是，observable函数返回一个原始对象的Proxy代理，拦截赋值操作，触发充当观察者的各个函数。所谓观察者模式（Observer mode）指的是函数自动观察数据对象的模式，一旦对象有变化，函数就会自动执行。</p>
<p>13、第十四章，Promise对象。Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。ES6将其写入了语言标准，统一了用法并原生提供了Promise对象。Promise，简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。Promise对象可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理。Promise对象有两个特点：对象的状态不受外界影响；一旦状态改变就不会再变。Promise对象代表一个异步操作，有3种状态：Pending、Fulfilled和Rejected。Promise对象的状态改变只有两种可能：从Pending变为Fulfilled和从Pending变为Rejected。只有这两种情况发生，状态就凝固了，不会再变，称为Resolved（已定型）。有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。Promise一些缺点：无法取消，一旦新建它就会立即执行，无法中途取消；如果不设置回调函数，Promise内部抛出的错误不会反应到外部；当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。如果某些事件不断地反复发生，使用Stream模式比部署Promise更好。ES6规定，Promise对象是一个构造函数，用来生成Promise实例。Promise基本用法，Promise.prototype.then()，Promise.prototype.catch()，Promise.all()，Promise.race()，Promise.resolve()，Promise.reject()。ES6中的Promise的API提供的方法不多，可以自己部署一些有用的方法（例如本书部署了done()和finally()）。应用有：加载图片；Generator函数与Promised的结合。实际开发中不知道或者不想区分函数f是同步还是异步，有两个办法：使用async函数和使用new Promise()。也有一个Promise.try()（提案）。</p>
<p>14、第十五章，Iterator和for···of循环。ES6中，Array，Object，Map和Set可以表示“集合”的数据结构，它们需要一种统一的接口机制来处理所有不同的数据结构。遍历器Iterator就是这样一种机制。它是一种接口（可遍历的），为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署了Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。Iterator的3个作用：为各种数据结构提供一个统一、便捷的访问接口；使得数据结构的成员能够按某种次序排列；ES6新的遍历命令for···of循环（遍历器对象本质是一个指针对象，通过调用只针对新的next方法实现遍历）。原生具备Iterator接口的数据结构（即原生部署了Symbol.iterator属性）有：Array，Map，Set，String，TypedArray，函数的arguments对象，NodeList对象。外此之外，其他数据结构（主要是对象）的Iterator接口都需要自己在Symbol.iterator属性上面部署，这样才会被for&#96;&#96;&#96;of循环遍历。调用Iterator接口的场合：解构赋值；扩展运算符（相当于，只要某个数据结构部署了Iterator接口，就看对它使用扩展运算符，将其转化为数组）；yield*；其他场合（由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合其实都调用了遍历器接口）。Iterator接口与Generator函数。遍历器对象除了必须具有的next方法，还可以部署两个可选的return方法和throw方法。（for··in循环可以遍历键名）</p>
<p>15、第十六章，Generator函数的语法。Generator（“生成器”）函数是ES6提供的一种异步编程解决方案，语法上，可以把它理解成一个状态机，封装了多个内部状态。执行Generator函数会返回一个遍历器对象（即为遍历器对象生成函数）。返回的遍历器对象可以一次遍历Generator函数内部的每一个状态。形式上，Generator函数是一个普通函数，有两个特征：function命令与函数名之间有一个星号<em>（只要星号是在function和函数名之间的任何位置都行，一般是用function</em> name()）；内部使用yield（“产出”）语句定义不同的内部状态。调用Generator函数后，函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，即遍历器对象，必须调用遍历器对象的next方法，使得指针移向下一个状态。换而言之，Generator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行。Generator函数其实就是提供了一种可以暂停执行的函数，yield语句就是暂停标志（相当于JS提供了手动的“惰性求值”的语法功能）。Generator函数可以通过多个yield生成多个值（返回值），但一个函数体里面，至多只能通过return返回一个值。如果Generator函数中没有使用yield语句，这时变为一个单纯的暂缓执行函数（只有调用一次next方法才能执行Generator函数）。yield只能用在Generator函数里面（其for循环里面也行）；如果用在另一个表达式中，要放在圆括号里面（若是作为函数参数或赋值表达式右边，可以不加括号）。可以把Generator赋值给对象的Symbol.iterator属性，使其对象具有Iterator接口。Generator函数执行后，返回一个遍历器对象，其本身具有Symbol.iterator属性，执行后返回自身。yield语句本身没有返回值（或者理解为总是返回undefined），next方法可以带有一个参数，该参数当做上一条yield语句的返回值（相当于可以在Generator函数运行的不同阶段从外部向内部注入不同的值，从而调整函数行为）。for<code>of循环可以自动遍历Generator函数生成的Iterator对象，且此时不再需要调用next方法。利用for</code>of循环，可以写出遍历任意对象的方法，由于原生的JS对象没有遍历接口，无法使用for&#96;&#96;&#96;of，通过Generator函数为它加上这个接口后就可以用了（另一种方法：将Generator函数加到对象的Symbol.iterator属性上）。Generator.prototype.throw()与全局的throw命令；Generator.prototype.return()；yield*（用来在一个Generator函数里面执行另一个Generator函数，表明返回的是一个遍历器对象或者是有Iterator接口的数据结构都行）；作为对象属性的Generator函数；Generator函数this。Generator与状态机；Generator与协程（协作的线程），协程既可以单线程实现（一种特殊的子例程），也可以多线程实现（一种特殊的线程）。传统的“子例程”采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。协程是多个线程（单线程情况即多个函数）可以并行执行，但只有一个线程（或函数）出于正在运行的状态，其他线程（或函数）都处于暂停态，线程（或函数）之间可以交换执行权。从实现上看，在内存中子例程只使用一个栈，而协程是同时存在多个栈，但只有一个栈是在运行态，即协程是以多占用内存为代价实现多任务的并行运行。JS是单线程语言，只能保持一个调用栈，引入协程以后，每个任务可以保持自己的调用栈。Generator函数被称为“半协程”，只有Generator函数的调用者才能将程序的执行权还给Generator函数，如果将Generator函数当做协程，完全可以将多个需要需互相协作的任务写成Generator函数，它们之间使用yield语句交换控制权。Generator的应用：异步操作的同步化表达；控制流管理；部署Iterator接口；作为数据结构。</p>
<p>16、第十七章，Generator函数的异步应用。异步编程对JS语言来说非常重要，由于JS语言的执行环境是“单线程”的，如果没有异步编程，根本无法使用，不然会造成卡死。ES6以前，异步编程的方法大概有4种：回调函数，事件监听，发布&#x2F;订阅，Promise对象。Generator函数将JS异步编程带入了一个全新的阶段。所谓“异步”，简单来说就是一个任务不是连续完成的，可以理解成任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备后再回过头执行第二段。相应地，连续执行的叫做同步。所谓回调函数（callback），就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务时便直接调用这个函数。回调函数本身并没有问题，问题出在多个回调函数的嵌套上，代码不是纵向发展的，而是横向发展，这样的多个异步操作形成了强耦合，只要有一个操作需要修改，其上层和下层的回调函数就得修改（callback hell）。Promise对象就是为了解决这个问题而被提出的，这是一种新的写法，允许将回调函数的嵌套改写成链式调用。Promise的最大问题是代码冗余，原来的任务被Promise包装后，无论什么操作，一眼看去都是许多then的堆积，原来的语义变得很不清楚。传统的编程语言中早有异步编程的解决方案，其中一种叫做协程（coroutine），即多个线程相互协作，完成异步任务。在Generator函数中的yield命令（相当于交出函数的执行权）就是异步两个阶段的分界线，用Generator函数写异步编程的最大优点：代码的写法非常像同步操作（如果去除yield命令，几乎一模一样）。Generator函数就是一个封装的异步任务（异步任务的容器）。异步操作需要暂停的地方都用yield语句注明，next方法的作用是分阶段执行Generator函数，每次调用next方法都会返回一个对象，表示当前阶段的信息（value属性和done属性）。Generator函数还有两个特性使其可以作为异步编程的完成解决方案：函数体内的数据交换（value,next(参数)）和错误处理机制（try···catch···）。错误代码与处理错误的代码实现了时间和空间上的分离，这对于异步编程无疑是十分重要的。Generator函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。Thunk函数是自动执行Generator函数的一种方法。参数的求值策略（函数的参数到底应该在何时求值），一种意见是“传值调用”（call by value），C语言就是采用这种策略；另一种意见是“传名调用”（call by name），Haskell语言采用这种策略。两者各有利弊。编译器的“传名调用”的实现往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就称为Thunk函数，可以用来替代某个表达式。JavaScript语言是传值调用，他的Thunk函数含义有所不同。在JS中，Thunk函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数。任何函数只要参数有回调函数，就能写成Thunk函数的形式。生产环境中的转换器建议使用Thunkify模块（源码中设计了，回调函数只运行一次，这样方便与Generator函数结合使用）。在ES6中，Thunk函数可以用于Generator函数的自动流程管理。yield命令用于将程序的执行权移除Generator函数，可以使用Thunk函数，在其回调函数里面将执行权交还给Generator函数。Thunk函数的自动流程管理。自动执行的关键是，必须有一种机制自动控制Generator函数的流程，接收和交还程序的执行权。回调函数可以做到这一点（将异步操作包装成Thunk函数），Promise对象也可以做到（将异步操作包装成Promise对象）。co模块，使用co模块无序编写Generator函数的执行器，co函数返回一个Promise对象，因此可以用then方法（交回执行权）添加回调函数。co模块其实就是将两种自动执行器包装成一个模块，使用co的前提是Generator函数的yield命令只能是Thunk函数或Promise对象。co支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成才进行下一步。实例：处理Stream。</p>
<p>17、第十八章，async函数。ES2017标准引入了async函数，使得异步操作变得更加方便，async就是Generator函数的语法糖（计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会）。async函数对Generator函数的改进体现在以下4点：内置执行器；更好的语义；更广的适用性；返回值是Promise对象。用法；语法：难点在于错误处理机制。async函数的实现原理就是将Generator函数和自动执行器包装在一个函数里。实例：按顺序完成异步操作。异步遍历器（提案）：为异步操作提供原生的遍历器接口，即value和done两个属性都是异步产生的（之前是同步产生的）。异步遍历器与同步遍历器的最终行为是一致的，只是会先返回Promise对象，作为中介。for<code>await</code>of。异步遍历器的设计目的之一，就是使Generator函数处理同步操作和异步操作时能够使用同一套接口。JS4种函数形式：普通函数，async函数，Generator函数和异步Generator函数。</p>
<p> 18、第十九章，Class的基本语法。ES6引入了Class（类）这个概念作为对象的模板。通过class关键字可以定义类。基本上，ES6中的class可以看做只是一个语法糖，它的绝大部分功能，ES5都可以做到，class的写法只是让对象原型的写法更加清晰。注意类中的方法不需要加逗号分隔，加了可能会出错。ES6中的类完全可以看作构造函数的另一种写法（类的数据类型就是函数，类本身就指向构造函数）。类的所有方法都定义在类的prototype属性上。在类的实例上调用方法，其实就是调用原型上的方法。类的内部定义的所有方法都是不可枚举的（这点和ES5的行为不一致）。类和模块的内部默认使用严格模式，所以不需要使用use strict指定运行模式。考虑到未来所有的代码其实都是运行在模块之中，所以ES6实际上已经把整个语言都升级到了严格模式下。constructor方法是类的默认方法，通过new命令生成对象实例时自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会默认添加。constructor方法默认返回实例对象（即this），不过完全指定返回另一个对象。类必须使用new来调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。与ES5一样，实例的属性除非显式定义在其本身（即this对象）上，否则都是定义在原型（即class）上。与ES5一样，类的所有实例共享一个原型对象（所以最好不要用实例的_proto_属性为“类”添加方法，因为其会影响class的原始定义）。与函数一样，class也可以使用表达式的形式定义（注意此时的类名字是被赋值的变量&#x2F;常量的名）。采用Class表达式，可以写出立即执行的Class。类不存在变量提升（hoist），这一点与ES5完全不同（因为ES6不会把变量声明提升到代码头部，与继承规则有关，必须保证子类在父类之后定义）。私有方法是常见需求，但ES6不提供，只能通过变通的方法来模拟实现（命名下划线法；将私有方法移除模块法；用Symbol值的唯一性将私有方法的名字命名为一个Symbol值）。ES6也不支持私有属性，目前有一个提案为class加了私有属性（方法是在属性名之前，使用#来表示）。this的指向（要在构造方法中绑定this；使用箭头函数；使用Proxy）。name属性。与ES5一样，在“类”的内部可以使用get和set关键词对某个属性设置存值函数（setter）和取值函数（getter），拦截该属性的存取行为。如果在某个方法之前加上星号，就表示该方法是一个Generator函数。类相当于实例的原型，所有在类中定义的方法都会被实例继承。如果在一个方法前加上static关键字，就表示该方法不会被实例继承，而是直接通过类调用，称为“静态方法”。父类的静态方法可以被子类继承。Class的静态属性和实例属性。new.target属性。ES6为new命令引入了new.target属性，（在构造函数中）返回new命令所作用的构造函数。如果构造函数不是通过new命令调用的，那么new.target会返回undefined，因此这个属性可用于确定构造函数是怎么调用的。</p>
<p>19、第二十章，Class的继承。Class可以通过extends关键字实现继承，这比ES5通过修改原型链实现继承更加清晰和方便。子类必须在constructor方法汇中调用super方法，否则新建实例时会报错（因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工，如果不调用super方法，子类就得不到this对象）。在子类的构造函数中，只有调用super之后才能使用this关键字，否则会报错。Object.getPrototypeOf方法可以用来从子类上获取父类。super关键字可以当做函数使用（代表父类的构造函数），也可以当做对象使用（在普通方法中指向父类的原型对象；在静态方法中指向父类）。在大多数浏览器的ES5实现中，每一个对象都有_proto_属性，指向对应的构造函数的prototype属性。Class作为构造函数的语法糖，同时有prototype属性和_proto_属性，因此同时存在两条继承链。子类的_proto_属性表示构造函数的继承，总是指向父类。子类prototype属性的_proto_属性表示方法的继承，总是指向父类的prototype属性。extends关键字后面可以跟多种类型的值。子类的原型的原型是父类的原型。原生构造函数的继承。原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ES的原生构造函数大致有：Boolean()，Number()，String()，Array()，Date()，Function()，RegExp()，Error()，Object()。原生构造函数的this无法绑定，导致拿不到内部属性（ES5中，原生构造函数是无法继承的）。ES6允许继承原生构造函数定义子类，因为ES6先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。Mixin模式，其是指将多个类的接口“混入”（mix in）另一个类。</p>
<p>20、第二十一章，修饰器。修饰器（Decorator）是一个函数，用来修饰类的行为。ES2017引入了这项功能，目前Babel转码器已经支持。修饰器本质就是编译时执行的函数。修饰器不仅可以修饰类，还可以修饰类的属性。修饰器有注释的作用，此外还能用来进行类型检查（这将是JS代码静态分析的重要工具）。如果同一个方法有多个修饰器，那么该方法会先从外到内进入修饰器，然后由内向外执行。修饰器不能用于函数，因为存在函数提升。core-decorators.js是一个第三方模块，提供了几个常见的修饰器，通过它可以更好地理解修饰器，主要有@autobind,@readonly,@override,@deprecate,@suppressWarnings。使用修饰器实现自动发布事件。在修饰器的基础上可以实现Mixin模式，所谓Mixin模式，就是对象继承的一种替代方案，意为在一个对象中混入另外一个对象的方法。Trait也是一种修饰器，效果与Mixin类似，但是提供了更多功能，比如防止同名方法的冲突、排除混入某些方法、为混入的方法起别名等。目前，Babel转码器已经支持Decorator。</p>
<p>21、第二十二章，Module的语法。在ES6之前，社区指定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上实现了模块功能，完全可以取代现有的CommonJS和AMD规范，称为浏览器和服务器通用的模块解决方案。ES6模块的设计思想是尽量静态化（编译时加载），使得编译时就能确定模块的依赖关系，以及输入和输出的变量（CommonJS和AMD都只能在运行时确定这些东西）。ES6模块不是对象，而是通过export命令显式指定输出的代码，在通过import命令输入。ES6模块是编译时加载，使得静态分析成为可能，能进一步拓展JS的语法，比如引入宏macro和类型检验type system。ES6的模块自动采用严格模式，不管有没有在模块头部加上“use strict”。模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。一个模块就是一个独立文件，该文件的所有变量，外部无法获取，如果希望外部能获取模块内部的某个变量，就必须使用export关键字输出该变量。注意：export命令规定的是对外的接口，必须与模块内部的变量、函数、类建立一一对应关系。export语句输出的接口与其对应的值是动态绑定关系，即通过该接口可以取到模型内部实时的值（这点与CommonJS不同）。export必须处在模块顶层，不能是块级作用域内。import后面的from指定模块文件的位置，可以是相对路径或绝对路径。由于import是静态执行，所以不能使用表达式和变量，只有在运行时才能得到结构的语法结构。除了指定加载某个输出值，还可以使用整体加载（即星号*）来指定一个对象，所有输出值都加载在这个对象上。为了方便用户，使其不用阅读文档就能加载模块，可以使用export default命令为模块指定默认输出，而且一个模块只能有一个默认输出（注意此时的import命令后面不使用大括号）。如果想在一条import语句中同时输入默认方法和其他接口，可以写成：import _,{a1, a2 as a3} from XX。如果在一个模块之中先输入后输出同一个模块，import语句可以与export语句写在一起。模块之间也可以继承。跨模块常量。import是静态加载，导致无法取代Node的require动态加载功能（同步加载），因而有个提案建议引入import()函数，完成动态加载（返回promise对象，异步加载）。import()适用场合：按需加载，条件加载，动态的模块路径。</p>
<p>22、第二十三章，Module的加载实现。浏览器加载，在HTML网页中，浏览器通过script标签加载JS脚本。浏览器允许脚本异步加载，defer和async属性。浏览器加载ES6模块时也使用script标签并且加入type&#x3D;“module”属性（此时，都是异步加载）。ES6模块和CommonJS模块差异：CommonJS模块输出的是一个值的复制，ES6模块输出的是值的引用；CommonJS模块是运行时加载，ES6模块是编译时输出接口。ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。Node加载。目前的解决方案是，将两者分开，ES6模块和CommonJS采用各自的加载方案。在静态分析阶段，一个模块脚本只要有一行import或者export语句，Node就会认为该脚本是ES6模块，否则就为CommonJS模块。如果不输出任何借口，但是希望被Node认为是ES6模块，可以在脚本中加上export {}；语句（表示不输出任何接口的ES6标准写法）。ES6模块中顶层的this指向undefined，CommonJS模块的顶层this指向当前模块。Node采用CommonJS模型格式，模块的输出都定义在module.exports属性上面。在Node环境中，import加载CommonJS模块，Node会自动将module.exports属性当做模块的默认输出。CommonJS模块的输出缓存机制在ES6加载方式下依然有效。采用require命令加载ES6模块时，ES6模块的所有输出接口都会成为输入对象的属性。循环加载（circular dependency）指的是，a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本。对于JS语言来说，常见的两种模块加载CommonJS和ES6在处理循环加载是方法不一样的，结果也不一样。CommonJS的一个模块就是一个脚本文件，require命令第一次加载该脚本时就会执行整个脚本，然后在内存中生成一个对象。CommonJS模块的重要特性是加载时执行，即脚本代码在require的时候就会全部执行。一旦出现某个模块被“循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。ES6模块是动态引用，如果使用import从一个模块中加载变量，变量不会缓存，而是成为一个指向被加载模块的引用，需要开发者保证在真正取值的时候能够取到值。ES6模块转码除了可以使用Babel还可以用ES6 module transpiler将ES6模块转成CommonJS或者AMD模块；SystemJS。</p>
<h3 id="第三阶段：扩展部分"><a href="#第三阶段：扩展部分" class="headerlink" title="第三阶段：扩展部分"></a>第三阶段：扩展部分</h3><p>1、第二十四章，编程风格。块级作用域：用let取代var；在let和const之间，建议优先使用const，尤其是在全局环境中，不应该设置变量，只应设置常量（优点：让阅读代码的人意识不应该修改这个值；防止无意间修改该值导致错误），所有的函数都应该设置为常量。长远来看，JS可能会有多线程的实现，这时let表示的变量只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。字符串：静态字符串一律使用单引号或反引号（用于动态字符串），不适用双引号。解构赋值：使用数组成员对变量赋值时，优先使用解构赋值；函数的参数如果是对象的成员，优先使用解构赋值；如果函数返回多个值，优先使用对象的解构赋值，而不是数组的，有利于以后添加返回值，以及更改返回值的顺序。对象：单行定义的对象，最后一个成员不以逗号结尾，多行定义的对象，最后一个成员以逗号结尾；对象尽量静态化，一旦定义，就不得随意添加新的属性。如果非要添加属性，要用Object.assign()；对象的属性和方法尽量采用简洁表达式。数组：使用扩展运算符···复制数组；使用Array.from方法将类似数组的对象转为数组。函数：立即执行函数可以写成箭头函数的形式；那些需要使用函数表达式的场合尽量使用箭头函数代替，表达简洁，而且绑定了this；箭头函数取代Function.prototype.bind，不应该用self&#x2F;_this&#x2F;that绑定this；简单的、单行的、不会复用的函数用箭头函数写，复杂多行的函数还是用传统方式写；所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数；不要在函数体内使用arguments变量，使用rest运算符···代替；使用默认值语法设置函数参数的默认值。Map结构：只有模拟实体对象时才使用Object，如果只是需要key:value的数据结构，则使用Map，因为Map有内建的遍历机制。Class：总是用Class取代需要Prototype的操作；使用extends实现继承。模块：使用import取代require；使用export取代module.exports；不要同时使用export default和普通的export；不要在模块输入中使用通配符，因为这样可以确保模块中有一个默认输出；如果模块默认输出一个函数，函数名首字母小写，如果是对象，对象名首字母大写。ESLint是一个语法规则和代码风格的检查工具，可用于保证写出语法正确、风格统一的代码。</p>
<p> 2、第二十五章，ECMAScript规格。规格文件是计算语言的官方标准，详细描述了语法规则和实现方法。一般情况下没有必要阅读规格，除非要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解。规格是解决问题的“最后一招”。这对javaScript语言很有必要，因为它的使用场景很复杂，语法规则不统一，各种运行环境的行为不一致，导致奇怪的语法问题层出不穷，查看规格不失为一种最可靠、最权威的终极方法。ES6规格文件一共有26章。对于一般用户而言，除了第4章，其他章节都涉及某一方面的细节，不用通读，只要在用到时查阅相关章节即可。例如相等运算符，数组的空位，数组的map方法等。</p>
<p>3、第二十六章，ArrayBuffer。ArrayBuffer对象、TypedArray视图和DataView视图是JavaScript操作二进制数据的一个接口。这些对象早就存在，属于独立规格，ES6将其纳入ES规格并增加新的方法，它们都以数组的语法处理二进制数据，所以统称为二进制数组（并不是真正的数组，而是类似数组的对象）。二进制数组很像C语言的数组，允许开发者以数组下标的形式直接操作内存，大大增强了JS处理二进制数据的能力，使开发者有可能通过JS与操作系统的原生接口进行二进制通信。ArrayBuffer对象代表原始的二进制数据，TypedArray视图用于读写简单类型的二进制数据，DataView视图用于读写复杂类型的二进制数据。ArrayBuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图读写，视图的作用是以指定格式解读二进制数据。ArrayBuffer也是一个构造函数，可分配一段可以存放数据的连续内存区域。TypedArray是一组构造函数，DataView是一个构造函数。字节序指的是数值在内存中的表示方式。由于x86体系的计算机都采用小段字节序（little endian），相对重要的字节排在后面的内存地址，相对不重要的字节排在前面的内存地址。ArrayBuffer与字符串的互相转换。不同的视图类型所能容纳的数值范围是确定的，超出这个范围就会出现溢出（正向溢出，负向溢出）。ArrayBuffer的一些方法。由于视图的构造函数可以指定起始位置和长度，所以在同一段内存中可以依次存放不同类型的数据，这叫做“复合视图”。DataView视图用于处理网络设备传来的数据，所以大端字节序或小端字节序可以自行设定。DataView视图本身也是构造函数，接受一个ArrayBuffer对象作为参数生成视图。二进制数组的应用：AJAX，Canvas，WebSocket，Fetch API，File API，SharedArrayBuffer。Atomics对象，保证所有共享内存的操作都是“原子性”的，并且可以在所有线程内同步。</p>
]]></content>
      <categories>
        <category>前端书籍</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>JavaScript</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之Vue CLI（五）</title>
    <url>/2019/12/18/blog32/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（Vue CLI）</p>
<p>内容：学习和使用Vue CLI2 和 Vue CLI3。如果了解webpack如何一步步配置的，建议可以先看我的前一个博客：<a href="https://www.cnblogs.com/xinkuiwu/p/12044205.html">前端框架Vue自学之webpack（四）</a>。</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h3><h3 id="一、Vue-CLI"><a href="#一、Vue-CLI" class="headerlink" title="一、Vue CLI"></a>一、Vue CLI</h3><p>　　1、前言</p>
<p>　　前面（上一个博客）中，学习webpack的相关知识，知道webpack的一些配置，最后知道如何把生产配置和开发配置进行分离。</p>
<p>　　如果只是写几个vue的demo，则是不需要vue CLI的。在实际开发（大型项目）中，我们一般不会重头到尾写webpack的配置，我们会通过一个工具，叫脚手架，自动生成我们weback的配置，提升我们的工作效率。</p>
<p>　　CLI（command-line interface，命令行界面，俗称脚手架（软件工程学引用这个建筑学概念）），其含义很简单。举个例子，当我们要写一个项目1，用了ES6的JavaScript，LESS的CSS扩展语音，后端使用node。我们每次写完一个功能，都需要把ES6转为ES5，编译LESS，压缩JS等操作。每次修改代码都要做的这些操作属于<strong>重复性工作</strong>。后来，我们学习了webpack或者是gulp，写了webpack脚本（webpack配置），每次有代码改动，只需在终端输入webpack等就可以自动完成上述的重复性工作，我们写的webpack脚本就是为了<strong>减少重复性工作</strong>。但是，我们写完这个项目1还得写项目2,项目3等，我们每次都用相同的技术栈，每次的webpack脚本都大同小异，这个时候，写这么多的webpack脚本，也是一种<strong>减少重复性工作的重复性工作</strong>。</p>
<p>　　而脚手架就是可以帮我们解决这个问题的工具。脚手架一个命令，目录结构、webpack脚本、babel配置、空的测试文件都帮我们搞好了. 直接写核心业务代码，不做重复性工作，这就是脚手架的作用。当然不同的技术的技术栈会有自己的目录结构、工作流程，例如我们前端框架比如vue、angular、react会有自己的脚手架（XXX-CLI）。现在我们就来学习一下vue CLI。</p>
<p> 　2、vue cli及使用前提</p>
<p> 　在使用vue.js开发大型应用时，我们需要考虑代码目录结构，项目结构和部署、热加载、代码单元测试等事情。如果每个项目都要手动完成这些工作，那无疑效率比较低的，所以通常我们会使用一些脚手架工具（Vue CLI）来帮助我们完成这些事情。</p>
<p>　　Vue CLI是一个官方发布vue.js项目脚手架，使用vue-cli可以快速搭建Vue开发环境以及对于的webpack配置。</p>
<p>　　由于webpack是依赖于node环境，所以Vue CLI也是依赖node环境。在使用Vue CLI前，需要安装NodeJS（可在<a href="https://nodejs.org/zh-cn/">Node官网</a>下载安装），Node环境要求8.9以上。Node安装好了之后，是自带软件包管理工具npm，npm是一个NodeJS包管理和分发工具，以及成为了非官方的发布Node模块的标准。后续我们会经常使用npm来安装一些开发过程中依赖包。　</p>
<p>　　Vue.js官网脚手架工具就使用了webpack模板，对所有的资源会压缩等优化操作，它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效。webpack的全局安装，是通过在终端输入npm install webapck -g。</p>
<p>　　3、Vue CLI的使用</p>
<p>　　首先安装Vue CLI脚手架。在终端输入 npm install -g @vue&#x2F;cli ，它是全局安装（一般不需要本地安装）。这个是一个脚手架Vue CLI3（可能2019年年底的版本已经到4.1.1，不过也没关系。因为我学的时候用的是3.2.1版本，所以也可以指定版本npm install -g @vue&#x2F;<a href="mailto:&#99;&#108;&#x69;&#x40;&#x33;&#x2e;&#50;&#46;&#49;">&#99;&#108;&#x69;&#x40;&#x33;&#x2e;&#50;&#46;&#49;</a>），我们先学脚手架2，安装3版本也没事，因为我们可以在脚手架3的基础上拉取一个脚手架2的模板使用即可当做脚手架2。</p>
<p>　　注意，如果安装的太慢，可以借助将npm的仓库地址改为淘宝镜像（输入npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> –global 和 npm config set disturl <a href="https://npm.taobao.org/dist">https://npm.taobao.org/dist</a> –global），之后再安装（速度飞起）。然后可以通过vue –version查看自己安装的版本。</p>
<p> 　由于我们先学习一下Vue CLI2。现在，我们得拉取<strong>Vue CLI2的模板</strong>。终端输入npm install -g @vue&#x2F;cli-init（# <code>vue init</code> 的运行效果将会跟 <code>vue-cli@2.x</code> 相同）。这个时候我们既可以使用Vue CLI3，也可以使用Vue CLI2了。</p>
<p>　　Vue CLI2初始化项目，在对应的目录下，终端输入 vue init webpack my-project（my-project是项目名称）即可，接着可能会有很多选项，我们在下一小节具体详细说明。</p>
<p>　　补充：Vue CLI3初始化项目是通过vue create my-project（后续会使用到的）。</p>
<p> 　4、vue-cli2初始化项目过程</p>
<p>　　首先cd到某个目录，然后终端输入vue init webpack vuecli2test（最终会创建名为vuecli2test，在里面初始化项目目录和文件），此时会下载一些模板（download template），之后会有一些选项给我们选择，具体有：（这些项目信息最终会保存在package.json里面）</p>
<p>　　project name (vuecli2test)，输入项目名称，如果直接回车会默认是一原来项目文件夹名vuecli2test为项目名，但不能包含大写字母等。即括号里面的内容是默认信息，如果直接回车会自动填充。</p>
<p>　　project description(A Vue.js project)，描述信息，这里我们填写为 test vue cli2</p>
<p>　　Author，作者名。如果我们之前有配置全局的.gitconfig，这里也会有默认的作者信息。</p>
<p>　　Vue build（Use arrow key），它是提示我们编译模式是选择runtime-only还是runtime-compiler，因为之前（上个博客）说过，runtime-only要求代码中，不可以有任何的template，因为这个版本没有编译template的代码，但是其大小很小（少6kb），运行效率高。runtime-compiler中可以有template，因为有complier可以用于编译template。这里我们先不管编译template的问题，先选runtime-compiler，后续我们会继续分析两者的。</p>
<p>　　Install vue-router，是否安装vue路由。在大型项目中，我们通常都会使用vue的全家桶，即VueCore+vue-router+vuex（vue内核+vue路由+vue状态管理工具）。如果我们选择安装，则后续可以直接使用这个路由，因为脚手架已经帮我们安装好了。这里，我们先不安装。</p>
<p>　　Use ESLint to lint your code，是否使用ESLint。 ESLint对JS进行规范检查，如果我们写的JS代码不规范就会编译不通过。如果选择使用，会出现pick an ESLint preset，要你选择一种规范（Standard，Airbnb，自定义规范）。这里我们选先不使用。如果不小心使用了，也可以在config的index.js文件中的UseEslint改为false即可。</p>
<p>　　Set up unit tests，设置单元测试。如果安装单元测试，可能还得需要一些第三方的测试框架。单元测试会提供很多断言，来对我们某些模块进行单独的测试。这里我们先选不设置。</p>
<p>　　Setup e2e tests with Nightwatch，设置端到端（end to end）测试并安装Nightwatch。Nightwatch是一个利用selenium或webdriver或phantomjs等进行自动化测试的框架。一般是测试人员会使用到这个东西。我们这里先选no。</p>
<p>　　Should we run <code>npm install</code> for you after the project has been created（npm，yarn，自己管理），选择管理工具。我们这里选npm。</p>
<p>　　选择完之后，会自动根据我们的选择进行项目初始化。初始化完成之后，就生成了我们的项目目录。</p>
<p>　　<img src="/2019/12/18/blog32/1803687-20191222154611064-1017550034.png" alt="img"></p>
<p>　　5、Vue CLI2的目录结构解析</p>
<p>　　上一小节中，我们用Vue CLI2初始化了我们的项目，这里生成了多目录，形成了一个目录结构，我们来一个一个了解一下。</p>
<p>　　首先，项目里面有<strong>build文件夹</strong>和<strong>config文件夹</strong>。里面都是webpack打包和配置的文件。在面对这么多的文件的时候，我们不要一个一个看，先打开我们的package.json，看scripts脚本（就是在终端通过npm run XXX执行的对应脚本），里面有我们dev,start,build。其中，”build”: “node build&#x2F;build.js”（node是可以执行js文件的，这里执行的是 build文件夹的build.js），我们可以打开 build文件夹的build.js，观察细节。build.js文件大致思路是，首先引入各种包，每次执行npm run build时，先把之前打包创建的dist删除（remove），然后根据.&#x2F;webpack.prod.conf的webpack配置进行打包。.&#x2F;webpack.prod.conf这个文件是生成版本的webpack配置，查看源码，发现之前跟我们之前讲的webpack配置文件分离（在我之前的博客），把基本公共配置与生产独有的配置进行合并。基本公共配置里有很多webpack的插件，例如抽离组件的CSS等。而开发webpack配置，运行的是build文件夹内webpack.dev.conf.js，也是把基本公共配置与开发调试的配置合并而成的。config文件夹内的文件也是配置文件，定义一些全局变量，端口号等和一些开发配置和生产配置。（<strong>可见，如果我们一个一个配置这些文件非常繁琐，而使用脚手架就大大帮助了我们，某些配置不满意，我们也可以自己去修改它，非常方便</strong>）</p>
<p>　　补充：node是用C++开发的，其核心是Chrome V8引擎（使得JS直接生成二进制码再到浏览器运行，之前是生成字节码，运行速度没前者快），为我们的JS提供运行环境。以前的JS运行查看结果，是得通过将其引入到HTML文件中，通过浏览器打开这个HTML文件，查看JS一些结果。后面有人想用JS开发服务器，但是因为服务器没有浏览器，困难重重，之后Ryan Dahl基于Chrome V8引擎开发node。node能够使用V8引擎解析JS做服务器的底层支撑，所以只要装了node，就可以通过node在我们电脑执行我们的JS代码。 </p>
<p>　　<strong>node_modules文件夹</strong>，这个是我们当前项目很多依赖的包。具体有什么的呢？我们可以通过package.json的devDependences和dependencies选项来看，devDependences（开发依赖）里面有很多依赖，而dependencies（运行依赖）只有一个vue。　　</p>
<p>　　 <strong>src文件夹</strong>。里面放开发源码。我们写的代码都在里面。</p>
<p>　　<strong>static文件夹</strong>。里面放入静态资源。这个静态资源最后打包的时候，会原封不动的打包到dist文件夹内。</p>
<p>　　<strong>.babelrc文件</strong>。 ES6转为ES5的一些相关配置。</p>
<p>　　<strong>.editorconfig文件</strong>。对我们写的代码格式进行统一，例如缩进，换号等。在大公司里，一般项目代码编写格式都是有要求的。</p>
<p>　　<strong>.gitignore文件</strong>。当你上传一些文件的时候，规定一些不用上传的文件。</p>
<p>　　<strong>.postcssrc.js文件</strong>。CSS进行转换的时候一些配置的东西。</p>
<p>　　<strong>index.html文件</strong>。一个HTML模板，最后打包的时候是根据这个HTML文件，创建打包文件到build目录下的dist文件夹内。</p>
<p>　　<strong>package.json文件</strong>。管理node包里面相关的东西，还有一些信息管理。</p>
<p>　　<strong>package-lock.json文件</strong>。因为有时候node安装一些包的版本可能是在package.json规定以上的版本，package-lock.json文件是真实记录实际安装在node_modules的版本。</p>
<p>　　<strong>README.md文件</strong>。一些说明文档。</p>
<p>　　6、runtimecompiler和runtimeonly的对比</p>
<p>　　其区别只在main.js里面。</p>
<p>　　（图左是runtimecompiler，图右是runtimeonly）<img src="/2019/12/18/blog32/1803687-20191224085421240-175902970.png" alt="img"></p>
<p>  runtimecompiler中，使用APP是现在components注册，然后在template中使用这个组件作为模板。结合vue程序运行过程，当使用template时，其会先保存在vue实例的options里面，然后parse（解析）为ast（abstract syntax tree，抽象语法树，是用编程语言编写的源代码的抽象语法结构的树表示。树的每个节点表示在源代码中出现的构造。），然后其会complier编译成render渲染函数，接着会渲染一些虚拟节点，最后构成为虚拟DOM树（virtual DOM），最后更新，构造真实的DOM（真实的UI）。所以在untimecompiler中，是template -&gt; ast -&gt; render -&gt; vdom -&gt; UI。</p>
<p>　　runtimeonly中，使用APP是通过render渲染函数（并用ES6的箭头函数语法），h函数是vue用于把vdom转换为dom节点。结合vue程序运行过程，其是render -&gt; vdom -&gt; UI。其步骤比runtimecompiler少，即代码少，性能更高。这也是为什么之前在脚手架构建项目的时候，说runtimeonly比runtimecompiler更小的原因。所以，<strong>以后我们的开发，一般选择runtimeonly</strong>。</p>
<p>　　(vue程序运行过程如下图所示：)<img src="/2019/12/18/blog32/1803687-20191224091000242-1700270259.png" alt="img"></p>
<p> 　render函数是可以用在原来写的runtimecompiler的main.js里面，之前的runtimecompiler的template模板就是替换其el挂载的HTML元素，而render函数可以代替template，用createElement函数，生成对应标签，标签的属性，数组（放置标签内的内容，甚至可以是createElement函数）（接着替换其el挂载的HTML元素）。render函数可以使用组件（代替之前template和components的组合用法），就是把组件传入createElement里面。（上述这样做相当于没了template转ast，再转为render的步骤，其实就是runtimeonly的main.js的写法）</p>
<p>　　但是我们会有所疑惑，在runtimeonly的main.js中，render函数里引用的组件（如APP）是从vue文件引用的，而vue文件里面不是也有template标签吗？所以是不是得先解析为ast，再编译为render呢？其实不是的。vue文件中的template最终会编译为一个普通的对象，已经渲染为render函数了（内部是通过webpack配置安装好的vue-template-compiler loader解析编译的，所以我们一般使用runtime-only也是包含这个loader的，很方便）。</p>
<p>　　（npm run build的内部逻辑图）</p>
<p><img src="/2019/12/18/blog32/1803687-20191224151042206-830939097.png" alt="img"></p>
<p> 　　（npm run dev的内部逻辑图）</p>
<p><img src="/2019/12/18/blog32/1803687-20191224151156935-69747123.png" alt="img"> 　7、Vue CLI3创建项目和目录结构</p>
<p>　　vue-cli3 与2版本有很大区别。vue-cli3是基于webpack4打造，vue-cli2还是webpack3；vue-cli3的设计原则是“0配置”，移除的配置文件根目录下的build和config等目录；vue-cli3提供了vue ui 命令，提供了可视化配置，更加人性化；移除了static文件夹，新增了public文件夹（相当于static，里面的文件也是原封不动的会打包到dist文件夹内），并且index.html移动到public中。</p>
<p>　　Vue CLI3创建项目，终端输入 vue create testvuecli3 (是项目名称)，会出现一些选项：</p>
<p>　　please pick a preset（default，Manually select features），选择预配置。我们选第二个手动选择。</p>
<p>　　check the features needed for your project，选择我们项目需要的选项。这一步出现了很多项，我们可以按空格去选择。这里我们只需要Babel。（PWA，渐进式增强WEB应用。有一些缓存、推送和通知等功能，很灵活，但目前国内用的比较少）</p>
<p>　<img src="/2019/12/18/blog32/1803687-20191224153218968-1350301292.png" alt="img"></p>
<p> 　Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? （In dedicated config files, in package.json）这是让我们选择这些配置文件放在独立的文件还是packa.json里面。这里，我们选择单独文件。　</p>
<p>　Save this as a preset for future projects，保存当前的预配置。选择yes。</p>
<p>　save preset as，配置名字。随便输入，这里我输入wu。</p>
<p>　此时完成了项目创建和预配置。注意，当我们第一次创建好项目，在以后创建项目时，会出现我们之前创建过的预配置供我们选择。例如我刚刚创建的预配置是wu，这里新项目的配置也有这个预配置。当选择这个wu预配置，项目就可以自动按照配置创建工程了。（如果我们日后想删除这个配置，可以在终端输入vue config 找到这个预配置文件，将其删除）</p>
<p>　　<img src="/2019/12/18/blog32/1803687-20191224154350034-278876095.png" alt="img"></p>
<p> 　 如果安装的git，用vuecli3创建工程时，会有.git文件夹（本地仓库），当在终端输入git相关命令，可以进行git操作。</p>
<p>　　此时，目录有了一些改变（相对于vue cli2），看上去更加简洁了，但主要文件的功能和脚手架2差不多。</p>
<p>　　<img src="/2019/12/18/blog32/1803687-20191224155907624-1438284462.png" alt="img"></p>
<p>　　查看package.json的scripts选项，里面开发测试时用npm run serve，打包是npm run build。</p>
<p>　　<img src="/2019/12/18/blog32/1803687-20191224160539253-1722776972.png" alt="img"></p>
<p>　　此外，在入口文件main.js中，Vue.config.productionTip 的意思是在发布一个产品，在构建的时候给我们提示一些信息。在开发调试时是不需要的，所以让Vue.config.productionTip &#x3D; false。main.js中，是通过.$mount(‘#app’)取代el:’#app’，来挂载id为app的HTML元素，其实没有差别，最终其都会被render函数渲染替换掉。</p>
<p>　　8、Vue CLI3配置文件的查看与修改</p>
<p>　　在vue CLI3查看配置有三种方案：</p>
<p>　　第一种，启动配置（本地）服务器：vue ui（终端输入）。之后会启动GUI（图形用户界面）和打开一个浏览器窗口，里面可以创建项目，导入项目等。　　　　</p>
<p> <img src="/2019/12/18/blog32/1803687-20191224162102894-1950156345.png" alt="img"></p>
<p> 　　当选择导入我们刚用vue CLi3创建的项目文件夹时，左边会出现项目仪表盘，插件，依赖，配置，任务等选项，点开我们可以看到很多细节信息并且可以添加插件，安装依赖等。其中，在项目配置中，可以发现启动运行时编译选项是关的，即默认选择的时候runtime-only，在main.js中的代码也证实了这一点（因为没有使用template）。</p>
<p><img src="/2019/12/18/blog32/1803687-20191224163549265-1501408533.png" alt="img"></p>
<p>  　第二种，查看node_modules文件夹。由于在package.json中发现，一些webpack依赖，在Vue CLI3中是通过@vue&#x2F;cli-service和@vue&#x2F;cli-plugin-babel这两项来封装管理的。所以，我们可以打开node_modules文件夹的@vue文件夹中的cli-service文件夹的webpack.config.js，发现其是引用.&#x2F;lib&#x2F;Service的js文件，这就是真正的配置的webpack文件（Service.js也有引入其他公共配置，开发配置等）。</p>
<p>　　第三种，创建vue.config.js文件（根目录下）。当我们需要修改某些配置的时候，需要在根目录下创建vue.config.js文件（名字不能换），文件里面通过module.exports&#x3D;{XXX}导出一些配置。其最后会和之前说的@vue中的一些配置进行合并。</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue CLI</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>vue CLI2</tag>
        <tag>vue CLI3</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之Vue router（六）</title>
    <url>/2019/12/24/blog33/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（Vue router）</p>
<p>内容：学习和使用Vue router。</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue router"></a>Vue router</h3><h3 id="一、认识路由"><a href="#一、认识路由" class="headerlink" title="一、认识路由"></a>一、认识路由</h3><p>　　1、<strong>路由</strong>（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动。</p>
<p>　　2、路由器提供了两种机制：<strong>路由</strong>和<strong>转送</strong>。路由是决定数据包从来源到目的地的路径。转送将输入端的数据转移到合适的输出端。</p>
<p>　　3、路由中有一个非常重要的概念叫路由表。<strong>路由表</strong>本质上就是一个<strong>映射表</strong>，决定了数据包的指向。</p>
<h3 id="二、前端渲染后端渲染和前端路由后端路由"><a href="#二、前端渲染后端渲染和前端路由后端路由" class="headerlink" title="二、前端渲染后端渲染和前端路由后端路由"></a>二、前端渲染后端渲染和前端路由后端路由</h3><p>　　1、后端渲染和后端路由</p>
<p>　　以前的网页开发整个HTML页面是由服务器来渲染的，即<strong>后端渲染</strong>，通过使用JSP（Java server page）&#x2F;PHP&#x2F;ASP语言开发的。以JSP为例，当我们在浏览器输入一个网址（url）时，把浏览器会发这个网址（url）给服务器，服务器首先会解析这个网页，在后台就会通过JSP技术（Controller）把网页写好，这个网页包含HTML和CSS和一些Java代码，Java代码的作用是从数据库中读取数据，并且将它动态地放在页面中（把数据动态渲染这个页面）。最后服务器直接将渲染好的网页发送给浏览器（这个网页只有HTML+CSS）（完成了一个IO操作）。这就是后端渲染（网页是在服务器端渲染的）。</p>
<p>　　可以发现，在后端渲染这种模式下，我们每输入一次url，服务器就会根据这个url在后端渲染网页，然后传到浏览器中。一个url（路径）对应（映射）一个网页，这个映射关系是服务器管理的。因此后端处理URL和页面之间的映射关系叫做<strong>后端路由</strong>。</p>
<p>　　<strong>优点</strong>：这种情况下渲染好的页面，不需要单独加载任何的JS和CSS，可以直接交给浏览器展示，这样也有利于SEO（搜索引擎优化）的优化。</p>
<p>　　<strong>缺点</strong>：整个页面的模块由后端人员来编写和维护（例如Java数据库）。前端开发人员如果要开发页面，需要通过PHP和Java等语言来编写页面代码。而且通常情况下HTML代码和数据以及对于的逻辑会混在一起，编写和维护都是非常糟糕的事情。</p>
<p>　　2、前后端分离和前端渲染</p>
<p>　　网页开发的第二个阶段是<strong>前后端分离</strong>阶段。随着Ajax(异步 JavaScript 和 XML)的出现，有了前后端分离的开发模式。后端只提供API来返回数据，前端通过Ajax获取数据，并且可以通过JavaScript将数据渲染到页面中。</p>
<p>　　其过程大致是这样：后端是一个服务器（提供API接口的服务），服务器连接数据库；前端在浏览器开发；中间还有一个静态资源服务器（当然有的公司会把后端服务器和静态资源服务器合在一起）。当我们在浏览器输入网站（url），接着会从静态资源服务器获取HTML+CSS+JS代码等静态资源，HTML+CSS是可以在浏览器直接渲染，JS代码时由浏览器执行，一般JS里面会有API请求，通过Ajax技术，然后向后端服务器请求数据，后端服务器将对于的数据返回给浏览器，这些数据会通过其他的JS代码，在浏览器创建HTML元素，并把数据插入其中，最后在渲染整个页面。</p>
<p>　　浏览器中显示的网页中的大部分内容，都是由前端写的JS代码在浏览器中执行，最终渲染出来的网页。这就是<strong>前端渲染</strong>。</p>
<p>　　这样做最大的<strong>优点</strong>就是前后端责任的清晰，后端专注于数据上，前端专注于交互和可视化上。并且当移动到（IOS、Android）出现后，后端不需要进行任何处理，依然使用之前的一套API即可（因为用的是API接口，不管是浏览器，还是移动端，接口对应上即可使用相关服务）。目前很多的网站依然采用这种模式开发。</p>
<p>　　3、前端路由</p>
<p>　　网页开发的第三个阶段是<strong>单页面富应用</strong>SPA(Single Page Application)阶段。其实SPA最主要的特点就是在前后端分离的基础上加上一层<strong>前端路由</strong>，也就是前端来维护一套路由规则。</p>
<p>　　SPA，整个网页只有一个HTML页面。之前在前后端分离的时候，静态资源服务器是一个网址（url）对应一套HTML+CSS+JS，而在SPA中， 静态资源服务器只有一套index.html+css+JS。即在SPA中，在浏览器输入网页时，浏览器先从静态服务器获取HTML+CSS+JS（全部资源）但并非直接执行。但我们点击这个网址（相当于打开另一url），然后会从HTML+CSS+JS（全部资源）中抽离要在这个url显示的东西。这时，不同的url中，通过在同一套HTML+CSS+JS（全部资源）中进行抽离，可以显示不同url对应的页面信息，这种映射关系就是<strong>前端路由</strong>。（之前不同的url会向静态资源服务器请求一套HTML+CSS+JS资源，前端路由不会向静态资源服务器请求，而是通过一些JS代码判断，将从同一套HTML+CSS+JS（全部资源）中抽取一部分资源，其实在vue中就是一个个组件，然后在对应不同的url的页面中渲染显示）</p>
<p>　　即<strong>前端路由</strong>就是从不同url在同一套HTML+CSS+JS（全部资源）所对应的不同组件（页面）资源的映射关系，这个关系是前端在管理的。　　</p>
<p>　　4、url的hash和HTML5的history</p>
<p>　　前端路由的核心是改变url，但是页面不进行整体的刷新。那怎么做到呢？一个是使用url的hash，一个是使用HTML5的history（的很多模式）。</p>
<p>　　url的hash，也就是锚点（#），本质上是改变window.location的href属性。我们可以直接通过直接赋值location.hash来改变herf，但是页面不发生刷新。</p>
<p>　　为了演示改变url，却不让页面整体刷新，我们先用vue CLI2创建工程，然后记得选择安装vue-router。然后运行调试（npm run dev），打开页面和控制台，发现一开始会加载一些资源（为了方便看是否刷新，可以将Network的clear按钮点击（红色圆旁边那个禁止图标））。</p>
<p><img src="/2019/12/24/blog33/1803687-20191225102103416-60952330.png" alt="img"></p>
<p> 　　当在控制台Console中通过url的hash修改url时（location.hash &#x3D; ‘aaa’），发现页面没有刷新。</p>
<p><img src="/2019/12/24/blog33/1803687-20191225102258363-84522294.png" alt="img">（url修改前）</p>
<p> <img src="/2019/12/24/blog33/1803687-20191225102334769-2103227517.png" alt="img">（修改url的hash）</p>
<p> <img src="/2019/12/24/blog33/1803687-20191225102402661-1055421361.png" alt="img">（修改url后）</p>
<p> <img src="/2019/12/24/blog33/1803687-20191225104050003-1166390809.png" alt="img">(network没有请求资源)</p>
<p> 　　此外，HTML5的history模式：pushState 也可以修改url却不刷新网页。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225103656890-649211663.png" alt="img">(在console通过history修改url)</p>
<p> 　<img src="/2019/12/24/blog33/1803687-20191225103731266-1399590242.png" alt="img">（修改了url，但network没有请求资源，即页面没刷新）</p>
<p> 　注意history.pushState是一个栈结构（后进先出）。修改的url显示的是最新push进去的修改项（栈顶）。</p>
<p> 　<img src="/2019/12/24/blog33/1803687-20191225104707759-864138339.png" alt="img">(压入新url)<img src="/2019/12/24/blog33/1803687-20191225104724094-1002524092.png" alt="img">(显示栈顶)</p>
<p> 　对应的弹出栈顶方法是history.back()，同样也是修改了url却不刷新页面。可以发现此时用这两种方法是可以在浏览器的返回&#x2F;前进按钮（一般是浏览器左上角的两个箭头按钮）是可以使用的（因为是栈）。history.back()相当于返回，而histor.forward(）相当于前进。（注意，url中出现了#，即hash模式，是因为我们之前项目的代码中，默认的路由实例模式是hash模式，如果修改为history的mode就不会出现#，后面会说第三章第5小节有讲）</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225105039237-1074082315.png" alt="img">（弹出）<img src="/2019/12/24/blog33/1803687-20191225105055384-329863403.png" alt="img">（显示栈顶）</p>
<p> 　HTML5的history模式：replaceState。同样可以修改url却不刷新页面，但没有返回按钮可以使用（因为是代替）。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225143320588-241556228.png" alt="img">（用法）<img src="/2019/12/24/blog33/1803687-20191225143416920-965264551.png" alt="img">（修改了url，没刷新页面，但没有返回按钮可以使用）</p>
<p> 　HTML5的history模式：go。history.back()相当于history.go(-1)，而histor.forward(）相当于history.go（1)。go里面的参数可以是-2 等，相当于执行history.back()两次。上述三个方法等同于浏览器的前进后退。</p>
<p>　　总结：<strong>以后在配置路由时，就有两种方式：hash方式和history方式</strong>。　 </p>
<h3 id="三、Vue-router"><a href="#三、Vue-router" class="headerlink" title="三、Vue-router"></a>三、Vue-router</h3><p>　　1、前端框架的前端路由</p>
<p>　　目前前端流行的三大框架，都有自己的路由实现。如Angular的ngRouter，React的ReactRouter，Vue的Vue-router。</p>
<p>　　2、认识vue-router</p>
<p>　　<strong>vue-router</strong>是vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。</p>
<p>　　vue-router是基于路由和组件的。路由用于设定访问路径，将路径和组件映射起来。在vue-router的单页面应用中，页面的路径的改变就是组件的切换。</p>
<p>　　3、vue-router的安装和使用</p>
<p>　　因为之前我们学习了webpack（在我前一个博客），后续开发中我们主要是通过工程化的方式进行开发的。所有在后续，我们直接使用npm来安装路由即可。</p>
<p>　　<strong>步骤一</strong>：安装vue-router（npm install vue-router –save）（运行时依赖）。如果是之前通过vueCLI创建项目的时候，选择安装的了vue-router，可以在package.json文件可以看到vue-router，并且在src会自动创建router文件夹和一个关于路由的index.js（下面也会讲到手动安装和时候vue-router，不慌）。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225145813738-1528122618.png" alt="img"></p>
<p> 　　<strong>步骤二</strong>：在模块化工程中使用它（因为是一个插件，所以可以通过vue.use()来安装路由功能）。首先，导入路由对象，并且调用Vue.use(VueRouter)。接着，创建路由实例，并且传入路由映射配置。最后，在vue实例中挂载创建的路由实例。</p>
<p>　　如果我们通过vueCLI创建项目的时候，没有选择安装vue-router，也可以手动安装上面两个步骤安装使用。</p>
<p>　　<strong>大致流程</strong>：安装vue-router。终端输入npm install vue-router –save。使用vue-router。首先，在src文件夹下创建名为router的文件夹，用来放置我们路由配置的相关信息。接着，在router文件夹下创建index.js文件，配置路由信息，其中，导入VueRouter，调用Vue.use()方法安装VueRouter插件，由于这个是vue方法，需要导入vue，接着，创建VueRouter对象，并在这个对象中传入路由映射配置，并将其导出，供vue实例挂载。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225152151494-842944141.png" alt="img">（router文件夹下的index.js）</p>
<p> 　　最后一步是在main.js里面导入router，并在vue实例挂载。这样就可以使用router了。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225152322779-1354360421.png" alt="img">（main.js）</p>
<p> 　　4、路由映射配置和呈现出来</p>
<p>　　 使用vue-router的步骤：首先，创建路由组件。接着，配置路由映射：组件和路径映射关系。最后，使用路由：通过&lt; router-link&gt;和&lt; router-view&gt;。</p>
<p>　　大致操作过程：</p>
<p>　　第一步，在src文件夹下，创建组件，例如创建两个组件About.vue和Home.vue。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225163427609-1662645311.png" alt="img">（About.vue）<img src="/2019/12/24/blog33/1803687-20191225163447857-1738528548.png" alt="img">（Home.vue）</p>
<p> 　第二步，然后在router的index.js文件进行映射配置，一个映射是一个对象，对象中包含两个属性：path和component（这样就把路径和组件对应起来了），接着导入组件，把组件放置在映射对象的component属性中，所以这里我们配置两个对象。注意，path是相对路径，而不是url（url是协议头:&#x2F;&#x2F;host&#x2F;query等）。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225164056566-279221494.png" alt="img">（router文件夹的index.js文件）</p>
<p> 　第三步，接着，使用路由。由于需要在同一个页面想显示两个不同路径下两个组件。所以我们得从App.vue修改（因为入口文件main.js导入的是App.vue，并将其用render函数渲染显示出来），添加两个标签按钮，通过按钮进行修改路径。所以，我们在App.vue的template标签内使用&lt; router-link&gt;标签（router-link是vue-route已经r注册的全局组件），并且&lt; router-link&gt;标签里面有个to属性，将to属性的属性值对应于我们之前映射关系的相对路径path，这样就可以和相对路径path的组件对应。（&lt; router-link&gt;标签最终渲染为&lt; a&gt;标签）</p>
<p>　　但此时只使用&lt; router-link&gt;标签只能修改url，而对应地址所映射的组件没有显示出来，此时，需要使用&lt; router-view&gt;标签。但注意，&lt; router-view&gt;所显示的组件的位置是可以调的，后续我们会学习如果让他在我们想要的位置上（利用框架），此外在路由切换时，切换的是&lt; router-view&gt;挂载的组件，其他内容是不会发生改变的。　　<img src="/2019/12/24/blog33/1803687-20191225165949772-8122669.png" alt="img">（App.vue，&lt; router-view&gt;的位置会绝对组件显示的位置，例如组件显示在两个&lt; router-link&gt;标签的下面）</p>
<p> 　<img src="/2019/12/24/blog33/1803687-20191225165852196-704429581.png" alt="img">（此时点击首页对应的home相对路径了；点击关于对应about相对路径）</p>
<p>　　5、路由的默认值和修改为history模式</p>
<p>　　之前在默认情况下，进入网站的首页，我们希望&lt; router-view&gt;渲染首页的内容，但是在我们之前的实现中， 默认没有显示首页组件，必须要让用户点击才可以。</p>
<p>　　如何可以让路径默认跳到首页，并且&lt; router-view&gt;渲染首页组件呢？非常简单，我们只需要在路由配置多配置一个映射就可以了，即在routers多配置一个映射，path配置的是根路径：&#x2F;或者为空，redirect是重定向，也就是我们将根路径重定向到&#x2F;home的路径下，这样就可以得到我们想要的结果了。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225184701259-1719640634.png" alt="img">（index.js添加重定向） 　<img src="/2019/12/24/blog33/1803687-20191225184622416-534179774.png" alt="img">（没有点击首页，直接打开就是默认为首页，并渲染了组件）</p>
<p> 　在之前修改url的时候发现都是相对路径前面带有#，即是hash值模式（路由默认下是hash模式）。如果我们不想要这个#，可以使用HTML5的history。</p>
<p>　　我们在index.js中在VueRouter实例中，添加mode属性，并且值为history即可。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225185217585-413808799.png" alt="img">（index.js中的VueRouter实例） </p>
<p><img src="/2019/12/24/blog33/1803687-20191225185143339-589385216.png" alt="img">（相对路径&#x2F;home前面没有了#）</p>
<p> 　6、&lt; router-link&gt;的其他属性补充。</p>
<p>　　之前我们只使用了&lt; router-link&gt;的to属性，即点击这个link跳转到对应的相对路径。</p>
<p>　　&lt; router-link&gt;还有一些其他属性：</p>
<p>　　tag：tag可以指定&lt; router-link&gt;之后渲染成什么组件，比如之前写的&lt; router-link&gt;默认渲染为&lt; a&gt;，通过tag我们可以渲染为&lt; button&gt;等（&lt; router-link to &#x3D;’&#x2F;home’ tag&#x3D;’button’&gt;首页&lt; &#x2F;router-link&gt;）。</p>
<p>　　replace：replace不会留下history记录，所以指定replace的情况下，后退键返回不能返回到上一个页面中（之前用的相当于是history.pushState，所以后退键可以使用）。用法：不需要写任何值，就replace即可（&lt; router-link to &#x3D;’&#x2F;home’ tag&#x3D;’button’ replace &gt;首页 &lt; &#x2F;router-link&gt;）。</p>
<p>　　active-class：当&lt; router-link&gt;对应的路由匹配成功时，会自动给当前元素设置一个router-link-active的class，设置active-class可以修改默认的名称。或者是直接在router文件夹的index.js文件中的VueRouter实例中，使用linkActiveClass属性进行统一修改router-link-active的名称。在进行高亮显示的导航菜单或者底部tabbar时，会使用到该类，但是通常不会修改类的属性，会直接使用默认的router-link-active即可。</p>
<p>　　7、通过代码跳转路由</p>
<p>　　如果我们想在别的标签，拥有使用&lt; router-link&gt;的跳转功能，可以通过代码的方式跳转路由。</p>
<p>　　例如，通过事件监听，定义方法和使用$router，获取router对象（这个router对象就是我们定义的VueRouter实例）的方式。在App.vue中创建两个button，并且监听事件，然后在脚本定义方法。this.$router相当于vue-router对象，其属性可以选为push（相当于history.pushState）或replace（相当于history.replaceState），但注意不能直接使用history方法，这样绕过了router了。</p>
<p>　<img src="/2019/12/24/blog33/1803687-20191225193837785-698532810.png" alt="img"></p>
<p> 　8、vue-router的动态路由使用</p>
<p>　　在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望如下的路径：&#x2F;user&#x2F;aaa或&#x2F;user&#x2F;bbb，除了有前面的&#x2F;user之外，后面还跟上了用户的ID。这种path和component的匹配关系，我们称之为<strong>动态路由</strong>（也是路由传递数据的一种方式）。</p>
<p>　　例如我们要创建用户的一些动态路由（例如&#x2F;user路径后面能跟上一些用户的id的路径）。</p>
<p>　　实例大致过程：第一，先创建&#x2F;user的路径。首先，在src&#x2F;components下创建User.vue（组件），然后在&#x2F;router下的index.js进行配置User路由对象（User相对路径和组件对象关系），最后是在App.vue用使用&lt; router-link&gt;和&lt; router-view&gt;引用User组件。这样就完成了&#x2F;user的路由【第一大步骤之前在第4小节说过】</p>
<p>　　现在我们要想使用动态路由（例如&#x2F;user路径后面能跟上一些用户的id的路径）。</p>
<p>　　假如我们想动态从脚本中的data数据获取userId（一个变量）。例如zhangsan。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225201634272-924134436.png" alt="img">（App.vue） </p>
<p> 　首先，修改index.js中的user组件配置。（:&#x2F;变量名）</p>
<p>　<img src="/2019/12/24/blog33/1803687-20191225202104928-167530567.png" alt="img">（修改前）<img src="/2019/12/24/blog33/1803687-20191225202242992-1116522331.png" alt="img">（修改后）</p>
<p> 　接着在&lt; router-link&gt;中用v-bind:绑定to属性即可，往对应变量userID传data里面的值。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225202428395-1725205589.png" alt="img"></p>
<p> 　此时，点击用户，url就可以动态变为user&#x2F;userId，即user&#x2F;zhangsan。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225202626359-2013461619.png" alt="img">（点击用户）</p>
<p>　　进一步地，如果我们想根据userId，如zhangsan，获取他的一些信息，渲染到当前页面（而不是之前默认的user组件的原来的信息：我们是用户界面 我是用户的相关信息）。</p>
<p>　　我们可以使用**$route<strong>（之前我们讲过</strong>$router<strong>是我们之前创建VueRouter实例对象，而这个是</strong>$route**，是指的是VueRouter实例对象的routers（里面有很多个路由对象）中处于活跃active的对应的路由对象）。并且在User.vue组件中使用计算属性。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225204122100-504231028.png" alt="img">（user.vue）</p>
<p>　　此时，打开页面，点击用户。url后面有user&#x2F;userId，&lt; router-view&gt;中的h2标签中的userId也被渲染出来了。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225204242488-559721170.png" alt="img">（点击用户）</p>
<p> 　同样地，此时如果App.vue中的data的userId改变了，变为lisi。最后页面的userId也会相应变化。</p>
<p><img src="/2019/12/24/blog33/1803687-20191225204453680-1928061958.png" alt="img">（App.vue）</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191225204606502-1373327821.png" alt="img">(userId为lisi)</p>
<p>　　这就是动态路由。</p>
<p>　　9、打包文件的解析</p>
<p>　　<strong>路由的懒加载</strong>。当打包构建应用时，JavaScript包会变得非常大，影响页面加载（由于请求的资源过大，会在页面有暂时空白显示）。如果我们把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p>
<p>　　在我们用vue CLI构建项目的时候，当打包的时候，就是把目标文件分为几个文件（而不是之前的一个bundle.js文件）。其中，js文件夹中，app.XX.js是当前应用程序开发的所有代码（业务代码），vendor.XX.js是vendor（提供商，第三方的东西：vue&#x2F;vue-router&#x2F;axios(网络请求框架)&#x2F;bs(一种滚动框架)），manifest.xx.js是为了打包的代码做底层支持的（如导入导出，ES6转ES5等）。</p>
<p>　　注意，.map文件是js文件压缩后，文件的变量名替换对应、变量所在位置等元信息数据文件，一般这种文件和min.js主文件放在同一个目录下。 这样的好处就是说，在调试的时候，如果有一些JS报错，那么浏览器会通过解析这个map文件来重新merge压缩后的js,使开发者可以用未压缩前的代码来调试，这样会给我们带来很大的方便。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226090459378-1959166015.png" alt="img"></p>
<p> 　路由懒加载的使用。懒加载，用到时再加载，相当于将路由对应的组件打包成一个个的js代码块，只有在这个路由被访问到的时候，才加载对应的组件。</p>
<p>　　 路由懒加载的方式有：</p>
<p>　　方式一：结合Vue的异步组件和Webpack的代码分析（不推荐）。const Home&#x3D; resolve &#x3D;&gt; { require.ensure([‘..&#x2F;components&#x2F;Home.vue’], () &#x3D;&gt;{ resolve(require(‘..&#x2F;components&#x2F;Home.vue’)) })};</p>
<p>　　方式二：ADM写法（不推荐）。 const About &#x3D; resolve &#x3D;&gt; require([‘..&#x2F;components&#x2F;About.vue’], resolve);</p>
<p>　　方式三：在ES6中，我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割(强推)。const Home &#x3D; () &#x3D;&gt; import(‘..&#x2F;components&#x2F;Home.vue’)</p>
<p> 　所以，我们重新在之前的路由配置代码（index.js）使用懒加载。首先，注释掉组件包的导入，然后用方式三的路由懒加载，然后在配置常亮routes中对应组件放置对应模块。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226094026191-819670082.png" alt="img">（index.js</p>
<p> 　　此时，打包，可以发现打包的js文件夹内多个几个.js文件，即不同路由路径的js代码块。因为有三个组件，所以是0 1 2的js文件。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226094229833-1206793037.png" alt="img"></p>
<p> 　10、路由的嵌套使用</p>
<p>　　嵌套路由（在路由里面嵌套另一个路由）是一个很常见的功能。比如在home页面中，我们希望通过&#x2F;home&#x2F;news和&#x2F;home&#x2F;message访问一些内容。一个路径映射一个组件，访问这两个路径也会分别渲染两个组件。即路径和组件的关系如下：</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226095540317-1352211912.png" alt="img"></p>
<p>　　实现嵌套路由有两个步骤：首先，创建对应的子组件，并且在路由映射中配置对应的子路由。接着，在组件内部使用&lt; router-view&gt;标签。</p>
<p>　　大致操作流程：首先，在src&#x2F;components下创建子组件HomeNews.vue和HomeMessage.vue。接着，在router下的index.js中，在home组件的映射配置中配置其两个子组件（这才是嵌套嘛，通过利用children属性），并且也是使用懒加载。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226102741173-1174964912.png" alt="img"></p>
<p>  　　最后，在Home.vue（父组件）中使用使用组件的方法一样，使用&lt; router-link&gt;和&lt; router-view&gt;来显示我们的两个子组件。注意，&lt; router-link&gt;中的to属性得写完整的相对路径。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226102907813-556010695.png" alt="img">（Home.vue）</p>
<p> 　　然后，运行调试，发现首页有了两个子组件路由，点击新闻或消息，页面会渲染其组件（子组件）。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226101630188-844926330.png" alt="img">（home页面）</p>
<p> 　<img src="/2019/12/24/blog33/1803687-20191226102817512-1496089760.png" alt="img">（渲染子组件）</p>
<p> 　11、传递参数</p>
<p>　　有时候我们的使用路由，会把一些参数传递过去。（我们之前传递userId就属于一种参数传递）</p>
<p>　　<strong>传递参数</strong>主要有两种类型：<strong>params</strong>和<strong>query</strong>。使用方式：&lt; router-link&gt;的方式和JavaScript代码方式。</p>
<p>　　params的类型：配置路由格式：&#x2F;router&#x2F;:id ；传递方式：在path后面跟上对应的值；传递后形成的路径：&#x2F;router&#x2F;123，&#x2F;router&#x2F;abc 。</p>
<p>　　这个例子之前在第8小节有说。（通过$route.params.id）</p>
<p>　　query的类型：配置路由格式：&#x2F;router，也就是普通配置；传递方式：对象中使用query的key作为传递方式；传递后形成的路径：&#x2F;router?id&#x3D;123, &#x2F;router?id&#x3D;abc。</p>
<p>　　为了演示传递参数（query类型），我们这里再创建一个组件，并且将其配置好。首先，创建新的组件Profile.vue；接着，配置路由映射；最后，添加跳转的&lt; router-link&gt;。</p>
<p>　　大致流程:src&#x2F;components创建Profile.vue组件，接着在router&#x2F;index.js配置路由（懒加载的方式），然后在App.vue中使用&lt; router-link&gt;。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226182411110-234451923-1577952597602.png" alt="img">（页面展示没有问题）</p>
<p> 　现在，我们想向Profile传递参数。首先我们在router-link中用v-bind绑定to属性，并使用对象把路由路径传入（这是方便我们后续传递参数的使用）。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226182655549-175646369.png" alt="img"></p>
<p> 　由于to绑定是一个对象，所以里面可以不止一个属性，我们可以写入我们的query。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226183104367-1023452072-1577952605235.png" alt="img"></p>
<p> 　此时的页面，url路径把我们的query对象加载了。（注意是问号连接，这就是query方式拼接，查询）</p>
<p> 　　<img src="/2019/12/24/blog33/1803687-20191226183210708-162211477-1577952608068.png" alt="img"></p>
<p> 　补充：统一资源定位符的标准格式如下：[协议类型]:&#x2F;&#x2F;[服务器地址]:[端口号]&#x2F;[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]，一般是 <strong>协议:&#x2F;&#x2F;主机：端口&#x2F;&#x2F;路径？查询</strong>（scheme:&#x2F;&#x2F;host:port&#x2F;path?query#fragment）。</p>
<p>　　这个时候，如果我们想取出query对象，并渲染显示在页面上可以通过$route.query（在Profile.vue中）。query对象能取出来，对象的属性也是可以取出来的，如$route.query.name等。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226190547817-2120609114-1577952610170.png" alt="img">（使用$route.query）</p>
<p> 　　<img src="/2019/12/24/blog33/1803687-20191226190442757-1186501711-1577952614545.png" alt="img">（页面显示query对象）</p>
<p> 　如果我们是想从别的HTML标签进行类似用组件路由的参数传递，可以使用监听事件和定义方法和this.$router.push或者replace（之前讲过啦）。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226191740398-1298685397-1577952698111.png" alt="img">（App.vue中）</p>
<p> 　 <img src="/2019/12/24/blog33/1803687-20191226191808937-1187229172-1577952618615.png" alt="img">（添加方法）</p>
<p> 　　<img src="/2019/12/24/blog33/1803687-20191226191727093-1663269232-1577952621349.png" alt="img">（页面展示）</p>
<p> 　　12、router和route由来</p>
<p>　　$router就是创建VueRouter的实例（即我们定义名为router的那个常量，vue-router源码实现的），通过打开VueRouter（VScode中按Ctrl+鼠标左键），发现里面有很多方法，例如push,replace。所以我们可以通过$router对象，使用这些方法（之前就是这么做的）。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226192608069-667382745-1577952624218.png" alt="img">（index.js）</p>
<p> 　<img src="/2019/12/24/blog33/1803687-20191226192849079-1751701280-1577952626520.png" alt="img">（点开VueRouter）</p>
<p>　　$route是当前处于<strong>活跃</strong>的路由，即页面渲染的路由（也是vue-router源码实现的）。</p>
<p> 　补充1：<strong>所有的组件都继承自Vue类的原型</strong>。</p>
<p>　　补充2：之前讲过，使用一个plugin即插件，如VueRouter，要先Vue.use(ueRouter)，其会执行ueRouter.install。所以如果我们想看VueRouter（vue-router）的源码，GitHub下载（注意是从node_modules看版本哦），然后打开其install.js开始看。会发现install.js里面有用Vue.component()全局注册了RouterView和RouterLink组件（也就是我们之前使用的&lt; router-view&gt;,&lt; router-link&gt;）。</p>
<p> 　13、全局导航守卫</p>
<p>　　当我们在进行路由跳转的时候，我们想监听跳转过程，从而进行一些操作，这就是导航守卫。</p>
<p>　　我们来考虑一个需求：<strong>在一个SPA应用中，如何改变网页的标题呢？</strong>网页标题是通过&lt; title&gt;来显示的，但是SPA只有一个固定的HTML，切换不同的页面时，标题并不会改变。但是我们可以通过JavaScript来修改&lt; title&gt;的内容，window.document.title&#x3D;’新的标题’。那么在Vue项目中，在哪里修改？什么时候修改比较合适呢？</p>
<p>　　利用vue的生命周期函数。create()创建出组件时回调的，mounted()我们的template挂载到整个DOM时回调的，updated()整个界面发生刷新时回调的。</p>
<p>　　所以导航守卫可以第一种写法：把create(){document.title&#x3D;’对应标题’}放入每个跳转路由的组件内。</p>
<p>　　但是这样写很累赘，每次有新组件如果需要这个功能，则都要加上，很麻烦。</p>
<p>　　可以发现，其本质是路由跳转，我们只需监听路由跳转，当路由跳转了，就修改对应的document.title即可。这就是全局导航守卫（监听全局的跳转）。</p>
<p>　　大致流程：首先在router&#x2F;index.js中，对路由实例使用beforeEach()函数（它会在路由即将改变前触发（即<strong>前置钩子&#x2F;前置守卫</strong>），对应的还有afterEach()），这个函数看源码：</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226201922725-292820709-1577952630408.png" alt="img">（打开beforeEach()）</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226201948494-649412526-1577952633063.png" alt="img">（打开NavigationGuard）</p>
<p>　　即路由的beforeEach()里面需要一个函数，里面包含三个参数：to,from,next。（其中next方法必须使用，否则无法路由跳转，因为原来内部beforeEach()是使用next()，当我们使用这个beforeEach()会把原来的beforeEach()覆盖的）注意，源码中，to和from都是Route类型，代表着从from跳转到to。</p>
<p>　　所以我们在index.js中的所有路由中加上一个meta元数据对象，里面放置对应的title。（元数据：描述数据的数据）</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226203014603-1003248008-1577952635644.png" alt="img">（home配置路由中加入meta，其他配置路由也是一样）</p>
<p>　　最后在index.js中，使用beforeEach()方法。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226203121009-1171494010-1577952714663.png" alt="img"> </p>
<p> 　然后当我们点击首页时，页面标题显示‘首页’。点击关于，页面标题显示‘关于’</p>
<p> <img src="/2019/12/24/blog33/1803687-20191226203310024-1573746087-1577952638934.png" alt="img">（点击 首页）</p>
<p> 　但是，当我们点击首页的子组件的时候，发现没有显示标题，例如此时我们点击‘新闻’。</p>
<p>　　<img src="/2019/12/24/blog33/1803687-20191226203626376-20891850-1577952641275.png" alt="img">（点击‘新闻’，标题是undefined）</p>
<p>　　这是因为子组件之前使用了路由嵌套。相当于此时我们获取的to属性是不同与父组件的，即没有meta，所以我们修改为:</p>
<p>document.title &#x3D; to.matched[0].meta.title; 获取父组件的meta。此时就可以了。</p>
<p><img src="/2019/12/24/blog33/1803687-20191226204052211-903736616-1577952643666.png" alt="img">（点击‘新闻’ 显示title）</p>
<p> 　补充1：刚才讲的是前置钩子（beforeEach()），如果是后置钩子，即afterEach，不需要主动调用next()函数（源码里也是说不需要的，因为表示的是路由跳转完了）。</p>
<p>　　补充2：前置钩子&#x2F;前置守卫 和后置钩子都称之为<strong>全局守卫</strong>。除了全局守卫，还有<strong>路由独享的守卫</strong>，<strong>组件内的守卫</strong>。进一步了解可以看官网：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB">VueRouter的导航守卫</a>。</p>
<p>　　14、vue-router keep-alive及其他问题</p>
<p>　　keep-alive是vue内置的一个组件，可以使被包含的组件保留状态，或<strong>避免重新渲染</strong>。例如，当我们点击渲染到某个A组件时，假设A组件里有两个子组件A1和A2，当点击A组件默认是先渲染A1时，我们再点击A2，当然此时渲染到A2。此时如果我们点击另一个路由，到B组件，再点击回A组件，此时，A组件中还是先渲染A1而不是我们之前最后操作的A2。原因是点击A组件时相当于Vue生命周期的creat()，当点击B组件是，相当于A的生命周期的destroy（），再点击回A，相当新创建create了A，所以A是回到默认状态A1，而不是destroy前的状态A2。如果我们想回到A2，则可以使用keep-alive。</p>
<p>　　router-view也是一个组件（之前分析vue-router源码的时候可见），如果直接被包在keep-alive里面，所有路径匹配到的视图组件都会被缓存。</p>
<p>　　所以，大致做法是：将原来的&lt; router-view&gt;标签包含在&lt; keep-alive&gt;标签内。</p>
<p>　　注意，可能行不通，因为路径关系没有配置好，需要用到activated()激活函数和beforeRouterLeave的组件内守卫。在离开路由组件时，通过beforeRouterLeave函数把路由栈顶路径保存为当前路径，然后activated()每次在激活的页面前把路径压进路由栈，即，保存了每次跳转路由前的路径为栈顶。　　<img src="/2019/12/24/blog33/1803687-20191227092742163-670098580-1577952647240.png" alt="img">（home.vue）</p>
<p> 　所以，整个过程是：点击A，默认打开A1，执行activated()，将A1的路径压进栈，点击A2前一刻，A1要离开了，执行了beforeRouterLeave()，把上一次的路径（A1路径）变为当前路径，因为点击A2，执行activated()，将上一次A1离开时，A1的路径压进栈（即栈顶记录的是上一次点击的组件路径）。当点击B，栈顶的保存的是A2的路径。所以当再点击A时，由于使用了keep-alive，缓存了，所以显示A2。</p>
<p>　　补充1：activated()和deactivated()这两个函数用于某组件中，在&lt; keep-alive&gt;标签（保持了状态）内的这个组件的&lt; router-view&gt;才有效，没有&lt; keep-alive&gt;包含的话，就不起作用（因为这两个函数是&lt; keep-alive&gt;的钩子函数）。</p>
<p>　　补充2：keep-alive有两个重要的属性：include，字符串或正则表达式，只有匹配的组件会被缓存；exclude，字符串或正则表达式，任何匹配的组件都不会被缓存。注意多个属性间不用加空格（因为涉及到正则表达规范的问题），如exclude&#x3D;“Profile,user”不要写成xclude&#x3D;“Profile, user”。</p>
<p>　　### vue-router的大致知识就是这些了，下一个博客就是关于vue-router的小案例：<a href="https://www.cnblogs.com/xinkuiwu/p/12105791.html">Tabbar</a>。</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue router</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>vue router</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之Vue router小案例TabBar（七）</title>
    <url>/2019/12/27/blog34/</url>
    <content><![CDATA[<p>内容：TabBar设计与实现(基于Vue-router)</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h3><h3 id="零、前言（源码）"><a href="#零、前言（源码）" class="headerlink" title="零、前言（源码）"></a>零、前言（<strong>源码</strong>）</h3><p>　　可以结合源码来看，最后自己实现。源码在我的GitHub上：TabBar源码（Vue-router小案例）。</p>
<h3 id="一、tabbar的基本结构的搭建"><a href="#一、tabbar的基本结构的搭建" class="headerlink" title="一、tabbar的基本结构的搭建"></a>一、tabbar的基本结构的搭建</h3><p>　　1、需求</p>
<p>　　tabbar就是类似下图的东西。可以让我们传入一些组件，图片，文字等。当我们点击“首页”，显示首页的相关东西；当我们点击‘分类’，显示分类的相关东西等。其实，这就是相当于把项目的结构搭建好了，之后我们做的项目中，就是往每个不同的选项构建对应的组件。　　<img src="/2019/12/27/blog34/1803687-20191227101427692-317030183.png" alt="img"></p>
<p> 　　2、实现思路（后续，就按照这个思路去一步步实现）</p>
<p>　　首先，如果在下方有一个单独的TabBar组件，你如何封装？自定义TabBar组件，在App中使用；让TabBar处于底部，并且设置相关的样式。　</p>
<p>　　接着，TabBar中显示的内容由外界决定：定义插槽；flex布局平分TabBar。</p>
<p>　　接着，自定义TabBarItem，可以传入图片和文字：定义TabBarItem，并且定义两个插槽：图片和文字；给两个插槽外层包装div，用于设置样式；填充插槽，实现底部TabBar的效果。</p>
<p>　　接着， 传入高亮图片。定义另外一个插槽，插入active-icon的数据。定义一个变量isActive，通过v-show来决定是否显示对应的icon。</p>
<p>　　接着，TabBarItem绑定路由数据。安装路由（npm install vue-router –save）；完成router&#x2F;index,js的内容，以及创建对应的组件；main.js中注册router；App中加入&lt; router-view&gt;组件。</p>
<p>　　接着，点击item跳转到对应路由，并且动态决定isActive。监听item的点击，通过this.$router.replace()替换路由路径；通过this.$route.path.indexOf(this.link)!&#x3D;&#x3D; -1来判断是否是active。</p>
<p>　　接着，动态计算active样式。封装新的计算属性：this.isActive?{‘color’:’red’}:{}。</p>
<p>　　3、VScode下，搭建tabbar的基本结构</p>
<p> 　首先，用Vue CLI2创建项目（Vue CLI3也可以）。目录终端输入vue init webpack tabbar。选项中注意使用runtimeonly（之前博客有分析过），安装路由（没安装也没关系，后面我们手动安装）。</p>
<p>　　我们先把默认安装的一些东西删除，如自带的HelloWorld.vue，App.vue的对应HelloWorld的引入，样式等。（此时，npm run dev ，页面应该是一片空白的）</p>
<p>　　注意，我们要用封装的思想，近可能多使用插槽，多复用一些公共的组件的思想。</p>
<p>　　在src&#x2F;assets创建img和css文件夹，在css文件夹下创建base.css（初始样式），并在App.vue中的style便签内用@import这个文件。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227144924562-495975312.png" alt="img"></p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227144950399-434957608.png" alt="img"></p>
<p> 　接着我们添加tabbarItem，并且让tab-bar水平分布，给背景色，边缘设置阴影，并且让其处于页面底部。tab-bar-item居中均等分，高度一般为49px（移动开发的经验值）。　　<img src="/2019/12/27/blog34/1803687-20191227145415303-1608184594.png" alt="img">（App.vue） <img src="/2019/12/27/blog34/1803687-20191227150642071-1657336020.png" alt="img">（App.vue）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227150726399-994407767.png" alt="img">（结果预览）</p>
<h3 id="二、TabBar和TabBarItem组件封装"><a href="#二、TabBar和TabBarItem组件封装" class="headerlink" title="二、TabBar和TabBarItem组件封装"></a>二、TabBar和TabBarItem组件封装</h3><p>　　之前我们写的TabBarItem非常不好，如果我们别的项目也要用时，要复制的代码太多了（HTML代码还有其样式代码等），我们要将其封装成独立的组件。这样就方便复用了。</p>
<p>　　1、基本实现</p>
<p>　　首先在components文件夹创建tabbar文件夹，里面放置关于tabbar功能的组件。在该文件夹下，创建TabBar.vue组件，然后将原来在App.vue写关于tabbar功能的部分对应写到TabBar.vue。如&lt; template&gt;的内容和&lt; style&gt;的内容。</p>
<p>　　并且在App.vue导入、注册和使用TabBar组件。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227152907931-237741870.png" alt="img">　</p>
<p> 　页面显示的结果和之前一样。但是我们把TabBar封装成组件了。</p>
<p>　　接着，我们把tabbaritem相关图片放置在之前创建的img文件夹中（放在创建一个tabbar文件夹中）。（如果想在VScode里面预览SVG图片，可以安装SVG Viewer插件）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227154754840-394816432.png" alt="img"></p>
<p>　　可以发现我们的图标每种分为两类，一类是未激活，一类是激活状态。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227155351193-838531538.png" alt="img"></p>
<p> 　然后，在TabBarItem里面使用img便签，引入对应图片。并且在style中设置大小。注意此时的img和我们的div内容如“首页”等都是行内标签，可以再用div把内容包含。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227160707552-2131832428.png" alt="img"></p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227160718460-1958580187.png" alt="img"></p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227161056334-1630861334.png" alt="img">（显示效果）</p>
<p>　　2、用组件化的思路重构之前的代码</p>
<p>　　上面写的代码，虽然最终可以实现我们想要的效果，但是我们可以发现，代码逻辑已经是嵌套在一起了，我们希望，tabbar应该只关心自己大的组件的逻辑（tabbar的布局和tabbar的样式），至于小的元素怎么布局不应该涉及，不然最后封装的组件乱七八糟，令人烦恼。</p>
<p>　　所以，tabbar封装完之后，放入插槽slot即可。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227162021636-1121632054.png" alt="img"> </p>
<p> 　然后在App.vue使用的tabbar组件中把内容填进去（即插入了插槽），注意最后我们不会如下图这么用，因为App.vue多了插槽内容的HTML代码和样式代码，很乱。所以我们再创建一个组件。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227162446371-563932950.png" alt="img"></p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227162508425-446303534.png" alt="img">（页面效果没问题）</p>
<p>　　所以我们再创建一个组件TabBarItem.vue组件（components&#x2F;tabbar内），然后把属于TabBarItem的template和style放到对应部分去，之后在到App.vue中导入、注册、使用TabBarItem.vue组件。TabBarItem.vue组件的使用是放在之前使用的TabBar组件中的，就是把TabBarItem.vue组件插入TabBar组件的插槽。</p>
<p>　<img src="/2019/12/27/blog34/1803687-20191227164505751-2050153604.png" alt="img"></p>
<p> 　<img src="/2019/12/27/blog34/1803687-20191227163706082-1765032061.png" alt="img"></p>
<p> 　　<img src="/2019/12/27/blog34/1803687-20191227164518289-331650358.png" alt="img">（页面显示4个item，因为插入4个组件）</p>
<p>　　现在先暂时不管填充的内容，因为后面我们会动态填充。到此，我们必须理解的是：<strong>定义封装了独立逻辑（独立的template和独立的style）的大组件TabBar和其中小组件TabBarItem，并且可以通过slot插槽把小组件插入到大组件中</strong>。这样做的好处是使用组件，不用再考虑样式的问题，因为内部写好了。</p>
<p>　　现在又出现了新的问题，刚刚TabBarItem里面填充的内容不能写死，不然在我们最后的页面显示的item都是一样的了。所以，我们继续在TabBarItem组件中使用slot插槽（有name属性，分别放图标和文字）。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227165055883-265006380.png" alt="img"></p>
<p> 然后在App.vue使用这个组件的插槽。</p>
<p><img src="/2019/12/27/blog34/1803687-20191227190123555-1654523116.png" alt="img"></p>
<p> 　<img src="/2019/12/27/blog34/1803687-20191227190137024-1296010951.png" alt="img">（页面展示）</p>
<p>　　此时，由于写成小组件+插槽的形式，假如说我们需要5个tabbaritem，直接复用组件，往组件插槽填内容，即可。非常方便！（即使用&lt; TabBarItem&gt;组件，里面填内容）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227190343041-631808693.png" alt="img">（组件随意复用）</p>
<h3 id="三、给TabBarItem传入active图片"><a href="#三、给TabBarItem传入active图片" class="headerlink" title="三、给TabBarItem传入active图片"></a>三、给TabBarItem传入active图片</h3><p>　　上一章中，我们只使用了未激活的图片，我们想当item处于活跃状态的时候显示另一张图片（对应的活跃的图片）。</p>
<p>　　所以在TabBarItem里面还需要一个插槽，用于放置图片（未激活与激活）。注意，是一开始把两张未激活与激活的图片传入到组件，然后通过状态决定显示哪一张，而不是根据状态插一张，另一个状态插一张。</p>
<p>　　首先在TabBarItem组件中，假如一个slot。　　<img src="/2019/12/27/blog34/1803687-20191227191252862-1999159559.png" alt="img"></p>
<p> 　然后，在App.vue中插入激活图片（一共传两个图片）。</p>
<p><img src="/2019/12/27/blog34/1803687-20191227191536061-272139257.png" alt="img"></p>
<p> 　但此时，没有根据状态确定显示激活图片还是未激活图片，此时同时显示两张图，这是不对的。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227191620002-1650860934.png" alt="img"></p>
<p> 　我们很容易想到使用v-if和v-else，加上一个激活变量isActive，来做。此外，如果我们想激活时，对应的item-text文字部分也变红（变个样式），也要设定一个有激活变量控制的样式。注意，<strong>插槽内容渲染时，会替换插槽slot的代码，如果我们想在插槽设定样式（包括刚刚说的v-if,v-else等属性），必须用div包裹其中，把本想写在插槽的样式写在这个div中</strong>。</p>
<p><img src="/2019/12/27/blog34/1803687-20191227193829793-816503234.png" alt="img"></p>
<p> 　<img src="/2019/12/27/blog34/1803687-20191227193857254-1019453333.png" alt="img"></p>
<p> 　此时，可以通过isActive为true还是false（状态），来控制显示的图标和文字是否处于激活状态。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227193943904-728981593.png" alt="img">（isActive: true）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227194019772-787727404.png" alt="img">（isActive: false）</p>
<h3 id="四、TabBarItem和路由结合效果"><a href="#四、TabBarItem和路由结合效果" class="headerlink" title="四、TabBarItem和路由结合效果"></a>四、TabBarItem和路由结合效果</h3><p>　　我们希望点击具体的item，页面主题得显示对应item的“主页内容”，即我们先点击“首页”，在主页内容中显示“首页”的东西（其实也是一个组件，即关于首页的组件）。现在我们就想让小组件TabBarItem与大组件页面主体一一对应（映射关系）。这就使用到我们的vue-router了（终于回归了主题，组件化思想的开发）。</p>
<p>　　首先，我们先安装路由（如果之前没有在项目安装的话）。l路径终端输入npm install vue-router –save （运行时依赖）。在src下创建router文件夹，并在router文件夹下建立index.js。在index.js导入vue，VueRouter；安装VueRouter插件，创建路由对象，配置路由映射关系，导出路由，导入路由（main.js中），在vue实例挂载路由（在我<a href="https://www.cnblogs.com/xinkuiwu/p/12093360.html">前一个博客</a>里有具体说明）。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227200700494-1620303996.png" alt="img">（index.js）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227200025501-2142827972.png" alt="img">（main.js）</p>
<p>　　由于我们有四个TabBarItem，所以要配置四个路由映射。当然也要创建四个大的组件啦（都是视图&#x2F;大页面方面的组件）。通常，先在src文件夹下创建views文件夹（通常放置视图、大的页面的组件），然后在views文件夹内在创建四个我们关于TabBarItem对应的大组件的文件夹：home文件夹，category文件夹，cart文件夹，profile文件夹。每个文件夹就是放置关于这个视图的组件文件。我们简单在里面创建对应大组件（先简单显示一些文字内容即可）。</p>
<p>　　补充：通常src&#x2F;components放置的是公共组件。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227201536900-982409995.png" alt="img"></p>
<p> 　　然后，来到index.js配置我们的映射关系。要注意使用懒加载哦。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227210837990-667875978-1577952263299.png" alt="img">（注意是component不是components，这个小失误害我调试半天）</p>
<p>  　　接着，我们需要监听某个TabBarItem的点击，从而对应渲染出某个视图组件。</p>
<p>　　我们完全可以在子组件TabBarItem.vue进行监听（而不是具体使用组件的那里监听，不然就得监听4次了），方法中使用绑定的path属性修改当前路径，即使用props往组件绑定属性（path属性）。然后在使用组件的时候（App.vue），传入路径path。路由模式也可以使用为history。</p>
<p><img src="/2019/12/27/blog34/1803687-20191227211058174-1439610816-1577952267356.png" alt="img"></p>
<p> 　　<img src="/2019/12/27/blog34/1803687-20191227211140694-1461988501-1577952269981.png" alt="img">（注意写上&lt; router-view&gt;不然不会显示组件）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191227211233163-1534263241-1577952276589.png" alt="img">（点击购物车，路由跳转到购物车组件，主页显示购物车组件（里面只是简单的内容：购物车车），点击其他item也是有路由跳转到对应组件）</p>
<h3 id="五、TabBarItem的颜色动态控制"><a href="#五、TabBarItem的颜色动态控制" class="headerlink" title="五、TabBarItem的颜色动态控制"></a>五、TabBarItem的颜色动态控制</h3><p>　　第三章，我们只讲到了状态isActive控制图片和文字是否处于激活状态的图片和文字。但我们通常是点击（激活）某个具体的item，让其处于激活，其他的item处于未激活。</p>
<p>　　所以，状态isActive变量不能写死，需要动态传递。使用计算属性。通过结合$route（活跃路由对象，只有一个）及判断item路径和活跃路径对比来实现状态控制。注意取反哦。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228150252538-1753083111-1577952379714.png" alt="img">（TabBarItem.vue）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228150329604-1052435553-1577952280050.png" alt="img">（点击首页，首页被激活；点其他的也一样）</p>
<p> 　现在还有一个问题（需求）。我们之前写的代码，点击的TabBarItem的文字部分的样式是直接写死的，即都是只能在活跃的时候显示红色，这个封装也是不够合理的。合理的组件封装应该不需要使用者修改组件源码的。</p>
<p>　　所以我们希望别人在使用TabBarItem组件（App.vue中），就能自由选择想选的颜色。类似于下图用法，这样别人就不需要知道我们在TabBarItem组件设计时的源码是怎么写的了。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228150917527-1008317931-1577952285508.png" alt="img"></p>
<p> 　首先，我们在props中写activeColor对象，里面有类型type和默认的颜色。</p>
<p> 　<img src="/2019/12/27/blog34/1803687-20191228151551242-1795706643-1577952287732.png" alt="img"></p>
<p> 　然后用计算属性activeStyle，绑定动态的style。</p>
<p> 　<img src="/2019/12/27/blog34/1803687-20191228151815122-907613596-1577952292202.png" alt="img"></p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228151829419-1965374331-1577952290019.png" alt="img">　　最后，在使用TabBarItem组件时，可以选择使用一些想选的颜色。也可以选择不选，则为默认颜色。</p>
<p><img src="/2019/12/27/blog34/1803687-20191228152152278-1023294620-1577952294683.png" alt="img"></p>
<p> 　<img src="/2019/12/27/blog34/1803687-20191228152251312-1024468406-1577952298174.png" alt="img">（字体显示默认颜色）</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228152324036-1323620888-1577952300699.png" alt="img">（字体，显示设定的蓝色）</p>
<h3 id="六、进一步组件化"><a href="#六、进一步组件化" class="headerlink" title="六、进一步组件化"></a>六、进一步组件化</h3><p>　　我们可以看到，之前我们写了一大推代码在App.vue里面，其实还是可以进一步简化的。　　<img src="/2019/12/27/blog34/1803687-20191228153010383-1970630371-1577952303488.png" alt="img"></p>
<p> 　首先，发现tab-bar组件内很多代码，我们可以把其封装成一个组件，最后在App.vue里面使用这个组件即可。<strong>这就是组件化开发，形成了组件树</strong>，根组件为App.vue，App.vue所引用的的组件是其子组件，子组件可能还引用了别的组件等。</p>
<p>　　大致步骤：先在components&#x2F;tabbar下创建MainTabBar.vue组件。然后把刚刚在App.vue里面写关于Tabbar的template和组件全部放在这个MainTabBar.vue组件内封装，注意修改文件的路径（或者使用本博客最后一点知识：给路径起别名的方式）。</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228154756546-1826721359-1577952309082.png" alt="img"></p>
<p> 　然后在App.vue中使用这个封装的MainTabBar.vue组件。这样App.vue的代码结构就很清晰好看了。</p>
<p><img src="/2019/12/27/blog34/1803687-20191228154935274-1304130674-1577952310361.png" alt="img"></p>
<p> 　最终的页面效果也是不变的。</p>
<p>　　补充：给路径起别名。（webpack配置中的resolve对象的alias属性）</p>
<p>　　之前发现，我们在复制一些代码到别的目录下时，一些资源文件的路径需要重新配置，非常的不方便。</p>
<p>　　由于我们是用脚手架vue CLI来构建项目的，在build文件夹webpack.base.conf.js（公共基础配置）中，已经是有一些解决方案（resolve），如：</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228163600726-888412559-1577952320018.png" alt="img"></p>
<p> 　其中，extensions的意思是，我们在引用一些文件、资源时，可以省略的扩展名。例如我们引用Home.vue这个组件，可以直接写成引用Home即可。</p>
<p>　　alias是别名的意思。这里是给src起别名（src是源文件目录），起为@，意思是说在使用路径时，可以通过@代替src。也就是说当我们想使用某个文件资源时，以src（@）为路径去引用。这样的好处就是可以把某个组件使用到的路径直接复制使用到别的组件中，确保引入文件的路径是正确的。</p>
<p>　　类似道理，我们把一些常用资源的文件路径给起别名，然后每次用的时候就方便很多了。常用的起别名有：</p>
<p>　　<img src="/2019/12/27/blog34/1803687-20191228164548893-2131682473-1577952314553.png" alt="img">（注意）</p>
<p> 　当然还有其他路径，后面我们用到在添加。也就是说方便我们写项目代码的，就可以添加。</p>
<p>　　<strong>但注意，import所导入的路径可以使用这种起别名的路径。而HTML标签内，如src属性，则需要在别名前加~（波浪号），不然找不到路径。</strong></p>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue router</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>vue router</tag>
        <tag>TabBar</tag>
      </tags>
  </entry>
  <entry>
    <title>配置ES6的JavaScript运行环境-Visual Studio Code</title>
    <url>/2019/12/17/blog35/</url>
    <content><![CDATA[<p>内容：在Visual Studio Code下，配置ES6的JS运行开发环境（通过babel把ES6转码为ES5语法的代码）和VS相关插件。（之前都用sublimeText3，好像现在主流都是用VS的比较多）</p>
<span id="more"></span>



<p><strong>前排提示</strong>：如果只是学习，单纯调试使用ES6的JS代码，安装Visual Studio Code和Node.js（正文的第一步和第二步），然后就可以在Debug下执行Run with Node.js就可以在debug控制台观看ES6的JS代码执行的结果了。如果查看HTML代码的效果，可以只看正文的第七步的第3，4点。不过还是建议观看全文，从开发角度，构建一个工程。</p>
<p>正文：</p>
<h3 id="一、下载和安装Visual-Studio-Code"><a href="#一、下载和安装Visual-Studio-Code" class="headerlink" title="一、下载和安装Visual Studio Code"></a>一、下载和安装Visual Studio Code</h3><p>　　在官网下载Visual Studio Code：<a href="https://code.visualstudio.com/">Visual Studio Code</a></p>
<p>　　安装完的VS界面如图所示：</p>
<p><img src="/2019/12/17/blog35/1803687-20191217100919874-1865037743.png" alt="img"></p>
<h3 id="二、下载和安装Node-js"><a href="#二、下载和安装Node-js" class="headerlink" title="二、下载和安装Node.js"></a>二、下载和安装Node.js</h3><p>　　在官网下载Node.js：<a href="https://nodejs.org/en/">Node.js</a>（在生产环境，建议使用LTS，比较稳定，bug相对比较少。）如果下载成功，可以的win的cmd命令下用node -v查看自己的node版本，例如我这次下的是12.13.1版本。注意，当我们安装好Node时，软件包管理工具npm也安装了。</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217100204012-1083348072.png" alt="img"> （win+R键，输入cmd）    <img src="/2019/12/17/blog35/1803687-20191217100440228-2102515367.png" alt="img">(node -v)</p>
<h3 id="三、安装全局的babel"><a href="#三、安装全局的babel" class="headerlink" title="三、安装全局的babel"></a>三、安装全局的babel</h3><p>　　使用npm命令安装全局的babel。输入命令：npm install babel-cli babel-eslint -g</p>
<p>   <img src="/2019/12/17/blog35/1803687-20191217100540959-1316796870.png" alt="img"></p>
<h3 id="四、使用npm-init命令创建工程"><a href="#四、使用npm-init命令创建工程" class="headerlink" title="四、使用npm init命令创建工程"></a>四、使用npm init命令创建工程</h3><p>　　如果有创建的工程了，这一步可以跳过。</p>
<p>　　我们可以在VS的终端下，使用npm init命令创建工程。在控制台下，创建工程目录，如:D:\front end\workspace，然后进入该目录，使用命令：npm init（或者是 npm init -y），-y代表全部默认同意，就不用一次次按回车了。此时在该目录的根目录下创建了生成package.json文件（依赖文件），可以根据自己的需要进行修改 。</p>
<p>　　此外，为了方便管理，通常我们需要创建两个目录：src目录（源码目录）和dist目录（利用Babel编译成的ES5代码的文件都在这里，HTML页面需要引入的是这里的js文件而不是src中的），所以有两个目录：D:\front end\workspace\dist和D:\front end\workspace\src</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217100801557-205915367.png" alt="img">（点击terminal，选择new terminal）</p>
<p>  <img src="/2019/12/17/blog35/1803687-20191217101017073-344826067.png" alt="img">（npm init&#x2F;npm init -y）</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217101624560-1608779295.png" alt="img">（package.json文件，可以修改配置值）</p>
<h3 id="五、本地安装babel-preset-es2015-和-babel-cli（编译插件）"><a href="#五、本地安装babel-preset-es2015-和-babel-cli（编译插件）" class="headerlink" title="五、本地安装babel-preset-es2015 和 babel-cli（编译插件）"></a>五、本地安装babel-preset-es2015 和 babel-cli（编译插件）</h3><p>　　在终端执行：npm install –save-dev babel-preset-es2015 babel-cli </p>
<p>　　（注意此时的之前的package.json文件会自动多了devDependencies选项。其实还创建了package-lock.json文件和node_modules文件夹） </p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217102809284-885227640.png" alt="img"></p>
<p>​    <img src="/2019/12/17/blog35/1803687-20191217102959678-1178473458.png" alt="img"></p>
<h3 id="六、新建-babelrc及简单检测（ES6转化为ES5的语法）"><a href="#六、新建-babelrc及简单检测（ES6转化为ES5的语法）" class="headerlink" title="六、新建.babelrc及简单检测（ES6转化为ES5的语法）"></a>六、新建.babelrc及简单检测（ES6转化为ES5的语法）</h3><p>　　在根目录下新建一个.babelrc文件，并写入代码：</p>
<p>　　 { “presets”:[ “es2015” ], “plugins”:[] } </p>
<p>　　这样就创建了.babelrc文件</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217103557568-1926543486.png" alt="img"></p>
<p> 　现在可以在终端输入的转换命令了，这次ES6成功转化为ES5的语法。</p>
<p>　　简单检测一下：</p>
<p>　　1、首先在项目文件根目录下新建一个index.html文件（创建.HTML文件，在代码输入! 和tab键可以快速创建HTML5模板，当然在VS中我们也可以定制自己的模板）。注意，在引入js文件时，引入的是dist目录下的文件（就是我们想要把src下的ES6文件转换为ES5语法文件）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己的JS代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>　　2、在src目录下，新建index.js文件。通常是ES6语法文件，我们简单用let（ES6特有）举例。（我们的目标就是将其转换为在ES5语法的文件并放入到dist目录下）</p>
<p> let i &#x3D; 10; console.log(i); </p>
<p>　　3、在终端使用命令：babel src&#x2F;index.js -o dist&#x2F;index.js（将ES6语法转换为ES5语法）　　<img src="/2019/12/17/blog35/1803687-20191217105327991-591678386.png" alt="img"></p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217105419850-1102892532.png" alt="img">（转换为了ES5语法，并保存在dist目录下）</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217105542414-1409053093.png" alt="img">（运行时，也输出正确结果）（通过VS界面的DEBUG选项中，选择Run with Node.js）</p>
<h3 id="七、VS-code的常用插件"><a href="#七、VS-code的常用插件" class="headerlink" title="七、VS code的常用插件"></a>七、VS code的常用插件</h3><p>　　1、基本插件扩展用法。我们可以在主界面的左边工具栏中选中Extensions（最后一个），然后再搜索框内搜索我们需要的扩展插件。下面推荐几个常用的插件和用法。</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217145251489-126972363.png" alt="img"></p>
<p> 　2、ESLint。JS语法代码检测。</p>
<p>　　3、open in browser。可以通过邮件把我们写的HTML代码展示到我们的浏览器中。</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217145836652-1994429289.png" alt="img">（可以选择默认的浏览器或者是下面自己选择的浏览器）</p>
<p> 　补充：我们可以更换我们自己的VS默认浏览器，VS中，file–&gt;preferences–&gt;settings，然后再弹出来的界面搜索框输入插件的默认文件（open-in-browser.default）。然后再下面的Workspace中输入浏览器名：Chrome（这里我用谷歌浏览器）。然后保存。之后在使用Open in Default Browser就可以在谷歌展示我们的HTMl代码了。</p>
<p>　　　　<img src="/2019/12/17/blog35/1803687-20191217150033187-820253161.png" alt="img"></p>
<p> 　　4、livereload。平时我们在代码区中修改，然后保存，然后再打开浏览器刷新，才能显示新的变化。livereload插件能够使得我们在代码区每保存一次，网页显示的东西自动更新一次。（类似webpack-dev-server）</p>
<p>​    <img src="/2019/12/17/blog35/1803687-20191217151303435-765932833.png" alt="img">（选择livereload）</p>
<p>　　首先，在VS安装好livereload之后，同时按ctrl+shift+p,输入框内输入livereload，就会显示LiveReload:Enable&#x2F;disable server，点一下就会开启这个服务。</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217151422597-1456224826-1581563742242.png" alt="img"></p>
<p>   然后，在谷歌浏览器网上应用商店搜索livereload，并安装，然后在浏览器扩展程序中启用并允许访问文件网址。 　<img src="/2019/12/17/blog35/1803687-20191217151541755-2051284121.png" alt="img"></p>
<p>　　　　<img src="/2019/12/17/blog35/1803687-20191217151625174-578714816.png" alt="img">（启用）</p>
<p>　　<img src="/2019/12/17/blog35/1803687-20191217151919980-393767128.png" alt="img">（允许）</p>
<p> 　这样，当我们在浏览器打开了的自己代码网页，点击浏览器（右上角）的livereload按钮，从空心<img src="/2019/12/17/blog35/1803687-20191217152131222-1849310826.png" alt="img">到实心<img src="/2019/12/17/blog35/1803687-20191217152145000-1493748892.png" alt="img">。之后，我们每次在VS修改代码，每次保存之后，就可以直接在浏览器看到我们的最新一次的代码修改的展示结果了。</p>
<p> 　5、VS Code JavaScript(ES6) snippets。它是如今最流行的代码片段插件，可以辅助我们快速编写ES6&#x2F;ES7代码。例如：输入imp，回车之后，就变成import moduleName from ‘module’。</p>
<p>　　 <img src="/2019/12/17/blog35/1803687-20191217153851841-750101971.png" alt="img"></p>
<p>　　6、Beautify。在写代码或者是粘贴代码时，缩进的格式变乱，需要一行一行的调整十分麻烦。Beautify是一个代码格式化工具，能帮助我们调整。</p>
<p>　　首先下载Beautify</p>
<p>   <img src="/2019/12/17/blog35/1803687-20191217161955682-1900202428-1581563753071.png" alt="img"></p>
<p>　　在工作目录下建立.jsbeautifyrc文件。（这个排版格式，我们也是可以定义自己的模板）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;brace_style&quot;: &quot;none,preserve-inline&quot;,</span><br><span class="line">   &quot;indent_size&quot;: 2,</span><br><span class="line">   &quot;indent_char&quot;: &quot; &quot;,</span><br><span class="line">   &quot;jslint_happy&quot;: true,</span><br><span class="line">   &quot;unformatted&quot;: [&quot;&quot;],</span><br><span class="line">   &quot;css&quot;: &#123;</span><br><span class="line">     &quot;indent_size&quot;: 2</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>　　启用保存文件就自动排版。在VSCode的配置文件里添加 “editor.formatOnSave”:true （setting.json文件里面）  </p>
<p>  <img src="/2019/12/17/blog35/1803687-20191217162401160-1325622885.png" alt="img"></p>
<p> 　这样，只要我们在自己工作目录下，保存代码，其自动就会按照格式调整了。</p>
<p> <strong>备注：上述插件是我本人（菜鸟一个）目前使用到的，日后有使用到好的插件，我再分享加入进去。</strong></p>
]]></content>
      <categories>
        <category>VScode 配置</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Visual Studio Code</tag>
        <tag>运行配置</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之Vuex（八）</title>
    <url>/2019/12/29/blog36/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（Vuex，终于到Vuex了，泪目）</p>
<p>内容：学习和使用Vuex。</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><h3 id="一、Vuex概念和作用解析"><a href="#一、Vuex概念和作用解析" class="headerlink" title="一、Vuex概念和作用解析"></a>一、Vuex概念和作用解析</h3><p>　　1、认识Vuex</p>
<p>　　Vuex是一个专为vue.js应用程序开发的<strong>状态管理模式</strong>。</p>
<p>　　它采用<strong>集中式存储管理</strong>应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex也集成到Vue的官方调试工具，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。Vuex也是响应式的。</p>
<p>　　2、状态管理</p>
<p>　　我们可以简单地将状态管理看成把需要多个组件共享的变量（状态）全部存储在一个对象里，然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。</p>
<p> 　看上去我们可以直接修改Vue的原型实现共享变量（自己封装也很麻烦），但其不是响应式的。而Vuex就是为了提供一个在多个组件间共享状态的插件并且还是响应式的。</p>
<p>　　3、管理什么状态</p>
<p>　　有什么状态是需要我们在多个组件间共享的呢？</p>
<p>　　如果我们做过大型开发，一定遇到过多个状态，在<strong>多个界面间的共享问题</strong>。比如用户的登录状态、用户名称、头像、地理位置信息等等。比如商品的收藏、购物车的物品等等。这些状态信息，我们都可以放在统一的地方，对它进行保存和管理（用Vuex），而且它们还是响应式的。</p>
<h3 id="二、单界面到多界面状态管理切换"><a href="#二、单界面到多界面状态管理切换" class="headerlink" title="二、单界面到多界面状态管理切换"></a>二、单界面到多界面状态管理切换</h3><p>　　1、单界面的状态管理</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230084458159-1831636706-1577951944336.png" alt="img"></p>
<p> 　state储存当前界面（组件）的状态（姑且看成在vue实例中的data中的属性），这个状态是在view（视图层）中显示，当发生一些行为actions时，会修改状态，这个状态也是通过view显示。使用Vue就可以做到单界面的状态管理。</p>
<p>　　2、多界面状态管理</p>
<p>　　当我们不想只在一个界面进行状态管理，即想多界面状态管理。也就是说对于某些状态（状态1,2,3）来说只属于我们某一个视图，但是也有一些状态（a,b,c）属于多个视图共同想要维护的。通常，状态1,2,3放在自己的房间里，自己管理自己；但是状态a,b,c，我们希望交给一个大管家来统一帮助我们管理，而Vuex就是为我们提供这个大管家的工具。</p>
<p>　　<strong>全局单例模式</strong>（大管家）。我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。之后，我们每个视图，按照我们<strong>规定好的</strong>规定，进行访问和修改等操作。这就是Vuex背后的基本思想。（单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。）</p>
<p>　　首先，安装。Vuex是个插件，先安装，npm install vuex –save（运行时依赖）。</p>
<p>　　接着，创建Vuex的文件夹（src下）。通常我们会把使用Vuex的代码放置在一个文件夹内进行管理（类似使用vue-router我们会创建一个router文件夹），所以我们创建一个名为store的文件夹（通常起store仓库，而不是vuex）。</p>
<p>　　然后在store文件夹下，创建index.js。导入Vue和Vuex，安装插件（Vue.use（插件）），创建Vuex.store对象（放置state，mutation，actions，getters,modules），接着导出store。然后在main.js中使用，挂载。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230090706459-2043570552-1577951968377.png" alt="img"></p>
<p> 　<img src="/2019/12/29/blog36/1803687-20191230090451862-550869321-1577951971673.png" alt="img"> </p>
<p>　　 Vuex.store对象中，state就是放置共享的状态（可以简单先看成变量）。由于store已经挂载在vue实例上，也就是所有的组件都可以使用和这个状态，通过$store来调用这个index.js中的store，即Vuex.store实例对象。然后通过$store.state.X属性来获取state中的X属性。</p>
<p><img src="/2019/12/29/blog36/1803687-20191230092215533-807456798-1577951974091.png" alt="img"></p>
<p> 　官方的图。可以发现组件不是直接地获取和修改state对象的，是有一定流程的。devtools是Vue开发的一个浏览器插件，可以帮我们记录跟踪每次修改state的记录。<strong>注意</strong>，组件可以直接操作到mutations，但一定是得是同步操作（因为devtools也是同步的），而如果是异步操作，就必须经过actions的流程。而异步操作通常是网络请求，所以actions和后端backend API是可以结合使用的。</p>
<p>　　3、devtools和mutations</p>
<p>　　devtools是vue开发的一个浏览器插件。假设我们使用Chrome浏览器，打开Chrome网上应用，搜索devtools。</p>
<p><img src="/2019/12/29/blog36/1803687-20191230095505362-408305347-1577951976986.png" alt="img"></p>
<p> 　点击添加，当我们重新打开Chrome浏览器，打开控制台，选项多个vue，说明安装成功。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230095816527-437167304-1577951344687.png" alt="img"></p>
<p> 　这个devtools插件就是用来调试vue程序的（包括Vuex）。点击第二个按钮，就是专门调试Vuex的界面，例如我之前在index.js代码中添加了state的一个属性count，浏览器也显示出来了。此外，如果我们是通过mutations修改的状态，也是可以在这里面进行跟踪。这也是官网推荐我们不要在组件中直接修改state的原因之一。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230101729025-222781669-1577951325354.png" alt="img"></p>
<p> 　mutations中，通常定义一些方法，而这些方法的默认参数就是state对象，所以操作state对象的一些属性非常容易。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230101702200-1134948414-1577951338382.png" alt="img">（mutations里面定义方法）</p>
<p> 　然后假如在App.vue调用这个方法，（首先监听事件等），然后在methods中定义方法，使用这个mutation的方法，但注意得使用**.commit(‘方法名’)**，而不是直接.方法名。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230102439432-1998894975-1577951998731.png" alt="img"></p>
<p> 　然后用devtools查看，发现的确可以追踪状态的改变。并且选择某次的修改（从右边的记录栏里），可以查看当时的state情况。</p>
<p><img src="/2019/12/29/blog36/1803687-20191230102427385-1521935516-1577951333885.png" alt="img"></p>
<h3 id="三、Vuex核心"><a href="#三、Vuex核心" class="headerlink" title="三、Vuex核心"></a>三、Vuex核心</h3><p>　　Vuex核心概念：<strong>State，Getters，Mutation，Action，Module</strong>。State保存状态相关的信息，Getters优点类似组件的计算属性，Mutation通常定义一些操作状态的方法，Action主要做些异步操作，Module用于划分模块，针对不同模型，进行一些保存等操作。</p>
<p>　　1、state单一状态树的理解</p>
<p>　　<strong>state单一状态树（Single Source of Truth，单一数据源）</strong>。</p>
<p>　　例如，在我们国内有很多信息需要被记录，例如上学时的个人档案，工作后的社保记录等，这些信息被分散在很多地方进行管理，有一个你需要办某个业务时（比如入户某个城市），你会发现你需要到各个对应的地方获取（打印）各种资料信息，最后到一个地方提交证明你的信息无误。（这样做的好处是管理责任划分明显，安全性高。）这种保存信息的方案，低效又不方便管理，以及日后的维护也是一个庞大的工作。</p>
<p>　　这个和我们在应用开发中比较类似，如果你的状态信息是保存到多个Store对象中，那么之后的管理和维护等等都会变得特别困难，所以<strong>Vuex也使用了单一状态树来管理应用层级的全部状态</strong>。单一状态树能够让我们最直接的方法找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</p>
<p>　　2、getters基本使用</p>
<p>　　有时候，我们需要从store中获取一些state变异后的状态，然后使用这个变异（就是做某些操作）的状态。</p>
<p>　　例如基于之前counter例子，使用getters，操作counter变为平方后的值。</p>
<p>　　同样地，getters内的方法也是有默认参数state。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230105307279-908642179-1577951349722.png" alt="img"></p>
<p>　　然后通过$store.getters.方法名调用。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230105622307-313305349-1577951351428.png" alt="img"></p>
<p> 　最后在页面也显示了正确的结果。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230105546832-1837264897-1577951354391.png" alt="img"></p>
<p> 　总结：getters里面定义的方法是针对state的，虽然它在单个界面使用的时候，非常类似于计算属性。但是如果在多个界面使用时，getters的方法是比计算属性好得多，因为不需要在每个界面都定义和使用计算属性那么麻烦。（这更体现了公共管理state的思想，妙啊）</p>
<p>　　此外，getters定义的方法定义中，除了可以传入state，也可以传入getters本身（将其作为方法中的参数）。</p>
<p><img src="/2019/12/29/blog36/1803687-20191230142018573-1402162140-1577951357828.png" alt="img"></p>
<p> 　　假如我们需要带参数的getters方法，即可以返回一个函数，让这个函数带参数。注意，不能直接想之前一样简单的把参数放入getters方法函数中（因为其本身就有默认参数，放进去也是只是代替默认参数的名称而已，里面调用的还是默认参数，如state,getters等），这样不起作用。　　</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230142409263-620306451-1577951360416.png" alt="img"> </p>
<p> <img src="/2019/12/29/blog36/1803687-20191230142517043-1874995329-1577952007938.png" alt="img"></p>
<p> 　当然也可以写成箭头函数的形式：</p>
<p><img src="/2019/12/29/blog36/1803687-20191230142801723-915191364-1577951365628.png" alt="img"></p>
<p>　　3、mutations的携带参数</p>
<p>　　Vuex的store状态的更新唯一方式：<strong>提交Mutation</strong>。（$store.commit()方法）</p>
<p>　　Mutation主要包括两部分：<strong>字符串的事件类型（type）</strong>和<strong>一个回调函数（handler）</strong>，该回调函数的第一个参数就是state。例如之前我们的举例中，increment是事件类型，具体的处理就是回调函数。（后一节有说这种格式的提交风格）</p>
<p>　　在通过mutation更新数据的时候，有可能我们希望携带一些<strong>额外的参数</strong>。参数被称为是mutation的<strong>载荷</strong>（<strong>payload</strong>）。</p>
<p>　　mutations可以携带参数，在commit后面附上变量即可，然后在mutation对应的方法里面使用这个参数即可。例如只提交一个参数（变量，对象都行）：（当传入多个变量时，可以写成一个对象）</p>
<p><img src="/2019/12/29/blog36/1803687-20191230143711129-180359759-1577951371510.png" alt="img"></p>
<p> 　<img src="/2019/12/29/blog36/1803687-20191230143815498-714701509-1577951373863.png" alt="img"></p>
<p>　　4、Mutation的提交风格</p>
<p>　　上一小节，是通过commit进行提交时一种普通的方式。</p>
<p>　　Vue还提供了另外一种风格，它是一个包含type属性的对象。此时，后面是一个payload对象，即下例中的count是一个对象。（此时代码写的就和之前不一样）<img src="/2019/12/29/blog36/1803687-20191230144927568-583148471-1577951377808.png" alt="img"></p>
<p> 　<img src="/2019/12/29/blog36/1803687-20191230144744011-621923655-1577951381918.png" alt="img">（直接引用count是一个payload对象，调用值的话，写成count.count才合理（前一个count是形参，后者的count指的是原来的count值））</p>
<p> 　所以应该写成这样比较合理：</p>
<p>　　　<img src="/2019/12/29/blog36/1803687-20191230145026814-706313984-1577951384095.png" alt="img"></p>
<p>　　5、Mutation响应规则（数据的<strong>响应式</strong>原理）</p>
<p>　　　Vuex的store中的state是响应式的（源码中是通过Dep，Dep是data每个对象包括子对象都拥有一个该对象, 当所绑定的数据有变更时, 通过dep.notify()通知Watcher），当state中的数据发生改变时，Vue组件会自动更新。</p>
<p>　　（简单来说，state中的属性都会被加入到响应式系统，而响应式系统会监听属性的变化，当属性发生变化时，会通知所有界面中用到该属性的地方，让界面发生刷新）</p>
<p>　　这就要求我们必须遵守一些Vuex对应的规则：<strong>提前在store中初始化好所需的属性</strong>。当给state中的<strong>对象添加新的属性</strong>时，使用下面的方式：</p>
<p>　　方式一：<strong>使用Vue.set(obj, ‘newProp’，123)</strong> 。这样做是响应式的，把在内部把‘newProp’也加入了响应式系统。</p>
<p>　　删除属性时，用<strong>Vue.delete(obj, ‘delProp’) .</strong></p>
<p>　　方式二：<strong>用新对象给旧对象重新赋值</strong>。</p>
<p>　　注意，如果使用<strong>obj.newProp&#x3D; ‘xx’<strong>，不是响应式的（因为之前没有这个obj.newProp的Dep）。此外，用</strong>delete</strong>方法删除属性也是非响应式的，因为这些方式不能加入到原来的响应式系统中。（这也是<strong>Vue响应式</strong>的内在要求，不仅是vuex，组件等等都是。）</p>
<p>　　6、Mutation的类型常量</p>
<p>　　在mutation中，我们定义了很多事件类型（也就是其中的方法名称）。当项目增大时，vuex管理的状态越来越多，需要更新状态的情况越来越多，那么意味这mutation的方法越来越多。使用者需要大量精力去记住这些方法，甚至在多个文件间来回切换，查看方法名称，很麻烦。</p>
<p>　　也就是说，有时候我们需要记mutation的type，当定义和commit的时候都会用到，但是两边复制粘贴，太麻烦了。这时候，可以使用mutation的类型常量。</p>
<p>　　首先，在store文件夹下，创建mutations-types.js文件。里面定义一些关于mutation类型的常量（并导出），例如下例，此时INCREMENT就相当于‘increment’。</p>
<p><img src="/2019/12/29/blog36/1803687-20191230152315624-265565573-1577951386184.png" alt="img"></p>
<p> 　<img src="/2019/12/29/blog36/1803687-20191230152240877-221426829-1577951387311.png" alt="img">（index.js） </p>
<p> 　然后，在App.vue导入这个常量。（不是默认导出，记得用大括号哦）</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230152543450-1362617266-1577951392162.png" alt="img">（App.vue）</p>
<p> 　对应我们commit使用这个常量，就很简单了，不用来回看了。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230152643796-1488877844-1577954134780.png" alt="img"></p>
<p> 　但是我们还得保证mutation定义的时候，方法名没有写错，所以，我们也把这个常量导入到index.js中。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230152854482-2135310890-1577951397343.png" alt="img"></p>
<p> 　修改成[‘XX’]的方式，然后用常量代替。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230152834477-540601590-1577952043867.png" alt="img"></p>
<p> 　<img src="/2019/12/29/blog36/1803687-20191230152937800-199533397-1577951402121.png" alt="img"></p>
<p>　　7、actions的使用详解</p>
<p>　　通常情况下，<strong>vuex要求我们mutation中的方法必须是同步的</strong>。</p>
<p>　　主要的原因是当我们使用devtools时，可以devtools可以帮助我们捕捉mutation的快照。但是如果是异步操作，那么devtools将不能很好地追踪这个操作什么时候会完成。</p>
<p>　　 所以不要在mutation中进行异步操作。</p>
<p>　　但是在某些情况，我们确实想在vuex中进行一些异步操作，比如网络请求。</p>
<p>　　action类似于mutation，但是是用来代替mutation进行异步操作的。</p>
<p>　　action的基本使用：</p>
<p>　　action中定义的方法也有默认参数，但不是state，而是context（上下文），目前可以理解为store。但注意<strong>修改state的唯一途径是通过mutation</strong>。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230155630393-1250551510-1577951405233.png" alt="img"></p>
<p> 　然后由于执行的是异步操作，对应的App.vue组件使用的方法也要修改。使用**dispatch()**（派遣）。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230155832211-733195188-1577952043784.png" alt="img"></p>
<p> 　此时，进行的异步操作可以被devtools捕获了。</p>
<p>　　同样地，action也可以带参数的。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230160109705-1723705627-1577951411209.png" alt="img">（App.vue）</p>
<p>　　 <img src="/2019/12/29/blog36/1803687-20191230160040965-286866272-1577951412993.png" alt="img">（index.js）</p>
<p> 　如果我们想在异步操作完成的时候，出现提示信息。可以结合使用Promise（ES6新增）。即把异步操作进行Promise封装。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230160902792-1946914926-1577951418357.png" alt="img">（index.js）</p>
<p>　　然后在App.vue中使用then()，即执行异步请求成功后的操作。（相当于通过action中转，在返回Promise对象后使用then()函数）</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230160739956-1544939159-1577951417352.png" alt="img">　</p>
<p>　　8、modules的使用</p>
<p>　　Vue使用单一状态树，那么也意味着很多状态都会交给Vuex管理，当应用变得很复杂时，即写states，mutations，actions，getters代码过多时，会显得store对象比较臃肿。</p>
<p>　　为解决这个问题，Vuex允许我们将store分割成模块（module），而每个模块拥有自己的states、mutations、actions、getters等。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230161950390-1149858214-1577951423427.png" alt="img"></p>
<p> 　取模块中的某状态时，是使用store.state.a（a是在store中的模块名），如果进一步取模块a的state某属性，假如name，直接使用store.state.a.name即可，不需要写成store.state.a.state.name。</p>
<p>　　在模块定义的mutation方法，在使用时，也是直接使用$state.commit(‘方法名’)使用方法，其会先在store中的mutation搜索该方法，如果没有，则去模块中搜索，从而调用。所以模块的方法名最后不要和stroe的mutation方法重复。</p>
<p>　　模块中的getters方法，也是类似于上述一样，直接通过普通的$store.getters.方法名来使用方法。</p>
<p>　　然后，模块中的getters的方法可以想之前说的一样，使用当前getters作为方法参数。</p>
<p>　　此外，模块中的getters的方法还可以有第三个默认参数，叫rootState，特指源store的state。</p>
<p>　　模块中的actions。之前提过，actions中的方法，里面有一个默认参数，即context（上下文），但注意，此时store.commit()，即context.commit()，这个store是模块自己的store。但是这个context里面有很多属性，包括根store和根getters。 </p>
<p>　　9、store文件夹的目录结构</p>
<p>　　当我们的vuex帮助我们管理过多的内容时，好的项目结构可以让我们的代码更加清晰。</p>
<p>　<img src="/2019/12/29/blog36/1803687-20191230164120283-1040247640-1577951427994.png" alt="img"></p>
<p> 　之前我们把所有关于vuex的代码写到一块了，当项目比较大时，不方便管理，所以需要进行构造好的目录结构，即对一些代码进行抽离。</p>
<p>　　state代码：（index.js里面）把state抽离成一个对象，放在store外面，然后在里面使用这个state对象。</p>
<p>　　<img src="/2019/12/29/blog36/1803687-20191230164512619-507305908-1577951430059.png" alt="img"></p>
<p> 　mutation：（重新创建一个mutations.js文件，在store目录下）</p>
<p>　　然后把index.js中的mutation对象写进去，再导出。最后在index.js中引用。</p>
<p>　　actions:也是类似上述的做法。（actions.js）</p>
<p>　　getters：也是类似上述的做法。（getters.js）</p>
<p>　　modules：新建一个modules文件夹（store目录下），由于模块可以有多个，然后在这个modules文件夹放置一个一个模块文件（.js文件，也是导出），最后在index.js按需引用（但引用的时候，最好是a: moduleA，给moduleA一个名字a）。</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>vuex</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>Vuex</tag>
        <tag>Vuex配置</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之axios（九）</title>
    <url>/2019/12/30/blog37/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（axios）</p>
<p>内容：学习和使用axios，网络模块封装。</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><h3 id="一、网络模块封装"><a href="#一、网络模块封装" class="headerlink" title="一、网络模块封装"></a>一、网络模块封装</h3><p>　　1、网络请求</p>
<p>　　Vue中发送网络请求有非常多的方式，那么，在开发中，如何选择？</p>
<p>　　选择一：传统的Ajax是基于XMLHttpRequest（XHR）。一般不用，因为配置和调用方式等非常混乱。所以真实开发中很少直接使用，而是使用jQuery-Ajax。</p>
<p>　　选择二：jQuery-Ajax。相对于传统的Ajax，其有优势。但是也不选择它，因为Vue的整个开发中都是不需要使用jQuery。完全没有必要为了用网络请求就引用这个重量级的框架。</p>
<p>　　选择三：官网vue1.x的时候，推出了Vue-resource插件。Vue-resource的体积相对于jQuery小很多，并且是官网的。但也不选，Vue2.0推出后，作者不在更新。使用这个对以后的项目开发和维护存在很大的隐患。</p>
<p>　　选择四：<strong>axios</strong>。vue作者说明不在继续更新和维护Vue-resource插件，但推荐了一个框架：axios。它有很多优点，并且用起来很方便。</p>
<p>　　2、jsonp</p>
<p>　　在前端开发中，我们一种常见的网络请求方式就是JSONP。使用JSONP最主要的原因往往就是为了解决跨域访问的问题。</p>
<p>　　JSONP的原理是：</p>
<p><img src="/2019/12/30/blog37/1803687-20191230204423639-369560790.png" alt="img"></p>
<p> 　但我们这里还是重点研究<strong>axios</strong>！</p>
<h3 id="二、axios"><a href="#二、axios" class="headerlink" title="二、axios"></a>二、axios</h3><p>　　1、axios的功能特点</p>
<p>　　axios：ajax i&#x2F;o system（一个老师理解的翻译，网上也没找到具体指的是什么）。</p>
<p>　　在浏览器中发送XMLHttpRequests请求；在node.js中发送HTTP请求；支持Promise API；拦截请求和响应；转换请求和响应数据等等。</p>
<p>　　2、axios支持多种请求方式</p>
<p>　　axios支持多种请求方式，和http请求有关，例如request，post，get，put等。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191230205504144-27871852.png" alt="img"></p>
<p> 　3、在vue下的axios的简单使用</p>
<p>　　首先创建vue项目，这里为了更好看到目录结构，我们使用Vue CLI2安装，终端输入vue init webpack learnaxios，然后选择默认和不安装vue-router等插件（具体步骤可以看我之前关于<a href="https://www.cnblogs.com/xinkuiwu/p/12060776.html">Vue CLI的博客</a>）。（接着把一些我们不用的代码删掉，如HelloWorld.vue相关的东西）</p>
<p>　　现在假设我们在App.vue里面发送一个网络请求，从服务器请求过来一个数据，然后对数据进行展示。</p>
<p> 　首先，安装axios。npm install axios –save（运行是依赖）</p>
<p>　　然后，导入使用。在任意文件都可以使用axios。为了演示，我们在main.js中使用axios，以axios(config)的方式。axios是支持Promise的。url只是</p>
<p>　　　<img src="/2019/12/30/blog37/1803687-20191231094517475-1073200451.png" alt="img"></p>
<p> 　这个url是对应服务器端口路径的数据，即后端接口：<a href="http://123.207.32.32:8000/home/multidata">http://123.207.32.32:8000/home/multidata</a></p>
<p><img src="/2019/12/30/blog37/1803687-20191231095204679-514002367-1577951687086.png" alt="img"></p>
<p> 　之后运行代码，在控制台就打印这个网络请求的数据（从服务器端来的数据）。其是一个对象，里面包含数据，配置，请求方式，状态等信息。但注意，<strong>这些信息（除了data数据）都是axios框架加上的</strong>，不是在服务器端写返回的。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231094644626-89326708-1577951690592.png" alt="img"></p>
<p>　　axios参数中，只使用url的默认请求方式是get请求。我们可以使用method，来设置请求方式，如post。当然也可以使用axios.post()的形式。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231095344789-115752441-1577951693351.png" alt="img">（这个服务器接口是不支持post方式请求的，只是演示而已）　</p>
<p>　　此外，<strong>httpbin.org</strong>可以对网站进行很多的模拟，用于测试等。</p>
<p>　　如果我们想使用query的网络请求，除了可以直接以get方式请求完整接口，也可以使用params。</p>
<p><img src="/2019/12/30/blog37/1803687-20191231101100395-1484086219-1577951695956.png" alt="img"></p>
<h3 id="三、axios发送并发请求"><a href="#三、axios发送并发请求" class="headerlink" title="三、axios发送并发请求"></a>三、axios发送并发请求</h3><p>　　我们想做发送两个并发的请求，并且要等两个请求都到达后，才能做相应处理的需求。之前我们是使用Promise.all来解决的。这里我们使用axios框架。</p>
<p>　　使用axios.all()对多个网络请求进行合并，参数是传入数组，里面放置请求，如请求1和请求2。然后在最后用.then()函数拿到最终结果。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231101813229-336874339-1577951701069.png" alt="img">（基本格式示意）</p>
<p>　　例如我们把第二章的两个请求当做并发请求。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231102141694-2056172387-1577951703501.png" alt="img"></p>
<p> 　最后结构是一样的。结果是一个数组。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231102219213-1472780078-1577954049980.png" alt="img"></p>
<p> 　如果我们想把数组展开，使用axios.spread可以将数组[res1,res2]展开为res1, res2。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231102701821-1234238183-1577951707858.png" alt="img">　</p>
<h3 id="四、axios的配置信息相关"><a href="#四、axios的配置信息相关" class="headerlink" title="四、axios的配置信息相关"></a>四、axios的配置信息相关</h3><p>　　1、全局配置</p>
<p>　　在上面一些例子中，我们的BaseURL是固定的。事实上，在开发中可能很多参数都是固定的（例如一些headers请求）。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231103408055-355586521-1577954057741.png" alt="img"></p>
<p>　　这个时候我们可以进行一些抽取，也可以利用axios的全局配置。　　</p>
<p>　　利用axios.defaults可以对一些属性进行全局配置，例如baseURL。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231103511919-1925934584-1577951717494.png" alt="img"></p>
<p> 　2、常见的配置选项</p>
<p><img src="/2019/12/30/blog37/1803687-20191231103804393-1805267049-1577951719107.png" alt="img"></p>
<h3 id="五、axios的实例和模块封装"><a href="#五、axios的实例和模块封装" class="headerlink" title="五、axios的实例和模块封装"></a>五、axios的实例和模块封装</h3><p>　　1、axios的实例　　</p>
<p>　　为什么要创建axios的实例？</p>
<p>　　当我们从axios模块中导入对象时，使用的实例是默认的实例。当给该实例设置一些默认配置时，这些配置就被固定下来了。但后续开发中，某些配置可能会不太一样，比如某些请求需要使用特定的baseURL或者timeout或者content-Type等。这个时候（使用上述的参数的全局配置就不合适），我们就可以创建新的实例，并且传入属于该实例的配置信息。</p>
<p>　　当项目越来越大的时候，服务器接口不一定是一个端，它可能是把服务器发到多个端。通过<strong>nginx</strong>部署服务器，做反向代理。服务器分布式，当服务器在部署的时候，当并发量很大的时候，一个服务器是无法满足业务需求，所以一般需要多个服务器（每个服务器一个ip地址），但是客户端需要知道哪里请求对应哪里服务器（ip地址），就很麻烦。所以nginx相当于部署一个代理服务器，当客户端发送请求时，指向都是这个代理服务器，先经过代理服务器，然后代理服务器通过判断哪个服务器是比较空闲合适的，在把请求发到对应服务器。</p>
<p>　　2、创建对应的axios的实例</p>
<p>　　axios.create(config)创建这个config的实例。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231110801850-63942864-1577951740655.png" alt="img"></p>
<p> 　还可以正常拿到结果。</p>
<p>　　当我们还有别的请求，可以类似地创建instance2等，设置单独的baseURL，timeout等。</p>
<p>　　3、模块封装</p>
<p>　　之前我们写的axios代码都是在main.js中写的（为了演示），真实开发中，我们需要网络请求模块封装。</p>
<p> 　方式一：我们可以在需要使用到axios的组件中导入axios，然后用create()周期钩子使用axios，并输出结果，把结果用data保存，并展示到对应地方。</p>
<p>　<img src="/2019/12/30/blog37/1803687-20191231143346926-1879927279-1577951740655.png" alt="img"></p>
<p> 　但这种方式导致，我们要用到axios的组件都必须导入axios，然后进行配置和使用，这样组件对第三方框架依赖太强了。这样维护会麻烦。</p>
<p>　　补充：真实开发中，只要引入第三方的东西，千万不要在每个组件都对这个第三方东西依赖，一旦第三方的东西不能用了（如不更新和维护了），那么意味着对应每个组件都需修改。所以我们必须对第三方的东西进行封装，让其面向我们的组件。这样维护只需修改封装的文件即可。</p>
<p>　　方式二：所以我们对axios进行封装。</p>
<p>　　首先，在src下创建network文件夹。network文件夹下创建request.js。如果我们是要导入多个实例的话，写成export function XX的形式（而不是export default形式）。注意上一节说过不要创建全局配置，而是使用axios配置。</p>
<p>　　然后发送出真正的网络请求。通过传入success函数和failure函数导出网络请求结果。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231145300047-37955590-1577951746875.png" alt="img"></p>
<p> 　然后在main.js中，导入request模块，使用request，把config配置和sucees，failure函数对应写好。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231145503966-127969982-1577951743078.png" alt="img"></p>
<p> 　最后结果还是可以网络请求得到。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231145530287-796363833-1577951743079.png" alt="img"></p>
<p> 　但这不是我们的最终方案。</p>
<p>　　方式三：我们的<strong>最终方案</strong>是用Promise。（但方式四才是最终版本）</p>
<p>　　request.js使用Promise。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231150017519-729818719-1577951745808.png" alt="img"></p>
<p> 　main.js使用的request时使用then()，catch()</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231150200661-1587644102-1577951745805.png" alt="img"></p>
<p> 　一样可以请求出正常的结果。</p>
<p>　　方式四：简化方式三。</p>
<p>　　因为由axios.create()创建的axios实例本身就是一个Promise（源码体现出的）。所以直接返回实例即可。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231150737319-2012576891-1577951745661.png" alt="img"></p>
<p> 　使用request和方式三一致。显示的请求结果也是正常的。</p>
<p>　　<strong>优点</strong>：由于我们把axios封装到一个文件内，并且使用Promise导出网络请求的结果。所以如果某一天axios不在更新和维护，我们可以直接修改这个文件，也写成使用Promise导出网络请求的方式，其他使用这个网络请求的组件文件也不需要修改了。（这才是封装啊）</p>
<h3 id="六、axios拦截器的使用"><a href="#六、axios拦截器的使用" class="headerlink" title="六、axios拦截器的使用"></a>六、axios拦截器的使用</h3><p>　　1、axios拦截器</p>
<p>　　axios提供了拦截器，用于我们在发送每次请求或者得到响应后，进行对应的处理。如url拼接等。axios提供了4种拦截器：请求成功的拦截和请求失败的拦截，响应成功的拦截和响应失败的拦截。（<strong>客户端请求，服务端响应</strong>）</p>
<p>　　具体怎么使用呢？（注意，<strong>拦截也要返回结果</strong>，后面会说）</p>
<p>　　全局拦截：axios.interceptors 。但通常我们使用的是实例拦截。</p>
<p>　　实例拦截：（instance.interceptors.request.use请求拦截，instance.interceptors.response.use响应拦截）</p>
<p>　　请求拦截，instance.interceptors.request.use里面有两个参数（看源码），一个是拦截成功的函数，一个是拦截失败的函数。</p>
<p><img src="/2019/12/30/blog37/1803687-20191231153456750-1301827046-1577951750558.png" alt="img"> （源码）</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231153226704-697213940-1577954073593.png" alt="img"> </p>
<p> 　此时，拦截了请求，在控制台打印了结果，但是报了一个错误。是由于请求被拦截了，如果没有使用reture把请求结果返回，则出错误信息。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231153622306-1450709588-1577951754531.png" alt="img"></p>
<p> 　所以，使用拦截器的时候记得加上reture把结果返回。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231153947863-1135295801-1577954077008.png" alt="img"></p>
<p> 　此时就没有报错了。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231153937116-559052576-1577951758568.png" alt="img"></p>
<p>　　2、请求情况分析</p>
<p>　　现在，我们是拦截了请求，我可以做一些操作。通常情况有：</p>
<p>　　情况一：config中的一些信息不符合服务器要求，需要某些操作。例如修改特殊的header。</p>
<p>　　情况二：每次发生网络请求时，都希望在界面中显示一个请求的图标。例如一个转圈表示等待的图标。相当于正在请求时，显示图标，请求结束后，图标消失，显示页面的效果。</p>
<p>　　情况三：某些网络请求（比如登录（token）），必须携带一些特殊的信息。首先拿到一个url，看是否是些特殊请求，在这请求中有没有传入token信息，可以判断用户有没有登录，如有token，则可以让其继续发送请求；如果没有，给一些错误提示，让其登录，再进行访问。</p>
<p>　　3、响应拦截</p>
<p>　　instance.interceptors.response.use 响应拦截，也有有两个参数。第一个是结果。由于服务器响应过了，这里拿到的是结构。第二个是失败的情况。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231155536241-301510393-1577951761523.png" alt="img"></p>
<p> 　结果显示。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231155709901-2060069190-1577954085111.png" alt="img"></p>
<p> 　当我们（人为）让请求失败，例如给个错误的url。则正常输出错误结果。</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231155848854-1617542865-1577951764526.png" alt="img"></p>
<p>　　一样地，当我们拦截后，必须返回结果，不然请求的东西是会报错的。</p>
<p>　　　<img src="/2019/12/30/blog37/1803687-20191231160119805-1837878741-1577951776408.png" alt="img"></p>
<p>　　通常返回的是data。（其他信息是axios框架后面添加的，有时候我们只需要data）</p>
<p>　　<img src="/2019/12/30/blog37/1803687-20191231160302181-1176526288-1577951770255.png" alt="img"></p>
]]></content>
      <categories>
        <category>vue</category>
        <category>axios</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>promise</tag>
        <tag>axios</tag>
        <tag>网络请求封装</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架Vue自学之响应式原理（十）</title>
    <url>/2020/01/09/blog38/</url>
    <content><![CDATA[<p>终极目标：掌握和使用Vue（全家桶：Core+Vue-router+Vuex）</p>
<p>本博客目的：记录Vue学习的进度和心得（响应式原理）</p>
<p>内容：学习和理解响应式原理。</p>
<span id="more"></span>

<p>正文：</p>
<h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><h3 id="一、Vue响应式原理"><a href="#一、Vue响应式原理" class="headerlink" title="一、Vue响应式原理"></a>一、Vue响应式原理</h3><p>　不要认为数据发生改变，界面随着更新，并不是理所当然的。其本质是基于vue内部 的流程。</p>
<p>　1、vue流程图	<img src="/2020/01/09/blog38/image-20200110160244232.png" alt="image-20200110160244232"></p>
<p>​	</p>
<p>​	Object.defineProperty</p>
<p>​	set get</p>
<p>​	发布者订阅者模式</p>
<p><img src="/2020/01/09/blog38/image-20200110162207658.png" alt="image-20200110162207658"></p>
<p>​	理解双向绑定</p>
<p>​	2、</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>响应式原理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>框架</tag>
        <tag>vue</tag>
        <tag>响应式原理</tag>
      </tags>
  </entry>
  <entry>
    <title>个人项目之一个基于Vue技术栈的购物商城的单页面应用</title>
    <url>/2020/01/23/blog39/</url>
    <content><![CDATA[<p>这是关于使用vue技术栈（core+vue-router+vuex ）做购物商城（仿蘑菇街）app项目的笔记。</p>
<p>个人项目源码：<a href="https://github.com/xinkuiwu/supermall">https://github.com/xinkuiwu/supermall</a></p>
<span id="more"></span>

<h3 id="个人项目之一个基于Vue技术栈的购物商城的单页面应用"><a href="#个人项目之一个基于Vue技术栈的购物商城的单页面应用" class="headerlink" title="个人项目之一个基于Vue技术栈的购物商城的单页面应用"></a>个人项目之一个基于Vue技术栈的购物商城的单页面应用</h3><p>注：本项目是根据codewhy的vue项目，一步步自己手码出来的项目，并修改了一些bug，欢迎相互交流~</p>
<p>个人项目源码：<a href="https://github.com/xinkuiwu/supermall">https://github.com/xinkuiwu/supermall</a></p>
<h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>JavaScript，Vue，路由切换，父子组件通信，状态管理，网络数据请求，CSS设计</p>
<h3 id="项目总览"><a href="#项目总览" class="headerlink" title="项目总览"></a>项目总览</h3><p>本项目主要能实现购物商店的基本操作，如浏览商品种类及商品的详细信息，包括商品价格，参数，评论，相关推荐等并且能把商品添加在购物车，可自选或全选地将商品进行结账等功能。</p>
<p>项目前期准备是使用vue CLI3进行文件目录结构的生成，包括源码路径，文件资源路径，视图路径等等。此外，我还对其他一些文件进行目录管理，包括区分公共组件和业务组件，视图组件和其子组件等，目的是为了更好地以封装化思想实现组件的合理复用。</p>
<p>项目分为五个视图模块：主页，商品详情页，分类页，购物车，个人页，并且通过vue-router进行视图切换和vuex进行一些状态管理。</p>
<h4 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h4><p>主页如图所示：</p>
<p><img src="/2020/01/23/blog39/image-20200202100809902.png" alt="image-20200202100809902"></p>
<p><img src="/2020/01/23/blog39/image-20200202100827599.png" alt="image-20200202100827599"></p>
<p>主页布局从上至下，由轮播图组件，推荐商品组件，导航栏组件和商品展示组件组成。最后使用Better Scroll滑动组件包裹。</p>
<p>其中导航栏组件与商品展示组件存在数据通信，即点击“流行”展示的是“流行的商品”，点击“新款”的商品展示的是“新款的商品”，这属于子组件(tabcontrol)监听点击事件，把子组件数据传出去，通过$emit(发布事件，参数)把参数传到父组件（home.vue），通过监听这个发布事件。通过监听，改变不同的商品展示索引值，从而控制展示不同的商品。</p>
<p><img src="/2020/01/23/blog39/image-20200202201108171.png" alt="image-20200202201108171"></p>
<p>此外，还有这个’流行’, ‘新款’, ‘精选’的导航栏吸顶设计。我们还得监听滚动的位置，方便我们设置回到顶部按钮。上拉懒加载商品数据等。使用keep-alive包裹router-view，配合使用activated（）和deactivated（）来使得home离开时记录状态和位置。</p>
<p><img src="/2020/01/23/blog39/image-20200202201134703.png" alt="image-20200202201134703"></p>
<p>Debug优化：通过监听异步加载完图片的方法，刷新滑动组件，来解决滑动异常的问题（原因在于滑动组件计算可滚动高度计算误差）。刷新频繁的防抖动函数处理。</p>
<p><strong>知识点总结</strong>：组件，父子组件间通信，事件监听，周期函数钩子，封装思想，防抖debounce，事件总线（vue实例原型定义一个bus,事件总线有点类似vuex，但其是管理事件的。GoodItem发射一个事件（this.$bus.$emit(“事件1”)）给事件总线，Home组件监听这个发射过来的事件（this.$bus.$on(“事件1”，function(){})）从而控制执行别的函数（Scroll的方法）。注意：默认情况下是没有$bus的，需要我们去改vue的原型，让$bus就是一个vue实例。）。</p>
<h4 id="商品详情页"><a href="#商品详情页" class="headerlink" title="商品详情页"></a>商品详情页</h4><p>在首页中，点击某商品，页面会转至商品详情页，当我们点击加入购物车，就会加入到购物车页中，并且页面浮动显示“添加了新的商品”的消息)，如图所示：</p>
<p><img src="/2020/01/23/blog39/image-20200202201158564.png" alt="image-20200202201158564"></p>
<p>点击加入购物车提示加入成功，使用弹窗（Toast组件）提示。</p>
<p>除了除了商品本身图片，还可以点击参数，评论，推荐等导航，跳转到对应部分，展示信息。</p>
<p><img src="/2020/01/23/blog39/image-20200202201304525.png" alt="image-20200202201304525"></p>
<p>商品详情页主要由商品展示组件，参数组件，评论组件，其他商品推荐组件组成。</p>
<p>其中，展示的商品详情由跳转路由，并根据携带的id信息，进行对应的数据的请求。</p>
<p>在真实服务器中，电商后台给的数据非常多而且繁杂，需要我们在写组件使用数据的时候，先整合好成一个对象（封装），然后在传给组件（组件面向这个对象）。</p>
<p>由于我们在home.vue使用的mounted的部分代码与Detail.vue使用的mounted的部分代码完全一致，所以可以使用mixin技术将其代码进行抽离。</p>
<p>vue官网也有mixin的说明:mixin也是一个钩子，并在调用组件自身的周期钩子之前被调用。</p>
<p>监听购物车按钮，发送事件出去。（子传父）获取购物车的相关消息。封装到一个对象里面。这个对象可以通过Vuex进行保存管理（可以在多个界面进行共享），购物车组件使用这个对象。注意不能够使用中央事件总线，因为组件在没有创建（点击详情页）时，这个对象是不存在的，购物车也就不能获取了。</p>
<p>Vuex中的代码重构：首先，mutations唯一的目的就是修改state中状态，mutations中的每个方法尽可能完成的事件比较单一一点。（单一职责原则（软件设计原则之一））devtools不好追踪对象状态。所以，有判断的操作，一般都是先放在actions里面，通过actions去修改mutations。(也就是说actions里面不一定只能放异步操作的东西)</p>
<p>bug：keep-alive会使得我们每次点不同商品的详情页都是显示同一个（第一个点的）商品的详情页。所以使用keep-alive的exclude属性，把Detail组件排除</p>
<p><strong>知识点</strong>：动态路由（跳转进去的时候，需要传递参数例如图片id），时间格式转换（JS中需要调用第三方函数，才有这个时间格式化函数（是用正则表达式写的）），Toast，mixin混入技术（两个组件公用一段代码（不仅是函数，对象都行）），Vuex，单一职责原则。</p>
<h4 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h4><p>分类功能主要是展示一些商品的分类，并且可以根据不同类别，展示不同的商品，如图所示：</p>
<p><img src="/2020/01/23/blog39/image-20200202202917102.png" alt="image-20200202202917102"></p>
<p>分类页主要由两个模块组成：类别菜单组件和对应商品展示组件。具体设计和首页类似。比较简单。</p>
<h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><p>物车显示了刚刚我们添加的商品并且计算好对应价格；此外，还可以添加多个商品并且可以手动选择自己想要的那几个或者点击全选，全部都选。如图所示：</p>
<p><img src="/2020/01/23/blog39/image-20200202203209379.png" alt="image-20200202203209379"></p>
<p>获取购物车的商品个数，把这个方法封装一个getters文件里面。但是这样写的话，反倒是不如直接定义计算属性了。所以想做成，能直接使用getters当成计算属性。这是vuex提供的辅助函数mapGetters（直接从vuex导入）。</p>
<p>监听组件的点击，.native的方式。</p>
<p><strong>知识点</strong>：vuex辅助函数mapGetters，.native。</p>
<h4 id="个人页"><a href="#个人页" class="headerlink" title="个人页"></a>个人页</h4><p>个人页如图所示：</p>
<p><img src="/2020/01/23/blog39/image-20200202094044427.png" alt="image-20200202094044427"></p>
<p>个人页是一些CSS样式的布局和一些图标引用，可视化地显示用户信息，包括用户余额，积分及其他信息等。比较简单，后续我们可以扩展相关功能，如用户信息管理系统等等。</p>
<h3 id="项目代码和性能的一些优化策略"><a href="#项目代码和性能的一些优化策略" class="headerlink" title="项目代码和性能的一些优化策略"></a>项目代码和性能的一些优化策略</h3><p>本项目除了实现上述的基本功能，还做了一些优化策略，例如文件路径取别名，返回页面顶部功能、Better-Scroll组件滑动优化、上拉加载优化、懒加载等。</p>
<h4 id="在移动端的优化技术："><a href="#在移动端的优化技术：" class="headerlink" title="在移动端的优化技术："></a>在移动端的优化技术：</h4><p>1、fastclick减少点击延迟</p>
<p>移动端的开发经常需要监听用户的双击行为，事件的发生顺序是这样的：touchstart—touchmove—touchend,然后大约过<strong>300ms</strong>触发click事件，用来判断是否有双击事件。</p>
<p>首先，安装fastclick （npm install fastclick –save）</p>
<p>然后导入，调用attach函数使用。</p>
<p>2、vue-lazyload框架，图片懒加载（移动端需要）</p>
<p>图片需要显示在屏幕时，才加载。（有些公司需要，有些公司不想要）(个人感觉不好~)<br>首先，安装（npm install vue-lazyload –save）</p>
<p>然后导入，使用，通过修改img:scr -&gt; v-lazy</p>
<p>3、px2vw-css单位转化插件（webpack插件）</p>
<p>视口单位：</p>
<p>   1.vw：1vw等于视口宽度的1%。</p>
<p>   2.vh：1vh等于视口高度的1%。</p>
<p>之前我们写的CSS代码基本以px作为单位的，在移动端，当不同设备（设备高宽度不同，一般以iPhone 6位设计稿），可能会影响原设计的视感。所以需要把px转为vw。所以需要一个工具将其转换（一个一个改即太麻烦了）(此外，还有px2rem等插件)</p>
<p>首先，安装。npm install postcss-px-to-viewport –save-dev</p>
<p>其次，在项目的根目录下新建一个postcss.config.js配置文件，并且在配置文件里写入</p>
<h3 id="项目后续可扩展的方向"><a href="#项目后续可扩展的方向" class="headerlink" title="项目后续可扩展的方向"></a>项目后续可扩展的方向</h3><p>分类页中的商品应该类似于首页一样，应该有对应类别的具体的商品展示，并且能够添加商品到购物车中。</p>
<p>个人页应该可以写一个用户管理系统，管理用户账号、密码信息，及其财产信息和其他购物信息等。</p>
<h3 id="项目心得"><a href="#项目心得" class="headerlink" title="项目心得"></a>项目心得</h3><p>Git代码管理</p>
<p>Vue CLI脚手架+区分代码分类，进行目录结构合理管理</p>
<p>封装思想去设计使用组件：将第三方的东西额外封装，当这个第三方文件不可使用时，我们可以直接修改这个封装文件，保证导出的接口和之前的一样，这样就不会影响我们项目之前使用的情况，鲁棒性高</p>
<p>理解原理的基础上，才能由Bug的现象回溯到代码上，从而debug</p>
]]></content>
      <categories>
        <category>vue</category>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>JavaScript，Vue，路由切换，父子组件通信，状态管理，网络数据请求，CSS设计</tag>
      </tags>
  </entry>
  <entry>
    <title>git和github的使用</title>
    <url>/2019/12/11/blog40/</url>
    <content><![CDATA[<p>这是关于使用git和github的笔记。</p>
<span id="more"></span>

<h3 id="git和github的使用"><a href="#git和github的使用" class="headerlink" title="git和github的使用"></a>git和github的使用</h3><h4 id="实际使用补充："><a href="#实际使用补充：" class="headerlink" title="实际使用补充："></a>实际使用补充：</h4><h4 id="一、本地库和远程库关联（个人使用）"><a href="#一、本地库和远程库关联（个人使用）" class="headerlink" title="一、本地库和远程库关联（个人使用）"></a>一、本地库和远程库关联（个人使用）</h4><h4 id="1、本地初始化-创建本地库"><a href="#1、本地初始化-创建本地库" class="headerlink" title="1、本地初始化&amp;创建本地库"></a>1、本地初始化&amp;创建本地库</h4><p>模型：</p>
<p><img src="/2019/12/11/blog40/image-20200211102811508.png" alt="image-20200211102811508">（本地库先有代码，再与远程库关联，上传本地库的代码给远程库，这个是个人使用的常用操作）</p>
<p>首先，<strong>创建工作区的文件夹</strong>，里面写代码相关；</p>
<p><strong>Bash here-》git init</strong>（创建.git文件，也就是本地库）	</p>
<h4 id="2、github代码托管，远程库"><a href="#2、github代码托管，远程库" class="headerlink" title="2、github代码托管，远程库"></a>2、github代码托管，远程库</h4><p>首先，<strong>创建远程库</strong>。登录自己的github，并且创建仓库（写名称，描述，readme先不选择）。</p>
<p>​	此时，官网自己也会告诉你，本地库关联远程库的方法。也附带了远程仓库的地址（HTTPS方式（这里用这个方式），SSH方式（后面知识点有将））。</p>
<p>​	<img src="/2019/12/11/blog40/image-20200211110844495.png" alt="image-20200211110844495"></p>
<h4 id="3、关联本地库和远程库。"><a href="#3、关联本地库和远程库。" class="headerlink" title="3、关联本地库和远程库。"></a>3、关联本地库和远程库。</h4><p>由于之前我们已经在本地<strong>创建了本地库</strong>。</p>
<p>在本地文件夹中，</p>
<p><strong>Bash here</strong> -&gt;<strong>git remote add origin <a href="https://github.com/xinkuiwu/algorithmTraining.git">https://github.com/xinkuiwu/algorithmTraining.git</a></strong> （进行远程地址关联，远程主机名（别名）为origin）</p>
<p>可以通过 git  remote -v 查看远程地址。</p>
<p><img src="/2019/12/11/blog40/image-20200211112730808.png" alt="image-20200211112730808"></p>
<p>（fetch用于取回，push用于推送，都是git命令）</p>
<p>注意，此时，本地仓库除了.git隐藏文件夹，需要有新的文件在本地库，因为刚创建的.git本地库是空的，需要添加<strong>一些文件（工作区），git add .（暂存区），git commit -m ‘操作说明’（本地库）。</strong>否则直接git push 是会报错的。</p>
<p>所以，我们可以本地<strong>创建一个文件</strong>，如readme.md。</p>
<p><strong>git add .</strong></p>
<p><strong>git commit -m</strong></p>
<p>此时本地库有了更新。</p>
<p>然后将本地库的更新推送至远程库</p>
<p><strong>git push -u origin master</strong></p>
<p>此时，完成了本地库和远程库的关联。之后如果本地有更新情况，在使用git push推送至远程库即可。</p>
<p><img src="/2019/12/11/blog40/image-20200211115147173.png" alt="image-20200211115147173"></p>
<p>说明：</p>
<p><strong>git push</strong>命令用于将本地分支的更新，推送到远程主机。它的格式与git pull（下拉远程更新到本地）命令相仿。 </p>
<p><strong>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</strong></p>
<p>（这里的:前后是必须没有空格的。）</p>
<p>git push origin master</p>
<p>上面命令表示（省略了远程分支名，表示将本地分支推送与之存在”追踪关系”的远程分支），将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>
<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<p>git push origin （将当前分支推送到origin主机的对应分支。）如果当前分支只有一个追踪分支，那么主机名都可以省略。即git push</p>
<p>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用git push。即</p>
<p>git push -u origin master</p>
<p>(这个也是官网用的，将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。)</p>
<h3 id="二、团队协作工作"><a href="#二、团队协作工作" class="headerlink" title="二、团队协作工作"></a>二、团队协作工作</h3><p>像团队开发，通常是老大已经在本地库做好一部分，push上传至远程库；团队的成员先clone下，进行相关开发修改，然后也push到远程库，然后老大再从远程库pull下拉，在进行整体修改等。循环这个步骤。</p>
<p><img src="/2019/12/11/blog40/image-20200211120516901.png" alt="image-20200211120516901"></p>
<p>但是不是什么人都能加入团队，不然就乱糟糟了，团队老大要邀请才行。</p>
<p>邀请某人加入协作团队成员。（需要人授权并把连接地址送给要被授权的某人，某人加入才行）</p>
<p>即老大的远程库（github）中，settings-&gt; collaborators-&gt;输入团队小弟github账户名称-&gt; add collaborator</p>
<p><img src="/2019/12/11/blog40/image-20200211121053465.png" alt="image-20200211121053465"></p>
<p>然后等待团队小弟的确认（发送邀请链接，然后团队小弟打开确认） </p>
<p><strong>git pull</strong> 从远程库下拉到本地库的工作区</p>
<p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>
<p><strong>git pull 和 git fetch区别</strong></p>
<p><img src="/2019/12/11/blog40/image-20200211125958854.png" alt="image-20200211125958854"></p>
<p>git fetch是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并（git merge）到工作本机分支中。</p>
<p>而git pull 则是将远程主机的最新内容拉下来后直接合并，即：git pull &#x3D; git fetch + git merge，这样可能会产生冲突，需要手动解决。</p>
<h3 id="三、跨团队协作"><a href="#三、跨团队协作" class="headerlink" title="三、跨团队协作"></a>三、跨团队协作</h3><p>有时候需要多个团队一些协作，主团队A先复制项目Github连接，然后以非团队人员的身份B去fork（页面有个fork选项）。</p>
<p>例如我在别人的项目仓库下fork，此时，我自己远程仓库会添加主团队的项目仓库，上面也声明来仓库来源。</p>
<p><img src="/2019/12/11/blog40/image-20200211143028864.png" alt="image-20200211143028864"></p>
<p>接着，就和之前一样，clone在本地修改开发，然后推送到自己的远程库，然后自己提出pull request（new pull request-&gt;creat pull request）。</p>
<p>然后主团队，审核代码，然后没问题再合并代码。然后就接着就是将远程库修改拉下本地，继续开发。</p>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p><img src="/2019/12/11/blog40/image-20200211104035579.png" alt="image-20200211104035579"></p>
<p><img src="/2019/12/11/blog40/image-20200211104345663.png" alt="image-20200211104345663"></p>
<h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><p>1、<strong>head指针</strong>，用于控制版本的前进后退，后面有说。通过head指向的分支控制，进行版本控制。</p>
<p><img src="/2019/12/11/blog40/image-20200211110120718.png" alt="image-20200211110120718"></p>
<p><img src="/2019/12/11/blog40/image-20200211110140856.png" alt="image-20200211110140856"></p>
<p>2、<strong>分支管理</strong>，在版本控制过程中，使用多条线同时推进多个任务，提升开发效率。一般，主支（master）是发布的，直接线上使用的，其他一些开发功能是一些分支，开发调试成功没问题了，才会并入主干分支，在这个过程中，如果某些分支开发失败，不会对其他分支有影响（包括master），删除该分支，重新开发即可。（创建分支<strong>git branch XX</strong>，切换分支<strong>git checkout XX</strong>，合并分支，即先切会原分支，在把旧分支合并进去，用<strong>git checkout XX</strong>和<strong>git checkout XXX</strong> ，此时可能出现冲突）</p>
<p>​	解决冲突：<img src="/2019/12/11/blog40/image-20200211105618735.png" alt="image-20200211105618735"></p>
<p>3、git工作流</p>
<p>​	<img src="/2019/12/11/blog40/image-20200211144931095.png" alt="image-20200211144931095"></p>
<p><img src="/2019/12/11/blog40/image-20200211144941700.png" alt="image-20200211144941700"></p>
<p><img src="/2019/12/11/blog40/image-20200211145040629.png" alt="image-20200211145040629"></p>
<p><img src="/2019/12/11/blog40/image-20200211145108495.png" alt="image-20200211145108495"></p>
<p>4、如果是局域网的管理，可以使用gitlab。（搭建gitlab服务器）</p>
<h4 id="全面知识点-学习总纲："><a href="#全面知识点-学习总纲：" class="headerlink" title="全面知识点-学习总纲："></a>全面知识点-学习总纲：</h4><p><img src="/2019/12/11/blog40/clip_image002.jpg" alt="img"></p>
<p>1、 版本控制</p>
<p>团队协作：希望版本控制工具能管理文件本身和里面的内容，允许很多人修改同一文件。（协同修改、数据备份、版本管理、权限控制、历史记录、分支管理）</p>
<p>2、 Git是分布式控制版本工具</p>
<p><img src="/2019/12/11/blog40/clip_image004.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image006.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image008.jpg" alt="img"></p>
<p>3、  </p>
<p><img src="/2019/12/11/blog40/clip_image010.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image012.jpg" alt="img"></p>
<p>（上面写错了，初始化应该是git init）</p>
<p><img src="/2019/12/11/blog40/clip_image014.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image016.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image018-1581386782231.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image020-1581386575164.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image022.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image024-1581386790320.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image026.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image028.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image030-1581386591105.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image032-1581386594424.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image034-1581386598645.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image036-1581386604034.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image038-1581386609868.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image040.jpg" alt="img"> <img src="/2019/12/11/blog40/clip_image042-1581386615469.jpg" alt="img"> </p>
<p><img src="/2019/12/11/blog40/clip_image044.jpg" alt="img"></p>
<p>4、 分支管理</p>
<p><img src="/2019/12/11/blog40/clip_image046.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image048.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image050.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image052.jpg" alt="img"></p>
<p>5、 Git基本原理</p>
<p><img src="/2019/12/11/blog40/clip_image054.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image056.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image058-1581386629825.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image060-1581386633560.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image062-1581386641107.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image064.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image066-1581386646379.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image068-1581386649666.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image070-1581386652630.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image072.jpg" alt="img"></p>
<p>6、 Github</p>
<p><img src="/2019/12/11/blog40/clip_image074.jpg" alt="img"></p>
<p>创建远程库</p>
<p><img src="/2019/12/11/blog40/clip_image076.jpg" alt="img"></p>
<p>远程库地址</p>
<p><img src="/2019/12/11/blog40/clip_image078.jpg" alt="img"></p>
<p>在本地创建远程库地址别名（不用每次复制远程库地址）</p>
<p><img src="/2019/12/11/blog40/clip_image080.jpg" alt="img"></p>
<p>查看远程地址</p>
<p><img src="/2019/12/11/blog40/clip_image082.jpg" alt="img"></p>
<p>（fetch用于取回，push用于推送）</p>
<p>推送分支</p>
<p><img src="/2019/12/11/blog40/clip_image084.jpg" alt="img"></p>
<p>此时，远程库就有对应推送的文件了</p>
<p><img src="/2019/12/11/blog40/clip_image086.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image088.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image090.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image092-1581386673434.jpg" alt="img"></p>
<p>（上面写错了，克隆应该是git clone [远程地址]）</p>
<p>邀请某人加入协作团队成员。（需要人授权并把连接地址送给要被授权的某人，某人加入才行）</p>
<p><img src="/2019/12/11/blog40/clip_image094.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image096.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image098-1581386679513.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image100-1581387090344.jpg" alt="img"></p>
<p>Pull直接就合并了，用方法1比较保险，能确认一下合并内容</p>
<p><img src="/2019/12/11/blog40/clip_image102.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image104.jpg" alt="img"></p>
<p>（小刘：GitHub；老王、老王媳妇是开发人员）</p>
<p>跨团队协作</p>
<p>复制Github连接，以非团队人员的身份去fork</p>
<p><img src="/2019/12/11/blog40/clip_image106.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image108.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image110.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image112.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image113.png" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image114.png" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image116.jpg" alt="img"></p>
<p>（提出pull request）</p>
<p><img src="/2019/12/11/blog40/clip_image118.jpg" alt="img"></p>
<p>(原团队看这个pull request)查看</p>
<p><img src="/2019/12/11/blog40/clip_image120.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image122-1581386872376.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image124.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image126.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image128.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image130.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image131-1581386889820.png" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image133.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image135-1581386706297.jpg" alt="img"></p>
<p>（以上所有all操作已经满足日常需要了）</p>
<p>7、 Git 图形化界面操作</p>
<p>一般的IDE都有GIT插件，也可以从IDE下载GIt插件做一些Git处理，例如eclipse,Sublime text3等。</p>
<p>一般流程：</p>
<p>建立本地库</p>
<p>推送到远程库</p>
<p>冲突- 解决冲突 –合并</p>
<p>8、 Git工作流</p>
<p><img src="/2019/12/11/blog40/clip_image137-1581386710819.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image139.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image141-1581386715378.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image143-1581387138735.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image145-1581386718315.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image147-1581386722272.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image149-1581386913260.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image151.jpg" alt="img"></p>
<p>9、 Gitlab服务器搭建过程</p>
<p><img src="/2019/12/11/blog40/clip_image153.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image155.jpg" alt="img"></p>
<p>（linux环境下装）centOS(Linux环境)</p>
<p><img src="/2019/12/11/blog40/clip_image157.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image159-1581386737624.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image161-1581386743087.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image163-1581386747004.jpg" alt="img"><img src="/2019/12/11/blog40/clip_image165.jpg" alt="img"></p>
<p>（和GitHub差不多，主要用于局域网，有一定的自由度）</p>
<p>10、       总结</p>
<p><img src="/2019/12/11/blog40/clip_image167.jpg" alt="img"></p>
<p><img src="/2019/12/11/blog40/clip_image169.jpg" alt="img"></p>
<p>​	</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>算法练习之剑指offer</title>
    <url>/2020/02/14/blog41/</url>
    <content><![CDATA[<p>这是关于提升自己算法编程能力的心得记录（近年前端面试对算法还是有要求的，还是得老老实实刷点算法题）。</p>
<p>主要思路是参考使用《剑指offer》,我是在牛客网下面刷题的：<a href="https://www.nowcoder.com/ta/coding-interviews">https://www.nowcoder.com/ta/coding-interviews</a></p>
<p>个人解题源码+个人分析笔记：<a href="https://github.com/xinkuiwu/algorithmTraining">https://github.com/xinkuiwu/algorithmTraining</a></p>
<span id="more"></span>

<h3 id="算法练习之剑指offer"><a href="#算法练习之剑指offer" class="headerlink" title="算法练习之剑指offer"></a>算法练习之剑指offer</h3><p>由于最近对前端岗位的要求越来越高，对算法掌握也有所要求，本人即按照前人指引，先做剑指offer，再做LeetCode top 100。</p>
<p>我是使用JavaScript语言做的，每天坚持做几题，每周回顾一下做的题目，加深记忆。</p>
<p>个人解题源码+个人分析笔记：<a href="https://github.com/xinkuiwu/algorithmTraining">https://github.com/xinkuiwu/algorithmTraining</a></p>
<p>做剑指offer题的思路：</p>
<p>0 最好坚持每天做几题，算法很容易就忘了，要认真理解题目逻辑和解题思路。通常都是while(1){做了忘；忘了做}</p>
<p>1 看原题，理解题意，知道题目涉及哪些知识</p>
<p>2 先自己做，把自己不懂的点记录下来。是知识忘了要及时复习。例如有些数组的方法忘了，就得注意记忆</p>
<p>3 把自己做的结果跑出来。最好是在牛客网在线编译器做，因为有时候我们时间复杂度的解法是跑不出来的，也就是让我们用更好的算法</p>
<p>4 参考理解别人的优秀算法和思路</p>
<p>5 自己在重写一遍</p>
<p>6 总结，把自己的不懂的点，自己思路，别人优秀思路用自己的话记录下来</p>
<p>7 时间比较充裕的话，可以找几题同类型的题去做，加深自己对这类题的理解</p>
<h3 id="刷题的心得"><a href="#刷题的心得" class="headerlink" title="刷题的心得"></a>刷题的心得</h3><p>1、利用ES6的JS语法的一些特点，可以加快我们写代码速度和效率。</p>
<p>（未完，待继续更新）</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>JavaScript</tag>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>学习JavaScript数据结构与算法（洛伊安妮）-阅读记录与心得</title>
    <url>/2019/09/20/blog4/</url>
    <content><![CDATA[<h3 id="目的：学习使用JavaScript完成一些数据结构和常规算法的实现。（本书也是基于ES6标准的）"><a href="#目的：学习使用JavaScript完成一些数据结构和常规算法的实现。（本书也是基于ES6标准的）" class="headerlink" title="目的：学习使用JavaScript完成一些数据结构和常规算法的实现。（本书也是基于ES6标准的）"></a>目的：学习使用JavaScript完成一些数据结构和常规算法的实现。（本书也是基于ES6标准的）</h3><h3 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h3><p><em>注：关于本博客的相关数据结构与算法的基本实例JS代码在我的其他博客上。欢迎一起讨论:)</em></p>
<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms">JavaScript数据结构与算法</a></p>
<h3 id="第一阶段：前言"><a href="#第一阶段：前言" class="headerlink" title="第一阶段：前言"></a>第一阶段：前言</h3><p>1、第一章：JavaScript简介。JS的环境搭建和调试工具IDE及JS基础。（如果之前看过红宝书或者是有JS基础的，这个部分可以快速阅读）JS的ES6环境要配置好。此外，里面有提到一个Web服务器http-server，它是一种命令行 http服务器，用于本地测试和开发，建议安装使用，很有意思。</p>
<p>2、第二章：ECMAScript和TypeScipt的概述。主要说的是ES6的JS和ES6转码为ES5的Babel转码器；ES6的新特性。（如果之前有看过《ES6标准入门》等ES6书籍，以上部分可以快速阅读；如果没有还是得细看，毕竟本书是基于ES6一些新特性去写JS的）TypeScipt，TS是一个渐进式包含类型的JS的超集，建议安装，非常有用，例如它的tsc命令可以把.ts文件编译为.js文件，并且在编译进行了类型和错误检测，对我们开发写JS很有帮助。在常规使用JS在编译时在第一行加上&#x2F;&#x2F;@ts-check可以进行错误检测。此外，ES6模块导入的配置环境和方法要弄清楚。</p>
<h3 id="第二阶段：数据结构"><a href="#第二阶段：数据结构" class="headerlink" title="第二阶段：数据结构"></a>第二阶段：数据结构</h3><p>1、第三章，数组。数组的构建，操作方法（在收、尾、任意数组位置进行添加、删除元素等），像fibonacci函数、多维数组的构建与访问的实现可以动手练习一下。此外，数组在ES6新添的方法也要好好理解，还有数组的排序、搜索。</p>
<p>2、第四章，栈。栈stack可以当作为一种具有特殊行为的数组。栈是遵循后进先出（FILO）原则，新添或删除元素都是在栈顶完成。（相对地，另一端就叫做栈底）本章要掌握对栈的操作，如push,pop,对栈顶元素的操作，清空栈等。此外，如何让自己的Stack类的用户只能访问我们在类中暴露的方法是要用JS实现私有属性的方法，例如在第八章说到的WeakMap类型(Map)，但是其可读性不强，在扩展该类时无法继承私有属性。</p>
<p>3、第五章，队列。队列queue是遵循先进先出（FIFO）原则的一组有序的项。同样要掌握以该原则下的对队列的操作，例如增加新元素在队尾，删除元素在队头等。双端队列deque，是一种允许同时从前端和后端增加和删除元素的特殊队列。由于双端队列同时遵守了先进先出和后进先出原则，可以说它是把队列和栈结合的一种数据结构。队列的应用有：循环队列（击鼓传花游戏），回文检查器，JavaScript任务队列，例如当我们在浏览器中打开新标签时，就会创建一个任务队列，因为每个标签都是单线程处理的所有任务，即事件循环。</p>
<p>4、第六章，链表。链表存储有序的元素集合，与数组不同，链表中的元素在内存中并不是连续放置的，每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（指针或链接）组成。对链表的基本操作有增加元素，指定位置插入元素，删除元素，返回某元素的索引，查找某元素等。链表最后一个节点的下一个元素始终是undefined或null。链表的变体还有双向链表，循环链表，有序链表。双向链表是每两个节点间，链接不是单向，而是双向的：一个链向下一个元素，另一个链向上一个元素。循环链表可以由链表或者是双向链表扩展，它最后一个元素指向下一个元素的指针不是引用undefined，而是指向第一个元素。有序链表是指保持元素有序的链表结构。我们可以使用链表类及其变种作为内部的数据结构来创建其他数据结构，例如栈、队列、双向队列。当我们需要添加和移除很多元素时，最好的选择就是链表，而不是数组。</p>
<p>5、第七章，集合。集合是由一组无序且唯一（即不能重复）的项组成的。在ES6也提供了原生的Set类，但也懂其构建数据集合的数据结构（即基于ES5下，构建自己的Set类）。对Set的操作：添加、移除元素，判断元素是否在集合里，元素个数等和Set之间的交、并、差、子集等。ES6中的原生的Set没有交、并、差运算，需要我们自己写。同时，我们可以结合使用扩展运算符，把集合转为为数组，再对数组进行运算，再转回集合。注意一种多重集的概念。</p>
<p>6、第八章，字典和散列表。字典和散列表也是存储唯一值的数据结构。在集合中，我们感兴趣的是每个值本身（相当于[值，值]存储）。在字典（或映射）中，我们用[键，值]对的形式来存储数据。散列表也是一样，但两者的实现方式略有不同，例如字典中的每个键只能有一个值。字典也称作映射、符号表或关联数组。与Set类相似，ES6同样包含了一个Map类的实现，即我们所说的字典。由于JavaScript不是强类型的语言，不能保证键一定是字符串，所以需要把所有键名的传入的对象转换为字符串，使得Dictionary类中搜索和获取值更简单。字典类的操作：添加元素（覆盖之前同键名的元素），移除，获取，清除全体，返回所有键名，返回所有键值，返回所有键值对，迭代字典中所有的键值对。散列表，HashTable类或HashMap类，它是Dictionary类的一种散列表实现方式。散列算法的作用是尽可能快地在数据结构中找到一个值。（而不是像之前的数据结构，需要迭代整个数据结构）散列函数的作用是给定一个键值，然后返回在表中的地址。常用的应用就是对数据库进行索引和使用散列表来表示对象。JavaScript语言内部就是使用散列表来表示每个对象，此时，对象的每个属性和方法（成员）被存储为key对象类型，每个key指向对应的对象成员。有时候，一些键会有相同的散列值，不同的值在散列表中对应相同位置的时候，称为冲突。（冲突会导致散列表只保存最新的值，旧的值会被覆盖）解决冲突的几个方法是：分离链接、线性探查和双散列法。</p>
<p>7、第九章，递归。递归会使得操作树和图数据结构变得更简单。递归是一种解决问题的方法，它从解决问题的各个小部分开始，直到解决最初的大问题。递归通常涉及函数调用自身。每个递归函数都必须有基线条件，即一个不再递归调用的条件（停止点），以防无线递归。使用递归时，要找到原始问题和子问题是什么。例如阶乘的factorial(5)&#x3D;5*factorial(4)。每当一个函数被一个算法调用时，该函数会进入调用栈（call stack）的顶部。当使用递归的时候，每个函数调用都会堆叠在调用栈的顶部，这是因为每个调用都可能依赖前一个调用的结果。如果忘记使用基线条件，递归并不会无限地执行下去，浏览器会抛出栈溢出错误（stack overflow error），每个浏览器都有自己的上限。ES6中有尾调用优化，如果函数内的最后一个操作是调用函数，会通过“跳转指令”（jump）而不是“子程序调用”（subroutine call）来控制，所以在ES6中，某些递归代码是一直执行下去，因此，停止递归的基线条件非常重要。斐波那契数列是另一个可以用递归解决的问题。</p>
<p>8、第十章，树。树也是一种非顺序数据结构，它对于存储需要快速查找的数据非常有用。数是一种分层数据的抽象模型。数的相关概念：节点，父子关系的节点（父节点和子节点），根节点，叶节点（外部节点），内部节点，树，子树，一个节点可以有祖先和后代（关系）。节点的一个属性叫深度，取决于它的祖先节点的数量。树的高度取决于所有节点深度的最大值。根节点在第0层。二叉树中的节点最多只能有两个子节点（左侧子节点和右侧子节点）。二叉搜索树（BST）是二叉树的一种，只允许在左侧节点存储（比父节点）小的值，在右侧节点存储（比父节点）大的值。树中，通过指针（引用）来表示节点之间的关系（称为“边”）。树的每个节点也是有两个指针，一个指向左侧子节点，一个指向右侧子节点。键是树相关的术语中对节点的称呼。对树的操作，插入新的键，查找一个键，遍历（中序，先序和后序），找树中键值最大最小值，移除某个键。中序遍历的一种应用就是对数进行排序操作，先序遍历的一种应用就是打印一个结构化的文档，后序遍历的一种应用是计算一个目录及其子目录中所有文件所占空间的大小。BST存在一个问题：取决于我们添加的节点数，数的一条边可能会非常深。这会在需要在某条边上添加、移除和搜索某个节点时引起的一些性能问题。为解决这个问题，有一种树叫Adelson-Velskii-Landi树（AVL树）。AVL树是一种自平衡的二叉搜索树（任何一个节点左右两侧子树的高度之差最多为1）。此外，红黑树也是一个自平衡二叉搜索树（如果需要一个包含多次插入和删除的自平衡树，红黑树要优于AVL树）。</p>
<p>9、第十一章，二叉堆和堆排序。二叉堆是一种特殊的二叉树，其有两个特性：结构特性和堆特性。结构特性是指它是一颗完全的二叉树（树的每一层都有左侧和右侧子节点（除了最后一层的叶节点），并且最后一层的叶节点尽可能都是左侧子节点）。堆特性是指二叉堆不是最小堆就是最大堆（最小堆可以快速导出树的最小值，最大堆可以快速导出树的最大值），所有的节点都大于等于（最大堆）或者小于等于（最小堆）每个它的子节点。二叉堆常被应用于优先队列，也被用于著名的堆排序算法中。堆排序算法不是一个稳定的排序算法，如果数组没有排好序，可能会得到不一样的结果。</p>
<p>10、第十二章，图。图也是一种非线性数据结构。图是一组由边连接的节点（或顶点）。任何二元关系都可以用图来表示。图的相关术语（顶点；边；相邻顶点；顶点的度；路径；简单路径；环；无环；连通；有向图；无向图；强连通；加权；未加权）。图存在多种表示方式，图的正确表示法取决于待解决问题和图的类型（邻接矩阵；邻接表；关联矩阵）。图的遍历：广度优先搜索BFS和深度优先搜索DFS。图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环等。图遍历算法的思想是必须追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探索（需要明确指出第一个被访问的顶点）。完全探索一个顶点要求我们查看该顶点的每一条边。对于每一条边所连接的没有被访问过得顶点，将其标注为被发现的，并将其加进待访问顶点列表中。为保证算法的效率，务必访问每个顶点至多两次，连通图中每条边和顶点都会被访问到。BFS和DFS本质基本相同，不同在于待访问顶点列表的数据结构：BFS（栈），FBS（队列）。广度优先搜索算法会从指定的第一个顶点开始遍历图，先访问其所有的邻点（相邻顶点），就像一次访问图的一层（先宽后深地访问顶点）。使用BFS寻找最短路径（给定一个图G和源顶点v，找出每个顶点u和v之间最短路径的距离（以边的数量计））。上述的最短路径算法中，图不是加权的。如果要计算加权图中的最短路径，广度优先搜索未必合适，要考虑使用Dijkstra算法（解决单源最短路径问题）、Bellman-Ford算法（解决边权值为负的单源最短路径问题）、A*搜索算法（解决求仅一对顶点间的最短路径问题，用经验法则来加速搜索过程）、Floyd-Warshell算法（解决求所有顶点对之间的最短路径问题）。深度优先搜索算法将会从一个指定的顶点开始遍历图，沿着路径直到这条路径最后一个顶点被访问了，接着原路回退并探索下一条路径（先深度后广度地访问顶点）。对于给定的图G，我们希望深度优先搜索算法遍历图G的所有节点，构建“森林”（有根树的一个集合）以及一组源顶点（根），并输出两个数组：发现时间和完成探索时间。最小生成树（Prim算法、Kruskal算法）。</p>
<h3 id="第三阶段：算法"><a href="#第三阶段：算法" class="headerlink" title="第三阶段：算法"></a>第三阶段：算法</h3><p>1、第十三章，排序和搜索算法。冒泡排序比较所有相邻的两个项，如果第一个比第二个大，则交换他们。元素项向上移动至正确的顺序，就好像气泡升至表面一样。其复杂度是O(n2)。选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第一位，接着找到第二小的值并将其放置在第二位，以此类推。插入排序每次排一个数组项，以此方式构建最后的排序数组。假定第一项已经排序了。接着，它和第二项进行比较–第二项是应该待在原位还是插入到第一项之前呢？这样，头两项就已正确排序，接着和第三项比较（它是该插入到第一、第二还是第三的位置呢），以此类推。其复杂度是O(n2)。归并排序是一种分而治之算法，其思想是将原始数组切分较小的数组，直到每个小数组只有一个位置，接着讲小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。归并排序是第一个可以实际使用的排序算法，归并排序性能不错（比上三种排序好），其复杂度为O(nlogn)。快速排序也许是最常用的排序算法了，它的复杂度为O(nlog(n))，且性能通常比其他复杂度为O(nlog(n))的排序算法好。快速排序也是使用分而治之的思想，将原始数组分为较小的数组（但它没有像归并排序那样将它们分割开）。思路：选择主元（pivot）；划分（partition）操作；对划分后的小数组重复前两步操作，直至数组已完全排序。计数排序是一个分布式排序，使用已经组织好的辅助数据结构（称为桶），然后进行合并，得到排好序的数组。计数排序使用一个用来存储每个元素在原始数组中出现次数的临时数组。在所有元素都计数完成后，临时数组已拍好序并可迭代以构建排序后的结果数组。它是一个优秀的整数排序算法，时间复杂度为O(n+k)，其中k是临时计数数组的大小；但是它确实需要更多的内存来存放临时数组。桶排序（箱排序）也是分布式排序算法，它将元素分为不同的桶（较小的数组），再使用一个简单的排序算法，例如插入排序，来对每个桶进行排序。然后，它将所有的桶合并为结果数组。基数排序是一个分布式排序算法，它根据数字的有效位或者基数将整数分布到桶中。基数是基于数组中值的记数制的。顺序或线性搜索是最基本的搜索算法。它的机制是将每一个数据结构中的元素和我们要找的元素作比较（最低效）。二分搜索要求被搜索的数组已排序。步骤：1、选择数组中间值；2、如果选中值是待搜索值，那么算法执行完毕；如果带搜索值比选中值要小，则返回步骤1并在选中值左边的子数组中寻找（较小）；4、 如果带搜索值比选中值要大，则返回步骤1并在选中值右边的子数组中寻找（较大）。 内插搜索是改良版的二分搜索。步骤：1、使用position公式选中一个值；2、如果选中值是待搜索值，那么算法执行完毕；如果带搜索值比选中值要小，则返回步骤1并在选中值左边的子数组中寻找（较小）；4、 如果带搜索值比选中值要大，则返回步骤1并在选中值右边的子数组中寻找（较大）。随机算法就是将一个数组中的值进行随机排序，如Fisher-Yaters随机算法。</p>
<p>2、第十四章，算法设计与技巧。主要的算法思想有：分而治之，动态规划，贪心算法，回溯算法等。分而治之算法可以分为三个部分。1、分解原问题为多个子问题（原问题的多个小实例）；2、解决子问题，用返回解决子问题的方式的递归算法。递归算法的基本情形可以用来解决子问题；3、组合这些子问题的解决方式，得到原问题的解。动态规划（dynamic programming，DP）是一种将复杂问题分解成更小的子问题来解决的优化技术（分而治之方法是把问题分解成相互独立的子问题，然后组合它们的答案；而动态规划是将问题分解成相互依赖的子问题）。用动态规划解决问题时，要遵循三个重要步骤：1、定义子问题；2、实现要反复执行来解决子问题的部分（考虑递归）；3、识别并求解出基线条件。动态规划能解决一些著名算法问题：背包问题， 最长公共子序列，矩阵链相乘，硬币找零， 图的全源最短路径。本书之前用的编程范式都是命令式编程，ES6也有一种新的范式，叫做函数式编程（FP）。函数式编程的主要目标是描述数据，以及要对数据应用的转换；在函数式编程中，程序执行顺序的重要性很低，而在命令式编程中，步骤和顺序时非常重要的；函数和数据集合是函数式编程的核心；在函数式编程中，我们可以使用和滥用函数和递归，而在命令式编程中，则使用循环、赋值、条件和函数；在函数式编程中，要避免副作用和可变数据，意味着我们不会修改传入函数的数据。</p>
<p> 3、第十五章，算法复杂度。大O表示法将算法按照消耗的时间进行分类，依据随着输入增大所需要的空间&#x2F;内存。当讨论大O表示法时，一般考虑的是CPU时间占用。复杂度比较如下图所示。NP完全理论。一般来说，如果一个算法的复杂度为O(n^k)，其中k是常数，我们就可以认为这个算法是高效的，这就是多项式算法。对于给定的问题，如果存在多项式算法，则计为P（polynomial，多项式）。如果一个问题可以在多项式时间内验证解是否正确，则记为NP（nondeterministic polynomial，非确定性多项式）。如果一个问题存在多项式算法，自然可以在多项式时间内验证其解，所以的P都是NP，然而P&#x3D;NP是否成立，仍然不得而知。NP问题中最难的是NP完全问题。如果满足以下两个条件，则称决策问题L是NP完全的：L是NP问题，即可以在多项式时间内验证解，但还没有找到多项式算法；所有的NP问题都能在多项式时间内归约为L。为了理解问题的归约，考虑两个决策问题L和M。假设算法A可以解决问题L，算法B可以验证输入y是否为M的解。目标是找到一个把L转化为M的方法，使得算法B可以用于构造算法A。还有一类问题，只需要满足NP完全问题的第二个条件，称为NP困难问题。不可解问题与启发式算法。</p>
<p> <img src="/2019/09/20/blog4/1803687-20191118195519726-1294946968.png" alt="img"></p>
<p>​	（大O图from <a href="https://www.bigocheatsheet.com/%EF%BC%89">https://www.bigocheatsheet.com/）</a></p>
]]></content>
      <categories>
        <category>前端书籍</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>JavaScript</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架react自学之初见react(一)</title>
    <url>/2020/02/29/blog42/</url>
    <content><![CDATA[<p>终极目标：掌握和使用react</p>
<p>本博客目的：记录react学习的进度和心得（初见react）</p>
<p>内容：通过视频学习，掌握react基础语法。</p>
<span id="more"></span>

<h3 id="前端框架react自学之初见react-一"><a href="#前端框架react自学之初见react-一" class="headerlink" title="前端框架react自学之初见react(一)"></a>前端框架react自学之初见react(一)</h3><p>React 构建用户界面的JavaScript库，主要用于构建UI界面。Instagram，2013年开源。</p>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>1、声明式的设计</p>
<p>2、高效，采用虚拟DOM来实现DOM的渲染，最大限度的减少DOM的操作。</p>
<p>3、灵活，跟其他库灵活搭配使用。</p>
<p>4、JSX，俗称JS里面写HTML，JavaScript语法的扩展。</p>
<p>5、组件化，模块化。代码容易复用，2016年之前大型项目非常喜欢react</p>
<p>6、单向数据流。没有实现数据的双向绑定。数据-》视图-》事件-》数据</p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>1、通过script引入使用，仅用于学习调试使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>2、通过react的脚手架，创建项目进行开发，部署。</p>
<ol>
<li>​	安装脚手架<a href="https://react.docschina.org/docs/create-a-new-react-app.html#create-react-app">Create React App</a>。</li>
</ol>
<p>npm install -g create-react-app（全局安装）</p>
<ol start="2">
<li>​	创建项目</li>
</ol>
<p>create-react-app helloworld(项目名称可以自定义，但是不允许大写字母)</p>
<h3 id="脚手架创建项目的目录结构"><a href="#脚手架创建项目的目录结构" class="headerlink" title="脚手架创建项目的目录结构"></a>脚手架创建项目的目录结构</h3><p>node_modules是一些依赖包</p>
<p>public是一个公共资源文件夹，其中的manifest.json是用于指定应用的显示名称、图标、应用入口文件地址及需要使用的设备权限等信息。是扩展的配置文件，指明了扩展的各种信息；robots.txt 表示文件允不允许被爬虫爬，当然也是一种“防君子不能防小人”</p>
<p>src是放源码的地方。特别的是导入react，使用了JSX（JS的扩展语言），然后使用函数式组件进行项目的开发。此外，src文件夹还有一些用于测试的文件。</p>
<p>.gitignore就是git忽视的东西，例如我们使用git把我们的项目传至github，node_modules就是被忽略的，因为太大了也没必要上传。可以通过packag.json得到相关包依赖关系，到时候下载项目并npm install就可以在线把相关包依赖下载到本地了。</p>
<p>这个package-lock.json 是在 npm install时候生成一份文件，用以记录当前状态下实际安装的各个npm package的具体来源和版本号。</p>
<p>packag.json除了记载有相关包依赖关系和配置关系，浏览器适配信息等，还有一些比较常用功能，如“scripts”（脚本命令）中，“start”是开发测试项目，“build”是构建发布项目，“test”和“eject”是用于检查。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>我们在真实用脚手架创建项目的时候，使用npm start进行调试时，可能需要对webpack指定版本进行安装。</p>
<p>注意卸载webpack时还需要卸载webpack-cli ，4.0版本后的webpack都带有webpack-cli:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm un webpack</span><br><span class="line">npm un webpack-cli</span><br><span class="line">npm un webpack-dev-server</span><br></pre></td></tr></table></figure>

<p>然后再把提示报错的版本安装上，如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i webpack@4.XX.X</span><br><span class="line">npm i webpack-cli</span><br><span class="line">npm i webpack-dev-server@3.X.XX</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
        <category>初见</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>目录结构</tag>
        <tag>创建项目</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架react自学之react元素渲染(二)</title>
    <url>/2020/02/29/blog43/</url>
    <content><![CDATA[<p>终极目标：掌握和使用react</p>
<p>本博客目的：记录react学习的进度和心得（react元素渲染）</p>
<p>内容：通过视频学习，掌握react基础语法。</p>
<span id="more"></span>

<h3 id="前端框架react自学之react元素渲染-二"><a href="#前端框架react自学之react元素渲染-二" class="headerlink" title="前端框架react自学之react元素渲染(二)"></a>前端框架react自学之react元素渲染(二)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let h1 = &lt;h1&gt;helloworld&lt;/h1&gt;; //在index.js文件中</span><br></pre></td></tr></table></figure>

<p>使用JSX的写法，可以创建JS元素对象。</p>
<p>把JS对象渲染（render）到对应的DOM节点(元素)上，也就是使用虚拟DOM。</p>
<p>注意：JSX元素对象，或者组件对象，必须只有1个根元素（根节点）。（不需要引号，JSX语法）</p>
<h4 id="案例使用（注意JSX对象里面的注释不是使用-，也不是使用，而是使用-注释-，下面一些代码的-只是我的一些简单示意）"><a href="#案例使用（注意JSX对象里面的注释不是使用-，也不是使用，而是使用-注释-，下面一些代码的-只是我的一些简单示意）" class="headerlink" title="案例使用（注意JSX对象里面的注释不是使用&#x2F;&#x2F;，也不是使用&lt;!–&gt;，而是使用{&#x2F;* 注释*&#x2F;}，下面一些代码的&#x2F;&#x2F;只是我的一些简单示意）"></a>案例使用（注意JSX对象里面的注释不是使用&#x2F;&#x2F;，也不是使用&lt;!–&gt;，而是使用{&#x2F;* 注释*&#x2F;}，下面一些代码的&#x2F;&#x2F;只是我的一些简单示意）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	//实现页面时刻的显示</span><br><span class="line"></span><br><span class="line">function clock()&#123;</span><br><span class="line">    let time = new Date().toLocaleTimeString()</span><br><span class="line">    let element = (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;现在的时间是&#123;time&#125; &lt;/h1&gt;</span><br><span class="line">            &lt;h2&gt;这是副标题&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )//相当于定义一个虚拟节点，注意得有根节点，即一般包在div下.这个和vue的template有点像</span><br><span class="line">    let root = document.querySelector(&#x27;#root&#x27;);//root节点的位置</span><br><span class="line">    ReactDOM.render(element,root)//渲染</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clock()</span><br><span class="line"></span><br><span class="line">setInterval(clock,1000)//间隔1s使用一次clock</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="函数式组件渲染"><a href="#函数式组件渲染" class="headerlink" title="函数式组件渲染"></a>函数式组件渲染</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//react函数式组件渲染，即写一个返回对象的函数当做一个react组件</span><br><span class="line">function Clock(props)&#123; //函数当然可以传参</span><br><span class="line">    return (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1&gt;现在的时间是&#123;props.date.toLocaleTimeString()&#125; &lt;/h1&gt;</span><br><span class="line">                    &lt;h2&gt;这是函数式组件开发&lt;/h2&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">    )//return的这个对象用()包裹</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function run()&#123;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Clock date=&#123;new Date()&#125; /&gt;, //函数式组件，并且可以传参date。在vue中也是在子组件定义props提供使用传参</span><br><span class="line">        document.querySelector(&#x27;#root&#x27;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(run,1000)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react</category>
        <category>元素渲染</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>元素渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架react自学之react JSX(三)</title>
    <url>/2020/02/29/blog44/</url>
    <content><![CDATA[<p>终极目标：掌握和使用react</p>
<p>本博客目的：记录react学习的进度和心得（react JSX）</p>
<p>内容：通过视频学习，掌握react基础语法。</p>
<span id="more"></span>

<h3 id="前端框架react自学之react-JSX-三"><a href="#前端框架react自学之react-JSX-三" class="headerlink" title="前端框架react自学之react JSX(三)"></a>前端框架react自学之react JSX(三)</h3><h3 id="react-JSX"><a href="#react-JSX" class="headerlink" title="react JSX"></a>react JSX</h3><p>优点：</p>
<p>1、JSX执行更快，编译为JavaScript代码时进行优化</p>
<p>2、类型更安全，编译过程如果出错就不能编译，及时发现错误（因为就是和JS差不多）</p>
<p>3、JSX编写模板更加简单快速。（不要跟VUE比）</p>
<p>注意：</p>
<p>1、JSX必须要有根节点。</p>
<p>2、正常的普通HTML元素要小写。如果是大写，默认认为是组件。</p>
<h4 id="JSX表达式"><a href="#JSX表达式" class="headerlink" title="JSX表达式"></a>JSX表达式</h4><p>1、由HTML元素构成</p>
<p>2、中间如果需要插入变量用<code>{}</code>(在vue中是使用<code>{{}}</code>)</p>
<p>3、<code>{}</code>中间可以使用表达式(数字表达式、字符表达式、三元运算等)</p>
<p>4、<code>{}</code>中间表达式中可以使用JSX对象</p>
<p>5、属性和html内容一样都是用<code>{}</code>来插入内容（注意不是写引号，相当于是一个语法糖，少写引号）</p>
<h4 id="案例（注意JSX对象里面的注释不是使用-，也不是使用，而是使用-注释-，下面一些代码的-只是我的一些简单示意）"><a href="#案例（注意JSX对象里面的注释不是使用-，也不是使用，而是使用-注释-，下面一些代码的-只是我的一些简单示意）" class="headerlink" title="案例（注意JSX对象里面的注释不是使用&#x2F;&#x2F;，也不是使用&lt;!–&gt;，而是使用{&#x2F;* 注释*&#x2F;}，下面一些代码的&#x2F;&#x2F;只是我的一些简单示意）"></a>案例（注意JSX对象里面的注释不是使用&#x2F;&#x2F;，也不是使用&lt;!–&gt;，而是使用{&#x2F;* 注释*&#x2F;}，下面一些代码的&#x2F;&#x2F;只是我的一些简单示意）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;//导入react框架</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;;//导入react-dom，虚拟dom</span><br><span class="line">import &#x27;./App.css&#x27;//导入样式App.css</span><br><span class="line"></span><br><span class="line">let time = new Date().toLocaleTimeString()</span><br><span class="line">let str = &#x27;当前时间是：&#x27;</span><br><span class="line">let element = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;helloworld&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;str+time&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">console.log(element)//打印的就是JSX对象，和JS对象差不多，里面有一些定义的原型之类的</span><br><span class="line"></span><br><span class="line">let man = &#x27;发热&#x27;;</span><br><span class="line">let element2 = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;今天是否隔离&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;man==&quot;发热&quot;?&lt;button&gt;隔离&lt;/button&gt;:&quot;躺床上&quot;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//let man = &#x27;发热&#x27;;</span><br><span class="line">let element4 = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;横着躺&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;竖着躺&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">man = &#x27;正常&#x27;</span><br><span class="line">let element3 = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;今天是否隔离&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;man==&quot;发热&quot;?&lt;button&gt;隔离&lt;/button&gt;:element4&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">let color = &#x27;bgRed&#x27;</span><br><span class="line">let logo = &#x27;https://www.baidu.com/img/pc_1c6e30772d5e4103103bd460913332f9.png&#x27;</span><br><span class="line">//HTML的样式类名要写className,因为class在js当中是关键词（虽然现在写class也没报错了）</span><br><span class="line">let element5 = (</span><br><span class="line">    &lt;div className=&#123;color&#125;&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; /&gt;</span><br><span class="line">        红色的背景颜色</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    element5,</span><br><span class="line">    document.getElementById(&#x27;root&#x27;)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react</category>
        <category>元素渲染</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>元素渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架react自学之react样式和注释(四)</title>
    <url>/2020/02/29/blog45/</url>
    <content><![CDATA[<p>终极目标：掌握和使用react</p>
<p>本博客目的：记录react学习的进度和心得（react样式和注释）</p>
<p>内容：通过视频学习，掌握react基础语法。</p>
<span id="more"></span>

<h3 id="前端框架react自学之react样式和注释-四"><a href="#前端框架react自学之react样式和注释-四" class="headerlink" title="前端框架react自学之react样式和注释(四)"></a>前端框架react自学之react样式和注释(四)</h3><h4 id="JSX-style"><a href="#JSX-style" class="headerlink" title="JSX_style"></a>JSX_style</h4><p>1、Class，style中，不可以存在多个class属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=’abc’  class=&#123;‘active’&#125;&gt; 错误的表示</span><br></pre></td></tr></table></figure>

<p>注：JSX对象里面样式不能写成字符串，必须是对象。例如不能是style&#x3D;”height&#x3D;100;”，而是写成对象引用的形式style&#x3D;{}，然后之前在外面定义好exampleStyle对象。</p>
<p>2、style样式中，如果存在多个单词的属性组合，第二个单词开始，首字母大写(驼峰式写法)。或者用引号引起来，否则会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let exampleStyle = &#123;</span><br><span class="line">    background:&quot;skyblue&quot;,</span><br><span class="line">    borderBottom:&quot;4px solid red&quot;,</span><br><span class="line">    &#x27;background-image&#x27;:&quot;url(https://www.baidu.com/img/pc_1c6e30772d5e4103103bd460913332f9.png)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、多个类共存的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let element2 = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 className=&#123;&quot;abc &quot;+classStr&#125;&gt;helloworld&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">let classStr2 = [&#x27;abc2&#x27;,&#x27;redBg2&#x27;].join(&quot; &quot;)//相当于将数用空格链接起来，如果没有使用join，在下面的插入该数值是默认以逗号相隔，这样定义的两个类不能正常使用了</span><br><span class="line">let element3 = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;/* 这里写注释 */&#125;</span><br><span class="line">        &lt;h1 className=&#123;classStr2&#125; style=&#123;exampleStyle&#125;&gt;helloworld&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：多个class的使用className&#x3D;{‘class1’+classStr}，其中classStr是变量</p>
<p>4、注释</p>
<p>必须在括号的表达式内书写，否则报错：{&#x2F;* 这里写注释 *&#x2F;}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let classStr2 = [&#x27;abc2&#x27;,&#x27;redBg2&#x27;].join(&quot; &quot;)</span><br><span class="line">let element3 = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;/* 这里写注释 */&#125;</span><br><span class="line">        &lt;h1 className=&#123;classStr2&#125; style=&#123;exampleStyle&#125;&gt;helloworld&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>体会：JSX的使用核心比较简单，导致我们如果要实现一些复杂功能，需要对JS的掌握程度很高。（使用react相对于使用vue来说）</p>
]]></content>
      <categories>
        <category>react</category>
        <category>样式和注释</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>样式和注释</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架react自学之react状态(六)</title>
    <url>/2020/02/29/blog47/</url>
    <content><![CDATA[<p>终极目标：掌握和使用react</p>
<p>本博客目的：记录react学习的进度和心得（react状态）</p>
<p>内容：通过视频学习，掌握react基础语法。</p>
<span id="more"></span>

<h3 id="前端框架react自学之react状态-六"><a href="#前端框架react自学之react状态-六" class="headerlink" title="前端框架react自学之react状态(六)"></a>前端框架react自学之react状态(六)</h3><h4 id="react-state"><a href="#react-state" class="headerlink" title="react state"></a>react state</h4><p>相当于VUE的DATA,但是使用方式跟VUE不一致。</p>
<p>修改state时，使用setState方法去修改。直接修改state不会渲染</p>
<p>通过this.setState修改完数据后，并不会立即修改DOM里面的内容,react会在这个函数内容所有设置状态改变后，统一对比虚拟DOM对象，然后在统一修改，提升性能。</p>
<h4 id="react组件的render方法"><a href="#react组件的render方法" class="headerlink" title="react组件的render方法"></a>react组件的render方法</h4><p>一个组件类必须要实现一个 render 方法，这个 render 方法必须要返回一个 JSX 元素。必须要用一个外层的 JSX 元素把所有内容包裹起来,返回并列多个 JSX 元素是不合法的。</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Clock extends React.Component&#123;</span><br><span class="line">    constructor(props)&#123; </span><br><span class="line">        super(props)//super关键字用于访问和调用一个对象的父对象上的函数。</span><br><span class="line">        //状态（数据）--》view</span><br><span class="line">        //构造函数初始化数据，将需要改变的数据初始化到state中</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            time:new Date().toLocaleTimeString()</span><br><span class="line">        &#125;</span><br><span class="line">        //console.log(this.state.time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        //console.log(&quot;这是渲染函数&quot;)</span><br><span class="line">        //this.state.time = new Date().toLocaleTimeString();</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;当前时间：&#123;this.state.time&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //生命周期函数,组件渲染完成（挂载）时的函数</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        setInterval(()=&gt;&#123;</span><br><span class="line">            console.log(this.state.time)</span><br><span class="line">            //this.state.time = new Date().toLocaleTimeString(); //错误的方式</span><br><span class="line">            //切勿直接修改state数据，直接state重新渲染内容，需要使用setState</span><br><span class="line">            //通过this.setState修改完数据后，并不会立即修改DOM里面的内容,react会在</span><br><span class="line">            //这个函数内容所有设置状态改变后，统一对比虚拟DOM对象，然后在统一修改，提升性能。</span><br><span class="line">            //小程序也是也是借鉴REACT状态管理操作</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                time:new Date().toLocaleTimeString()</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;,1000)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Clock /&gt;,</span><br><span class="line">    document.querySelector(&#x27;#root&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在ract组件中，每个方法的上下文都会指向该组件的实例，即自动绑定this为当前组件,而且react还会对这种引用进行缓存，以达到cpu和内存的最大化。在使用了es6 class或者纯函数时，这种自动绑定就不复存在了，我们需要手动实现this的绑定。</p>
<p>React事件绑定类似于DOM事件绑定，区别如下：</p>
<p>1.React事件的用驼峰法命名，DOM事件事件命名是小写</p>
<p>2.通过jsx，传递一个函数作为event handler，而不是一个字符串。</p>
<p>3.React事件不能通过返回false来阻止默认事件，需要显式调用preventDefault()</p>
<h4 id="React组件方法中为什么要绑定this"><a href="#React组件方法中为什么要绑定this" class="headerlink" title="React组件方法中为什么要绑定this"></a>React组件方法中为什么要绑定this</h4><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//假想定义一个ToggleButton开关组件</span><br><span class="line">class ToggleButton extends React.Component&#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;isToggleOn: true&#125;;</span><br><span class="line">        this.handleClick = this.handleClick.bind(this); </span><br><span class="line">        this.handleChange = this.handleChange.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">        this.setState(prevState =&gt; (&#123;</span><br><span class="line">            isToggleOn: !preveState.isToggleOn</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange()&#123;</span><br><span class="line">        console.log(this.state.isToggleOn);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">           &lt;button onClick=&#123;this.handleClick&#125; onChange=&#123;this.handleChange&#125;&gt;</span><br><span class="line">                &#123;this.state.isToggleOn ? &#x27;ON&#x27;:&#x27;OFF&#x27;&#125;</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码执行细节"><a href="#代码执行细节" class="headerlink" title="代码执行细节"></a>代码执行细节</h5><p>​	上例仅仅是一个类组件的定义，当在其他组件中调用或是使用<code>ReactDOM.render( )</code>方法将其渲染到界面上时会生成一个组件的实例,因为组件是可以复用的，面向对象的编程方式非常适合它的定位。根据<strong>this指向的基本规则</strong>就可以知道，这里的<code>this</code>最终会指向组件的实例。</p>
<p>​	组件实例生成的时候，构造器<code>constructor</code>会被执行，此处着重分析一下下面这行代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.handleClick = this.handleClick.bind(this);</span><br></pre></td></tr></table></figure>

<p>此时的<code>this</code>指向新生成的实例，那么赋值语句右侧的表达式先查找<code>this.handleClick( )</code>这个方法，由对象的属性查找机制（沿原型链由近及远查找）可知此处会查找到<strong>原型方法<code>this.handleClick( )</code></strong>,接着执行<code>bind(this)</code>，此处的<code>this</code>还是指向新生成的实例，所以赋值语句右侧的表达式计算完成后，会生成一个指定了<code>this</code>的新方法，接着执行赋值操作，将新生成的函数赋值给实例的<code>handleClick</code>属性，由对象的赋值机制可知，此处的<code>handleClick</code>（右边赋值）会直接作为实例属性生成。</p>
<p>总结一下，上面的语句做了一件这样的事情：</p>
<p><strong>把原型方法<code>handleClick( )</code>改变为实例方法<code>handleClick( )</code>,并且强制指定这个方法中的<code>this</code>指向当前的实例。</strong></p>
<h5 id="ES5的写法中为什么不用bind-this"><a href="#ES5的写法中为什么不用bind-this" class="headerlink" title="ES5的写法中为什么不用bind(this)"></a>ES5的写法中为什么不用bind(this)</h5><p>之前已经讲过，ES5的写法是指使用<code>React.createClass( )</code>方法来定义组件（自动绑定了this），<code>React</code>在V16以上的新版本中已经移除了这个API.</p>
<p>源码示意：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//旧版本`react`中`createClass`方法片段</span><br><span class="line">if (this.__reactAutoBindMap) &#123;</span><br><span class="line">      this._bindAutoBindMethods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上在这个方法中所完成的，就是对组件中自定义方法的<code>this</code>强制绑定.</p>
<h5 id="绑定this的必要性"><a href="#绑定this的必要性" class="headerlink" title="绑定this的必要性"></a>绑定this的必要性</h5><p>在组件上绑定事件监听器，是为了响应用户的交互动作，特定的交互动作触发事件时，监听函数中往往都需要操作组件某个状态的值，进而对用户的点击行为提供响应反馈，对开发者来说，这个函数触发的时候，就需要能够拿到这个组件专属的状态合集（例如在上面的开关组件<code>ToggleButton</code>例子中，它的内部状态属性<code>state.isToggleOn</code>的值就标记了这个按钮应该显示<em>ON</em>或者<em>OFF</em>），所以此处强制绑定监听器函数的<code>this</code>指向当前实例的也很容易理解。</p>
<p>即<strong>React构造方法中的bind会将响应函数与这个组件Component进行绑定以确保在这个处理函数中使用this时可以时刻指向这一组件的实例。</strong></p>
<h5 id="如果不绑定this"><a href="#如果不绑定this" class="headerlink" title="如果不绑定this"></a>如果不绑定this</h5><p>如果类定义中没有绑定<code>this</code>的指向,当用户的点击动作触发<code>this.handleClick( )</code>这个方法时，实际上执行的是<strong>原型方法</strong>，可这样看起来并没有什么影响，如果当前组件的构造器中初始化了<code>state</code>这个属性，那么原型方法执行时，<code>this.state</code>会直接获取实例的<code>state</code>属性，如果构造其中没有初始化<code>state</code>这个属性（比如React中的UI组件），说明组件没有自身状态，此时即使调用原型方法似乎也没什么影响。</p>
<p><strong>事实上的确是这样，这里的<code>bind(this)</code>所希望提前规避的，就是著名的this指针丢失的问题</strong>。</p>
<p>即如果没有强制指定组件实例方法的<code>this</code>，在将来的使用中就无法安心使用<strong>引用转换</strong>或<strong>作为回调函数传递</strong>这样的方式，对于后续使用和协作开发而言都是不方便的。</p>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class="line">import &#x27;./Tab.css&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Tab extends React.Component&#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line"></span><br><span class="line">        //设置状态、数据</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            c1:&#x27;content active&#x27;,</span><br><span class="line">            c2:&quot;content&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.clickEvent = this.clickEvent.bind(this)//需要绑定this</span><br><span class="line">    &#125;</span><br><span class="line">    clickEvent(e)&#123; //e是默认事件对象；e.target会找到事件目标者</span><br><span class="line">        console.log(&#x27;clickEvent&#x27;)</span><br><span class="line">        console.log(e.target.dataset.index)//找到点击事件对象目标的dataset.*的属性值</span><br><span class="line">        let index = e.target.dataset.index;</span><br><span class="line">        console.log(this)</span><br><span class="line">        if(index==&#x27;1&#x27;)&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                c1:&#x27;content active&#x27;</span><br><span class="line">               </span><br><span class="line">            &#125;)</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                c2:&quot;content&quot;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                c1:&#x27;content&#x27;,</span><br><span class="line">                c2:&quot;content active&quot;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;/*data-* 来设置对象的dataset的属性值*/&#125;</span><br><span class="line">                &#123;/*此外，onclick中的this.clickEvent需要手动绑定this，因为使用的是ES6的class来生成类组件*/&#125;</span><br><span class="line">                &lt;button data-index=&quot;1&quot; onClick=&#123;this.clickEvent&#125;&gt;内容一&lt;/button&gt; </span><br><span class="line">                &lt;button data-index=&quot;2&quot; onClick=&#123;this.clickEvent&#125;&gt;内容二&lt;/button&gt;</span><br><span class="line">                &lt;div className=&#123;this.state.c1&#125;&gt;</span><br><span class="line">                    &lt;h1&gt;内容1&lt;/h1&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div className=&#123;this.state.c2&#125;&gt;</span><br><span class="line">                    &lt;h1&gt;内容2&lt;/h1&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Tab /&gt;,</span><br><span class="line">    document.querySelector(&#x27;#root&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>react</category>
        <category>状态</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>状态</tag>
        <tag>setState</tag>
        <tag>this绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架react自学之react组件(五)</title>
    <url>/2020/02/29/blog46/</url>
    <content><![CDATA[<p>终极目标：掌握和使用react</p>
<p>本博客目的：记录react学习的进度和心得（react组件）</p>
<p>内容：通过视频学习，掌握react基础语法。</p>
<span id="more"></span>

<h3 id="前端框架react自学之react组件-五"><a href="#前端框架react自学之react组件-五" class="headerlink" title="前端框架react自学之react组件(五)"></a>前端框架react自学之react组件(五)</h3><h4 id="react组件"><a href="#react组件" class="headerlink" title="react组件"></a>react组件</h4><p>函数式组件与类组件的区别和使用：</p>
<p>函数式比较简单，一般用于静态没有交互事件内容的组件页面。</p>
<p>类组件，一般又称为动态组件，那么一般会有交互或者数据修改的操作，例如一些方法。</p>
<h4 id="函数式组件-函数，返回一个JSX对象）"><a href="#函数式组件-函数，返回一个JSX对象）" class="headerlink" title="函数式组件(函数，返回一个JSX对象）"></a>函数式组件(函数，返回一个JSX对象）</h4><p>无状态组件式从<a href="https://reactjs.org/blog/2015/10/07/react-v0.14.html#stateless-functional-components">React 0.14</a> 版本开始的。为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。</p>
<p>目前React已发展到16.9,引入了Hook,推荐使用无状态组件。</p>
<p>无状态函数式组件形式上表现为一个只带有一个render方法的组件类，通过函数形式或者ES6 arrow function的形式在创建，并且该组件是无state状态的。具体的创建形式如下：<br>第一个参数是 <code>props</code>，第二个是 <code>context</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Welcome(props, context) &#123;</span><br><span class="line">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Welcome name=&quot;whongliang&quot; /&gt;, mountNode) </span><br></pre></td></tr></table></figure>

<p>无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个<code>render</code>方法，大大的增强了编写一个组件的便利，除此之外无状态组件还有以下几个显著的特点：</p>
<p>1组件不会被实例化，整体渲染性能得到提升.</p>
<p>​	因为组件被精简成一个<code>render</code>方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，从而性能得到一定的提升。</p>
<p>2组件不能访问this对象</p>
<p>​	无状态组件由于没有实例化过程，所以无法访问组件<code>this</code>中的对象，例如：<code>this.ref</code>、<code>this.state</code>等均不能访问。若想访问就不能使用这种形式来创建组件</p>
<p>3 组件无法访问生命周期的方法</p>
<p>​	因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。</p>
<p>4 无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用</p>
<p>​	无状态组件被鼓励在大型项目中尽可能以简单的写法来分割原本庞大的组件，未来<code>React</code>也会这种面向无状态组件在譬如无意义的检查和内存分配领域进行一系列优化，所以只要有可能，尽量使用无状态组件。</p>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//函数式组件</span><br><span class="line">function Childcom(props)&#123;</span><br><span class="line">    console.log(props)</span><br><span class="line"></span><br><span class="line">    let title = &lt;h2&gt;我是副标题&lt;/h2&gt;</span><br><span class="line">    let weather = props.weather//从所有的props参数里面使用weather变量</span><br><span class="line">    //条件判断 </span><br><span class="line">    let isGo = weather==&#x27;下雨&#x27; ?&quot;不出门&quot;:&quot;出门&quot;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;函数式组件helloworld&lt;/h1&gt;</span><br><span class="line">            &#123;title&#125;</span><br><span class="line"></span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                是否出门？</span><br><span class="line">                &lt;span&gt;&#123;isGo&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h4><h4 id="React-createClassd"><a href="#React-createClassd" class="headerlink" title="React.createClassd"></a>React.createClassd</h4><p><code>React.createClass</code>是React刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件，其形式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var InputControlES5 = React.createClass(&#123;</span><br><span class="line">    propTypes: &#123;//定义传入props中的属性各种类型</span><br><span class="line">        initialValue: React.PropTypes.string</span><br><span class="line">    &#125;,</span><br><span class="line">    defaultProps: &#123; //组件默认的props对象</span><br><span class="line">        initialValue: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 设置 initial state</span><br><span class="line">    getInitialState: function() &#123;//组件相关的状态对象</span><br><span class="line">        return &#123;</span><br><span class="line">            text: this.props.initialValue || &#x27;placeholder&#x27;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange: function(event) &#123;</span><br><span class="line">        this.setState(&#123; //this represents react component instance</span><br><span class="line">            text: event.target.value</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: function() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                Type something:</span><br><span class="line">                &lt;input onChange=&#123;this.handleChange&#125; value=&#123;this.state.text&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">InputControlES6.propTypes = &#123;</span><br><span class="line">    initialValue: React.PropTypes.string</span><br><span class="line">&#125;;</span><br><span class="line">InputControlES6.defaultProps = &#123;</span><br><span class="line">    initialValue: &#x27;&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>与无状态组件相比，<code>React.createClass</code>和后面要描述的<code>React.Component</code>都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。但是随着React的发展，<code>React.createClass</code>形式自身的问题暴露出来：</p>
<p>1<code>React.createClass</code>会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。</p>
<p>2<code>React.createClass</code>的<code>mixins</code>不够自然、直观；<code>React.Component</code>形式非常适合高阶组件（Higher Order Components–HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。</p>
<h4 id="React-createClassd-1"><a href="#React-createClassd-1" class="headerlink" title="React.createClassd"></a>React.createClassd</h4><p>React.Component是以ES6的形式来创建react的组件的，最终会取代React.createClass形式(因为ES6提供了类)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class InputControlES6 extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line"></span><br><span class="line">        // 设置 initial state</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            text: props.initialValue || &#x27;placeholder&#x27;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // ES6 类中函数必须手动绑定</span><br><span class="line">        this.handleChange = this.handleChange.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange(event) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            text: event.target.value</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                Type something:</span><br><span class="line">                &lt;input onChange=&#123;this.handleChange&#125;</span><br><span class="line">               value=&#123;this.state.text&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">InputControlES6.propTypes = &#123;</span><br><span class="line">    initialValue: React.PropTypes.string</span><br><span class="line">&#125;;</span><br><span class="line">InputControlES6.defaultProps = &#123;</span><br><span class="line">    initialValue: &#x27;&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="React-createClass与React-Component区别"><a href="#React-createClass与React-Component区别" class="headerlink" title="React.createClass与React.Component区别"></a>React.createClass与React.Component区别</h5><p>1函数this自绑定</p>
<p>​	React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Contacts = React.createClass(&#123;  </span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    console.log(this); // React Component instance</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div onClick=&#123;this.handleClick&#125;&gt;&lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​	React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lass Contacts extends React.Component &#123;  </span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    console.log(this); // null</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div onClick=&#123;this.handleClick&#125;&gt;&lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>当然，React.Component有三种手动绑定方法：可以在构造函数中完成绑定，也可以在调用时使用method.bind(this)来完成绑定，还可以使用arrow function来绑定。拿上例的handleClick函数来说，其绑定可以有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//构造函数中绑定</span><br><span class="line">constructor(props) &#123;</span><br><span class="line">   super(props);</span><br><span class="line">   this.handleClick = this.handleClick.bind(this);</span><br><span class="line">&#125;</span><br><span class="line">// 使用bind来绑定</span><br><span class="line">&lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;&lt;/div&gt;</span><br><span class="line">// 使用arrow function来绑定</span><br><span class="line">&lt;div onClick=&#123;()=&gt;this.handleClick()&#125;&gt;&lt;/div&gt; </span><br></pre></td></tr></table></figure>

<p>2组件属性类型propTypes及其默认props属性defaultProps配置不同</p>
<p>​	react.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const TodoItem = React.createClass(&#123;</span><br><span class="line">    propTypes: &#123; // as an object</span><br><span class="line">        name: React.PropTypes.string</span><br><span class="line">    &#125;,</span><br><span class="line">    getDefaultProps()&#123;   // return a object</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &#x27;&#x27;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。对应上面配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TodoItem extends React.Component &#123;</span><br><span class="line">    static propTypes = &#123;//类的静态属性</span><br><span class="line">        name: React.PropTypes.string</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    static defaultProps = &#123;//类的静态属性</span><br><span class="line">        name: &#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3组件初始状态state的配置不同</p>
<p>React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；<br>React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const TodoItem = React.createClass(&#123;</span><br><span class="line">    // return an object</span><br><span class="line">    getInitialState()&#123; </span><br><span class="line">        return &#123;</span><br><span class="line">            isEditing: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">class TodoItem extends React.Component&#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123; // define this.state in constructor</span><br><span class="line">            isEditing: false</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4 Mixins的支持不同</p>
<p>Mixins(混入)是面向对象编程OOP的一种实现，其作用是为了复用共有的代码，将共有的代码通过抽取为一个对象，然后通过Mixins进该对象来达到代码复用。</p>
<p>React.createClass在创建组件时可以使用mixins属性，以数组的形式来混合类的集合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var SomeMixin = &#123;  </span><br><span class="line">  doSomething() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const Contacts = React.createClass(&#123;  </span><br><span class="line">  mixins: [SomeMixin],</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.doSomething(); // use mixin</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div onClick=&#123;this.handleClick&#125;&gt;&lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>但是遗憾的是React.Component这种形式并不支持Mixins，至今React团队还没有给出一个该形式下的官方解决方案；但是React开发者社区提供一个全新的方式来取代Mixins,那就是Higher-Order Components(高阶组件)</p>
<p>高阶组件是react应用中很重要的一部分，最大的特点就是重用组件逻辑。它并不是由React API定义出来的功能，而是由React的组合特性衍生出来的一种设计模式。如果你用过redux，那你就一定接触过高阶组件，因为react-redux中的connect就是一个高阶组件。（后面再说）</p>
<h4 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h4><p>组件中又有其他的组件，复合组件中既可以有类组件又可以有函数组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class="line">import &#x27;./04style.css&#x27;;</span><br><span class="line"></span><br><span class="line">function Childcom(props)&#123;</span><br><span class="line">    console.log(props)</span><br><span class="line"></span><br><span class="line">    let title = &lt;h2&gt;我是副标题&lt;/h2&gt;</span><br><span class="line">    let weather = props.weather</span><br><span class="line">    //条件判断 </span><br><span class="line">    let isGo = weather==&#x27;下雨&#x27; ?&quot;不出门&quot;:&quot;出门&quot;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;函数式组件helloworld&lt;/h1&gt;</span><br><span class="line">            &#123;title&#125;</span><br><span class="line"></span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                是否出门？</span><br><span class="line">                &lt;span&gt;&#123;isGo&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//复合组件</span><br><span class="line">class HelloWorld extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">//返回的都是JSX对象</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;类组件定义HELLOWORLD&lt;/h1&gt;</span><br><span class="line">                &lt;h1&gt;hello:&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">                &lt;Childcom weather=&#123;this.props.weather&#125; /&gt;//相当于传参，参数对象，参数对象里面有weather这个变量（对象）</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ReactDOM.render(</span><br><span class="line">//     &lt;Childcom weather=&quot;出太阳&quot; /&gt;,</span><br><span class="line">//     document.querySelector(&#x27;#root&#x27;)</span><br><span class="line">// )</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;HelloWorld name=&quot;老陈&quot; weather=&quot;下雨&quot; /&gt;,</span><br><span class="line">    document.querySelector(&#x27;#root&#x27;)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react</category>
        <category>组件</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS介绍&amp;安装&amp;开发工具配置</title>
    <url>/2020/05/08/blog48/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得（NodeJS介绍&amp;安装&amp;开发工具配置）</p>
<p>内容：NodeJS介绍&amp;安装&amp;开发工具配置。</p>
<span id="more"></span>

<h3 id="NodeJS介绍-安装-开发工具配置"><a href="#NodeJS介绍-安装-开发工具配置" class="headerlink" title="NodeJS介绍&amp;安装&amp;开发工具配置"></a>NodeJS介绍&amp;安装&amp;开发工具配置</h3><h4 id="NodeJS介绍"><a href="#NodeJS介绍" class="headerlink" title="NodeJS介绍"></a>NodeJS介绍</h4><p>​		Node.js 是一个Javascript 运行环境(runtime)。它让JavaScript 可以开发后端程序，它几乎能实现其他后端语言能实现的所有功能。<br>​		Nodejs 是基于Google V8 引擎，V8 引擎是Google 发布的一款开源的JavaScript 引擎，原来主要用于Chrome 浏览器的JS 解释部分，但是Ryan Dahl 把这个V8引擎搬到了服务器上，用于做服务器的软件。</p>
<h4 id="学习node的必要性"><a href="#学习node的必要性" class="headerlink" title="学习node的必要性"></a>学习node的必要性</h4><p>1、Nodejs 用户量大：我们无法统计Nodejs 软件的下载量，但是我们可以通过Nodejs框架Express 的下载量来分析出Nodejs 的用户量非常惊人。</p>
<p>2、Nodejs 是程序员必备技能:对于前端开发者而言Nodejs 目前是必备技能。</p>
<p>3、Nodejs 最擅长高并发：Nodejs 最擅长的就是处理高并发，在Java、PHP 或者.net 等服务器端语言中，会为每一个客户端连接创建一个新的线程。而每个线程需要耗费大约2MB内存。也就是说，理论上，一个8GB 内存的服务器可以同时连接的最大用户数为4000 个左右。要让Web 应用程序支持更多的用户，就需要增加服务器的数量，而Web 应用程序的硬件成本当然就上升了。Node.js 不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发一个内部事件，通过非阻塞I&#x2F;O、事件驱动机制，让Node.js 程序宏观上也是并行的。使用Node.js，一个8GB 内存的服务器，可以同时处理超过4 万用户的连接。</p>
<p>4、Nodejs 简单：NodeJs 语法完全是js 语法，只要你懂JS 基础就可以学会Nodejs 后端开发。使得Nodejs 具有开发周期短、开发成本低、学习成本低等优势。</p>
<p>5、Nodejs 可实现的功能多：Nodejs 不仅可以像其他后端语言一样写动态网站、写接口，还可以应用在云计算平台、游戏开发、区块链开发、即时通讯、跨平台App 开发、桌面应用开发（electron）、云直播、物联网领域等。</p>
<p><img src="/2020/05/08/blog48/image-20200508160112187.png" alt="image-20200508160112187"></p>
<h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><p>官网下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>通常下载稳定版本，然后安装。</p>
<p>验证安装成功与否：打开CMD，node -v（查看node版本）</p>
<p><img src="/2020/05/08/blog48/image-20200508160243699.png" alt="image-20200508160243699"></p>
<h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>通常使用vscode(前端比较流行使用这个)。</p>
<p>VScode官网下载，安装。</p>
<p>VScode中使用node：</p>
<p>例如，创建一个app.js文件，里面写console.log(‘hello,nodejs’)，在终端输入node app.js，看结果输出：</p>
<p><img src="/2020/05/08/blog48/image-20200508160551634.png" alt="image-20200508160551634"></p>
<p><img src="/2020/05/08/blog48/image-20200508160557946.png" alt="image-20200508160557946"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之HTTP 模块、URL 模块、supervisor 工具</title>
    <url>/2020/05/08/blog49/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得（HTTP 模块、URL 模块、<br>supervisor 工具）</p>
<p>内容：HTTP 模块、URL 模块、supervisor 工具。</p>
<span id="more"></span>

<h3 id="HTTP-模块、URL-模块、supervisor-工具"><a href="#HTTP-模块、URL-模块、supervisor-工具" class="headerlink" title="HTTP 模块、URL 模块、supervisor 工具"></a>HTTP 模块、URL 模块、supervisor 工具</h3><p>Node.js 中，将很多的功能，划分为了一个个module（模块）。Node.js 中的很多功能都是通过模块实现。</p>
<h4 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h4><p>​	如果我们使用PHP 来编写后端的代码时，需要Apache 或者Nginx 的HTTP 服务器，来处理客户端的请求相应。</p>
<p>​	不过对Node.js 来说，概念完全不一样了。使用Node.js 时，我们不仅仅在实现一个应用，同时还实现了整个HTTP 服务器。</p>
<p>​	http模块在node已经内置好了，可以直接require引用。</p>
<p>​	<code>var http = require(&quot;http&quot;);</code></p>
<p>创建服务器</p>
<p>​	使用http.createServer() 方法创建服务器，并使用listen 方法绑定8888 端口（通常端口设置大于3000，避免端口冲突）。函数通过request, response 参数来接收和响应数据。</p>
<p><img src="/2020/05/08/blog49/image-20200508164008971.png" alt="image-20200508164008971"></p>
<p>在终端运行程序：</p>
<p>​	cd到文件目录，然后node 文件名 运行，接着用浏览器点开响应链接观察结果。</p>
<p><img src="/2020/05/08/blog49/image-20200508164355806.png" alt="image-20200508164355806"></p>
<p>浏览器结果：</p>
<p>​	响应了正确的文字，和H2标题，请求了两个文件，响应中地址和状态码信息都符合我们的设置。</p>
<p><img src="/2020/05/08/blog49/image-20200508164037143.png" alt="image-20200508164037143"></p>
<p><img src="/2020/05/08/blog49/image-20200508164118199.png" alt="image-20200508164118199"></p>
<p>小结：<strong>也就是说，我们本地写一个js，打死都不能直接拖入浏览器运行，但是有了node，我们任何一个js 文件，都可以通过node 来运行。也就是说，node 就是一个js 的执行环境。</strong></p>
<p>​	此外，来看一下req 里面能够使用的东西。最关键的就是req.url 属性，表示用户的请求URL 地址。所有的路由设计，都是通过req.url来实现的。<br>​	我们比较关心的不是拿到URL，而是识别这个URL。这个时候可以使用url模块。</p>
<h4 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h4><p>​	使用url模块时，先require引入，然后使用url.parse() 解析URL</p>
<p><img src="/2020/05/08/blog49/image-20200508165756612.png" alt="image-20200508165756612"></p>
<p>输出一个url对象</p>
<p><img src="/2020/05/08/blog49/image-20200508165814675.png" alt="image-20200508165814675"></p>
<p>让我们向解析url的query时，parse()方法里面，设置第二个参数为true:</p>
<p><img src="/2020/05/08/blog49/image-20200508165927433.png" alt="image-20200508165927433"></p>
<p><img src="/2020/05/08/blog49/image-20200508165951426.png" alt="image-20200508165951426"></p>
<p><strong>url的其他方法</strong>：</p>
<p>url.format(urlObject) &#x2F;&#x2F;是上面url.parse() 操作的逆向操作<br>url.resolve(from, to) 添加或者替换地址</p>
<h4 id="http模块与url模型的结合使用"><a href="#http模块与url模型的结合使用" class="headerlink" title="http模块与url模型的结合使用"></a>http模块与url模型的结合使用</h4><p>通常，浏览器（客户端）输入的url会带有一些查询（参数）。</p>
<p><img src="/2020/05/08/blog49/image-20200508171358359.png" alt="image-20200508171358359"></p>
<p>这个时候，服务器可能需要知道，甚至解析这个ur。这个时候就使用到req对象了。</p>
<p>http的req对象其实里面有很多属性(即存在很多信息)</p>
<p><img src="/2020/05/08/blog49/image-20200508170530432.png" alt="image-20200508170530432"></p>
<p><img src="/2020/05/08/blog49/image-20200508170622481.png" alt="image-20200508170622481"></p>
<p>其中，有个属性是url，获取浏览器访问的地址</p>
<p><img src="/2020/05/08/blog49/image-20200508171509440.png" alt="image-20200508171509440"></p>
<p>结果：</p>
<p><img src="/2020/05/08/blog49/image-20200508171500542.png" alt="image-20200508171500542"></p>
<p>浏览器也确实反映了需要这两个文件：</p>
<p><img src="/2020/05/08/blog49/image-20200508171735535.png" alt="image-20200508171735535"></p>
<p>相当于服务器获取到了这两个请求，但实际上可能我们需要的是第一个请求，并且解析它（让这个请求解析为一个对象）并做一些处理：</p>
<p><img src="/2020/05/08/blog49/image-20200508172135269.png" alt="image-20200508172135269"></p>
<p><img src="/2020/05/08/blog49/image-20200508172205135.png" alt="image-20200508172205135"></p>
<p>结果：（每次结果要记得现在保存修改，结束服务器控制台CTRL+C，然后重新运行文件，刷新浏览器，才可以观察结果）</p>
<p><img src="/2020/05/08/blog49/image-20200508172221383.png" alt="image-20200508172221383"></p>
<p>小结：<strong>这样就可以获取url的get传值。</strong></p>
<h4 id="Nodejs-自启动工具supervisor"><a href="#Nodejs-自启动工具supervisor" class="headerlink" title="Nodejs 自启动工具supervisor"></a>Nodejs 自启动工具supervisor</h4><p>​	之前的调试，可以发现，当修改js文件时，需要保存，结束服务器控制台CTRL+C，然后重新运行文件，刷新浏览器，才可以观察结果。</p>
<p>​	supervisor 会不停的watch 你应用下面的所有文件，发现有文件被修改，就重新载入程序文件这样就实现了部署，修改了程序文件后马上就能看到变更后的结果。</p>
<p>​	supervisor也是node内置的一个模块，使用它时，首先全局安装：</p>
<p><img src="/2020/05/08/blog49/image-20200508172945630.png" alt="image-20200508172945630"></p>
<p>​	然后，使用supervisor 关键词代替node 命令启动应用：</p>
<p><img src="/2020/05/08/blog49/image-20200508173410091.png" alt="image-20200508173410091"></p>
<p>​	举例1：</p>
<p>​	例如，一开始浏览器请求为：</p>
<p><img src="/2020/05/08/blog49/image-20200508173347708.png" alt="image-20200508173347708"></p>
<p>​	回车后，服务器控制台输出：</p>
<p><img src="/2020/05/08/blog49/image-20200508173503610.png" alt="image-20200508173503610"></p>
<p>​	当修改浏览器请求时：</p>
<p><img src="/2020/05/08/blog49/image-20200508173523515.png" alt="image-20200508173523515"></p>
<p>​	回车后，结果改为：</p>
<p><img src="/2020/05/08/blog49/image-20200508173543026.png" alt="image-20200508173543026"></p>
<p>​	</p>
<p>​	举例2：</p>
<p>​	当修改服务器文件时：（加多一个name字段）</p>
<p><img src="/2020/05/08/blog49/image-20200508173719962.png" alt="image-20200508173719962"></p>
<p>​	保存文件，此时服务器控制台，重启：</p>
<p><img src="/2020/05/08/blog49/image-20200508173819570.png" alt="image-20200508173819570"></p>
<p>​	浏览器点开页面（刷新），一样可以获取相关信息：</p>
<p>​	<img src="/2020/05/08/blog49/image-20200508173846747.png" alt="image-20200508173846747"></p>
<p><strong>小结：这样调试就比之前的要方便很多了。</strong></p>
<p><strong>其他补充：</strong></p>
<p>当然，如果npm安装比较慢，也可以修改npm为cnpm，使用淘宝的镜像文件来安装。</p>
<p>安装cnpm （推荐）	</p>
<pre><code>http://npm.taobao.org/

npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre>
<p>然后 cnpm -g install supervisor </p>
<p>运行代码：supervisor app.js</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>HTTP 模块</tag>
        <tag>URL 模块</tag>
        <tag>supervisor工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript或者是JS模块的运行方法</title>
    <url>/2019/09/25/blog5/</url>
    <content><![CDATA[<p>（<strong>新增强推</strong>）如果想在Visual Studio Code编译器，要配置ES6的JavaScript运行环境可以参考：</p>
<p>　　我的另一篇博文：<a href="https://www.cnblogs.com/xinkuiwu/p/12052495.html">配置ES6的JavaScript运行环境-Visual Studio Code</a></p>
<h3 id="运行ES6代码（或模块）的方法："><a href="#运行ES6代码（或模块）的方法：" class="headerlink" title="运行ES6代码（或模块）的方法："></a>运行ES6代码（或模块）的方法：</h3><p>1、可以使用Babel转码器，把ES6的JS转码成Node.js的CommonJS。</p>
<p>　　如，在安装好Babel时，使用命令babel file.js –out dir folder。即把名为“file”的JS模块（代码）转码在名为“folder”的文件夹下。把需要用到的JS代码或者是模块代码转码为通用的JS，然后运行转码后的文件，就可以运行了。（注：Babel也提供了在线转码： <a href="https://babeljs.io/repl">https://babeljs.io/repl</a> ）</p>
<p>2、将ES6文件的扩展名从.js改成.mjs，然后在node命令后添加–experimental-modules来执行代码。</p>
<p>　　如，我们要运行“moduleTry.js”文件，首先将其改后缀名为.mjs，即为“moduleTry.mjs”。然后在该文件目录下执行Node命令，即node –experimental-modules moduleTry.mjs就可以了。</p>
<p>3、在浏览器运行ES6模块。</p>
<p>　　启动浏览器的实验性模式，然后在script标签中增加type&#x3D;”module”就可以导入我们创建的模块了。例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;xxx.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>当执行代码时打开浏览器的Developer Tools|Network标签页，就会看到我们创建的所有文件都被加载了。然后可以在控制台查看相关结果。</p>
]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>JavaScript</tag>
        <tag>运行环境，node</tag>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之CommonJs 和Nodejs 模块、自定义模块</title>
    <url>/2020/05/09/blog50/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得（CommonJs 和Nodejs 模块、自定义模块）</p>
<p>内容：CommonJs 和Nodejs 模块、自定义模块。</p>
<span id="more"></span>

<h3 id="CommonJs-和Nodejs-模块、自定义模块"><a href="#CommonJs-和Nodejs-模块、自定义模块" class="headerlink" title="CommonJs 和Nodejs 模块、自定义模块"></a>CommonJs 和Nodejs 模块、自定义模块</h3><h4 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h4><p>​	<strong>什么是commonJS</strong></p>
<p>​	JavaScript 是一个强大面向对象语言，它有很多快速高效的解释器。然而， JavaScript标准定义的API 是为了构建基于浏览器的应用程序。并没有制定一个用于更广泛的应用程序的标准库。CommonJS 规范的提出,主要是为了弥补当前JavaScript 没有标准库的缺陷。它的终极目标就是：提供一个类似Python，Ruby 和Java 语言的标准库,而不只是让JavaScript 停留在小脚本程序的阶段。用CommonJS API 编写出的应用，不仅可以利用JavaScript 开发客户端应用，而且还可以编写以下应用：<br>​	•服务器端JavaScript 应用程序。（nodejs）<br>​	•命令行工具。<br>​	•桌面图形界面应用程序。</p>
<p><strong>CommonJS 就是模块化的标准，nodejs 就是CommonJS（模块化）的实现。</strong></p>
<h4 id="Nodejs-中的模块化"><a href="#Nodejs-中的模块化" class="headerlink" title="Nodejs 中的模块化"></a>Nodejs 中的模块化</h4><p>​	1、Node 应用由模块组成，采用CommonJS 模块规范	</p>
<p>​	在Node 中，模块分为两类:	一类是Node 提供的模块,称为<strong>核心模块</strong>（系统模块）；另一类是用户编写的模块，称为<strong>文件模块</strong>（自定义模块）。</p>
<p>​	<strong>核心模块</strong>部分在Node 源代码的编译过程中，编译进了二进制执行文件。在Node 进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。如：HTTP 模块、URL 模块、Fs 模块都是nodejs 内置的核心模块，可以直接引入使用。</p>
<p>​	<strong>文件模块</strong>则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程、速度相比核心模块稍微慢一些，但是用的非常多。这些模块需要我们自己定义。	</p>
<p>​	2、CommonJS（Nodejs）中自定义模块的规定</p>
<p>​	我们可以把公共的功能抽离成为一个单独的js 文件作为一个模块，默认情况下面这个模块里面的方法或者属性，外面是没法访问的。如果要让外部可以访问模块里面的方法或者属性，就必须在模块里面通过exports 或者module.exports 暴露属性或者方法。</p>
<p>​	在需要使用这些模块的文件中，通过require 的方式引入这个模块。这个时候就可以使用模块里面暴露的属性和方法。如图所示：</p>
<p><img src="/2020/05/09/blog50/image-20200509202911341.png" alt="image-20200509202911341"></p>
<p>​	<strong>具体使用实例</strong>：</p>
<p>​	例子1：</p>
<p>​	例如我们需要使用一些方法时，通常可以在同一文件定义，并且使用：</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509203730269.png" alt="image-20200509203730269"></p>
<p>​	结果：</p>
<p><img src="/2020/05/09/blog50/image-20200509203849491.png" alt="image-20200509203849491"></p>
<p>例子2：</p>
<p>​	但通常我们是把一个公共的方法定义在一个文件夹里的某个文件，例如定义一个module文件夹，里面把公共方法写在tools.js：</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509204051036.png" alt="image-20200509204051036"></p>
<p>​	然后用export或module.exports导出：</p>
<p><img src="/2020/05/09/blog50/image-20200509204303130.png" alt="image-20200509204303130"></p>
<p>​	然后在需要使用的地方导入使用：</p>
<p><img src="/2020/05/09/blog50/image-20200509204445772.png" alt="image-20200509204445772"></p>
<p>​	运行，看控制台结果：</p>
<p><img src="/2020/05/09/blog50/image-20200509204542793.png" alt="image-20200509204542793"></p>
<p>​	正好输出的是我们exports.formatApi这个formatApi对象。</p>
<p>​	浏览器也反映了结果：</p>
<p><img src="/2020/05/09/blog50/image-20200509204713401.png" alt="image-20200509204713401"></p>
<p>​	例子3：模块导出的方式还可以是module.exports&#x3D;导出对象，例如创建一个request.js</p>
<p><img src="/2020/05/09/blog50/image-20200509204914906.png" alt="image-20200509204914906"></p>
<p><img src="/2020/05/09/blog50/image-20200509204931745.png" alt="image-20200509204931745"></p>
<p>​	此时，相当于这个js文件就是名为obj的对象。（封装成对象的形式，在于对对象属性和方法的自定义）</p>
<p>​	打印模块：</p>
<p><img src="/2020/05/09/blog50/image-20200509205041763.png" alt="image-20200509205041763"></p>
<p>​	此外，如果说我们只是导出一些方法，也可以不用封装成一个对象，直接导出即可。（其实也是把模块文件看成了一个对象）</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509205153745.png" alt="image-20200509205153745"></p>
<p><img src="/2020/05/09/blog50/image-20200509205234953.png" alt="image-20200509205234953"></p>
<p>​	例子4：node_modules文件夹的定义</p>
<p>​	通常node_modules文件夹是放置我们自定义模块的地方。</p>
<p>​	我们先创建一个名为node_modules的文件夹，然后再里面创建一个axios（表示数据请求模块），并创建index.js文件。</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509205611739.png" alt="image-20200509205611739"></p>
<p><img src="/2020/05/09/blog50/image-20200509205743464.png" alt="image-20200509205743464"></p>
<p>​	当我们需要引入这个axios下的index.js时，可以：</p>
<p><img src="/2020/05/09/blog50/image-20200509205827060.png" alt="image-20200509205827060"></p>
<p>（index.js的.js后缀可以省略）</p>
<p>​	还可以省略node_modules，引入和使用：</p>
<p><img src="/2020/05/09/blog50/image-20200509205938168.png" alt="image-20200509205938168"></p>
<p>​	因为node_modules文件夹，在其里面定义的模块，node可以在不写完整路径，直接找到node_modules文件夹下的模块。（原理应该是node配置中，默认了先从自己内置模块（系统模块）找，再接着从node_modules文件夹找，也就是从自定义模型里面找。）</p>
<p>​	进一步地，每个模块的index.js就是一个默认的文件入口，使用时也可以省略：</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509210302568.png" alt="image-20200509210302568"></p>
<p>​	这就与引入系统模块类似：</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509210445160.png" alt="image-20200509210445160"></p>
<p>例子5：</p>
<p>​	如果，我们自定义的模块不是以index.js写的，例如：</p>
<p>​	创建一个自定义模块db(表示数据库)：</p>
<p><img src="/2020/05/09/blog50/image-20200509210640312.png" alt="image-20200509210640312"></p>
<p><img src="/2020/05/09/blog50/image-20200509210652766.png" alt="image-20200509210652766"></p>
<p>​	但是如果直接（省略完整路径）引入使用时：</p>
<p><img src="/2020/05/09/blog50/image-20200509210734029.png" alt="image-20200509210734029"></p>
<p>​	这样，会出错，找不到这个模块：</p>
<p><img src="/2020/05/09/blog50/image-20200509210856133.png" alt="image-20200509210856133"></p>
<p>​	因为省略完整路径的规范中，入口文件是以index.js查找的，虽然我们把db.js改写成index.js可以，但我们其实可以为其配置入口文件packag.json。</p>
<p>​	首先，通过npm init 生成package.json(配置文件)</p>
<p>​	cd模块文件路径，然后cmd输入命令：</p>
<p><code>npm init --yes</code> –在当前文件目录下强制生成package.json。</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509211335024.png" alt="image-20200509211335024"></p>
<p>​	package.json文件里面有很多信息。如名字，版本，描述，入口，脚本等。</p>
<p><img src="/2020/05/09/blog50/image-20200509211409822.png" alt="image-20200509211409822">	此时，修改main属性为模块文件。</p>
<p>​	之后，在引入使用模块时，就可以正常使用了：</p>
<p>​	<img src="/2020/05/09/blog50/image-20200509211530441.png" alt="image-20200509211530441"></p>
<p>​	结果（成功使用）：</p>
<p><img src="/2020/05/09/blog50/image-20200509211540769.png" alt="image-20200509211540769"></p>
<p><strong>小结：node的自定义模型都是放在node_modules文件夹里面，引入模块时，直接require这个模块名即可。如果不是命名为index.js的自定模块，需要配置package.json，配置入口。</strong></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>CommonJs</tag>
        <tag>Nodejs 模块</tag>
        <tag>自定义模块</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之Nodejs中的包、npm 、第三方模块、package.json 以及cnpm</title>
    <url>/2020/05/10/blog51/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得</p>
<p>内容：Nodejs 中的包、npm 、第三方模块、package.json 以及cnpm。</p>
<span id="more"></span>

<h3 id="包与npm"><a href="#包与npm" class="headerlink" title="包与npm"></a>包与npm</h3><p>​	Nodejs 中除了它自己提供的核心模块外，我们可以自定义模块，也可以使用第三方的模块（属于自定义模块）。Nodejs 中第三方模块由包组成，可以通过包来对一组具有相互依赖关系的模块进行统一管理。</p>
<p>​	<img src="/2020/05/10/blog51/image-20200510151538384.png" alt="image-20200510151538384"></p>
<p>​	其中某模块引入的包中，其可能也是内部需要引入一些其他的模块。</p>
<p>完全符合CommonJs 规范的包目录一般包含如下这些文件。<br>• package.json :包描述文件。<br>• bin :用于存放可执行二进制文件的目录。<br>• lib :用于存放JavaScript 代码的目录。<br>• doc :用于存放文档的目录。</p>
<p>​	在NodeJs 中通过NPM （包管理工具）命令来下载第三方的模块（包）。所有的第三方模块都可以在官网找到。</p>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>npm 是世界上最大的开放源代码的生态系统。我们可以通过npm 下载各种各样的包，这些源代码（包）我们可以在<a href="https://www.npmjs.com/">https://www.npmjs.com</a> 找到。</p>
<p><img src="/2020/05/10/blog51/image-20200510151853095.png" alt="image-20200510151853095"></p>
<p>npm 是随同NodeJS 一起安装的包管理工具，能解决NodeJS 代码部署上的很多问题，常见的使用场景有以下几种：</p>
<p>1 允许用户从NPM 服务器下载别人编写的第三方包到本地使用。(如silly-datetime格式化日期包)<br>2 允许用户从NPM 服务器下载并安装别人编写的命令行程序(工具)到本地使用。（如supervisor工具）<br>3  允许用户将自己编写的包或命令行程序上传到NPM 服务器供别人使用。</p>
<p>使用包的步骤：</p>
<p><img src="/2020/05/10/blog51/image-20200510155336450.png" alt="image-20200510155336450"></p>
<h3 id="NPM-命令"><a href="#NPM-命令" class="headerlink" title="NPM 命令"></a>NPM 命令</h3><ol>
<li>npm -v 查看npm 版本</li>
<li>使用npm 命令安装模块，如npm install Module Name（通常记得 –save或 –save-dev）</li>
<li>npm uninstall moudleName 卸载模块(或者在node_modules文件夹里面删掉并且在package.json对应位置删除)</li>
<li>npm list 查看当前目录下已安装的node 包（里面会包含第三方包所依赖的包）</li>
<li>npm info 模块&#x2F;&#x2F;查看模块的版本</li>
<li>指定版本安装npm install 模块@1.8.0（可以去github中的包的release看版本号）</li>
</ol>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>package.json 定义了这个项目所需要的各种模块,以及项目的配置信息(比如名称、版本、许可证等元数据)</p>
<p>1、创建package.json(当前目录，cmd，输入一下命令。我们在创建项目的时候最好也这样创建一个package.json)</p>
<p><code>npm init 或者npm init –yes</code></p>
<p>2、package.json 文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wade&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.10.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;jslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.6.5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>包含了项目所涉及的名字，版本，描述，入口文件，方法，版本，运行依赖，开发依赖。</p>
<p>3、安装模块并把模块写入package.json(依赖)</p>
<p>​	我们可以在写项目的时候，需要引入使用一些第三方包，会npm install 第三方包，此时第三方包会下载到node_modules文件夹里，但是如果我们需要贡献这个项目给其他人使用时，上传的是源码文件，也不包含这个node_modules文件夹的（这个文件夹包含很多包，体积也很大），例如我们使用github就是这种情况。</p>
<p>​	为了让其他人知道我们项目是需要依赖哪些包，我们在写项目时，需要安装的模块会把信息写入package.json里面，之后使用者只需下载项目（包含这个package.json），然后npm init(npm i)根据这个package.json初始化项目，自动下载相关依赖包，后续即可使用。</p>
<p>npm install 模块 –save  （运行时依赖，例如一些vue框架，我们在开发完后后肯定还要依赖它们，否则就运行不了。）</p>
<p>npm install 模块 –save-dev （开发时依赖，例如一些JS压缩工具，因为我们在发布后用不到它，而只是在我们开发才用到它。）</p>
<p>​	然后对应写入package.json。</p>
<p>使用npm install node_module –save 自动更新dependencies 字段值;<br>使用npm install node_module –save-dev 自动更新devDependencies 字段值;</p>
<p>​	此外，对于包的版本号说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">&quot;ejs&quot;: &quot;^2.3.4&quot;,</span><br><span class="line">&quot;express&quot;: &quot;~4.13.3&quot;,</span><br><span class="line">&quot;formidable&quot;: &quot;*1.0.17&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>^表示第一位版本号不变，后面两位取最新的<br>~表示前两位不变，最后一个取最新<br>*表示全部取最新</p>
<p>​	指定版本安装，直接去掉版本前面的符号，写成md5: “2.2.1”就下载2.2.1的版本。</p>
<pre><code> 此外，通常如果需要制定模块的版本安装，可以创建package-lock.json文件。
</code></pre>
<p><img src="/2020/05/10/blog51/image-20200510153939228.png" alt="image-20200510153939228"></p>
<p>​	</p>
<h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><p>安装淘宝镜像，会比国外npm官网下载包会快一些。</p>
<p><a href="http://www.npmjs.org/">http://www.npmjs.org</a> npm 包官网<br><a href="https://npm.taobao.org/">https://npm.taobao.org/</a> 淘宝npm 镜像官网<br>淘宝NPM 镜像是一个完整npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为10 分钟一次以保证尽量与官方服务同步。<br>我们可以使用我们定制的cnpm (gzip 压缩支持) 命令行工具代替默认的npm:</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>之后用cnpm代替npm</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>第三方模块</tag>
        <tag>package.json</tag>
        <tag>cnpm</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之Nodejs中的fs模块的使用,异步处理</title>
    <url>/2020/05/12/blog52/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得</p>
<p>内容：Nodejs中的fs模块的使用。</p>
<span id="more"></span>

<h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p>​	fs模块用于文件操作，是node内置的模块。</p>
<p>​	有大量的方法：（这些方法可以通过vscode中ctrl+鼠标点击打开源码，查看相关参数等）</p>
<p><img src="/2020/05/12/blog52/image-20200510161928651.png" alt="image-20200510161928651"></p>
<p>​	为了举例说明相关操作，我们创建一个文件夹，里面先使用npm init –yes强制生成一个package.json文件。然后创建入口文件app.js。</p>
<p><img src="/2020/05/12/blog52/image-20200510162258361.png" alt="image-20200510162258361"></p>
<p>​	首先，我们使用这个fs模块时，先导入<img src="/2020/05/12/blog52/image-20200510162537977.png" alt="image-20200510162537977"></p>
<ol>
<li><p>fs.stat  检测是文件还是目录</p>
<p>判断html是文件还是目录（先手动创建html文件夹）：</p>
<p><img src="/2020/05/12/blog52/image-20200510162708192.png" alt="image-20200510162708192"></p>
<p>结果（命令行输入node app.js）：</p>
<p><img src="/2020/05/12/blog52/image-20200510162727095.png" alt="image-20200510162727095"></p>
<p>当判断package.json是文件还是目录：</p>
<p><img src="/2020/05/12/blog52/image-20200510162848535.png" alt="image-20200510162848535"></p>
<p><img src="/2020/05/12/blog52/image-20200510162807784.png" alt="image-20200510162807784"></p>
</li>
<li><p>fs.mkdir 创建目录</p>
<p>通常用于如果判断一个目录是否存在，如果不存在则用这个方法创建目录。</p>
<p>例如用这个方法创建css目录：</p>
<p><img src="/2020/05/12/blog52/image-20200510163338487.png" alt="image-20200510163338487"></p>
<p>如果目录以存在则报错说已存在，不存在则创建。上面的mode参数和callback参数可以不写。</p>
</li>
<li><p>fs.writeFile 创建写入文件</p>
<p>例如我们可以在html文件夹里面创建index.html文件:</p>
<p><img src="/2020/05/12/blog52/image-20200510163728992.png" alt="image-20200510163728992"></p>
<p>结果（写入成功）：</p>
<p><img src="/2020/05/12/blog52/image-20200510163846590.png" alt="image-20200510163846590"></p>
<p>如果对同一个文件写入，则内容替换：</p>
<p><img src="/2020/05/12/blog52/image-20200510163945228.png" alt="image-20200510163945228"></p>
<p><img src="/2020/05/12/blog52/image-20200510163953989.png" alt="image-20200510163953989"></p>
</li>
<li><p>fs.appendFile 追加文件</p>
<p>在之前的文件基础上进行追加，如果之前文件不存在，则是创建。</p>
<p>例如在css文件夹里追加base.css，因为一开始不存在，则创建；之后继续再对这个文件追加其他信息，则在这个文件基础上，追加内容：</p>
<p><img src="/2020/05/12/blog52/image-20200510164212024.png" alt="image-20200510164212024"></p>
<p><img src="/2020/05/12/blog52/image-20200510164347535.png" alt="image-20200510164347535"></p>
</li>
<li><p>fs.readFile 读取文件</p>
<p>例如读取之前我们创建好的html下的index.html:</p>
<p><img src="/2020/05/12/blog52/image-20200510164609301.png" alt="image-20200510164609301"></p>
<p><img src="/2020/05/12/blog52/image-20200510164721861.png" alt="image-20200510164721861"></p>
<p>有16进制的buffer数据（原来的data）；</p>
<p>需要通过toString()方法把buffer转换成string类型。</p>
<p>如果路径写错了，会报错。</p>
</li>
<li><p>fs.readdir读取目录</p>
<p>例如可以读取当前目录下目录和文件。</p>
<p><img src="/2020/05/12/blog52/image-20200510164949174.png" alt="image-20200510164949174"></p>
<p><img src="/2020/05/12/blog52/image-20200510165014086.png" alt="image-20200510165014086"></p>
<p><img src="/2020/05/12/blog52/image-20200510165028700.png" alt="image-20200510165028700"></p>
</li>
<li><p>fs.rename 重命名 移动文件</p>
<p>有两个功能：功能:1、表示重命名 2、移动文件</p>
<p><img src="/2020/05/12/blog52/image-20200510165212013.png" alt="image-20200510165212013"></p>
<p>把aaa.css修改为index.css。</p>
<p><img src="/2020/05/12/blog52/image-20200510165406301.png" alt="image-20200510165406301"></p>
<p>把css下的aaa.css移动到html&#x2F;index.css下。</p>
</li>
<li><p>fs.rmdir 删除目录（remove）</p>
<p><img src="/2020/05/12/blog52/image-20200510165444859.png" alt="image-20200510165444859"></p>
<p>如果目录里面有文件，这样删除会报错。</p>
<p>所以需要把当前目录下的文件删除后，才能删除这个目录。</p>
</li>
<li><p>fs.unlink 删除文件</p>
<p>删除文件：</p>
<p><img src="/2020/05/12/blog52/image-20200510165507108.png" alt="image-20200510165507108"></p>
</li>
</ol>
<p>应用例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断服务器上面有没有upload目录。如果没有创建这个目录，如果有的话不做操作。   </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path=<span class="string">&#x27;./upload&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">stat</span>(path,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="comment">//执行创建目录</span></span><br><span class="line">        <span class="title function_">mkdir</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!data.<span class="title function_">isDirectory</span>())&#123;</span><br><span class="line">         <span class="comment">//首先删除文件，再去执行创建目录</span></span><br><span class="line">         fs.<span class="title function_">unlink</span>(path,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="title function_">mkdir</span>(path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请检测传入的数据是否正确&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建目录的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mkdir</span>(<span class="params">dir</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">mkdir</span>(dir,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：upload如果事先是一个文件时，需要先删除文件，再去执行创建目录。直接mkdir(path)在有同名文件的时候，不会执行。</p>
<p>这个例子也可以使用第三方包mkdirp，不仅能创建文件目录，还能创建层级目录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、https://www.npmjs.com/package/mkdirp</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、cnpm i mkdirp --save  /  npm i mkdirp --save </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、var mkdirp = require(&#x27;mkdirp&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、看文档使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mkdirp = <span class="built_in">require</span>(<span class="string">&#x27;mkdirp&#x27;</span>);</span><br><span class="line"><span class="comment">//单层级目录</span></span><br><span class="line"><span class="comment">// mkdirp(&#x27;./upload&#x27;, function (err) &#123;</span></span><br><span class="line"><span class="comment">//     if (err) &#123;</span></span><br><span class="line"><span class="comment">//         console.error(err);</span></span><br><span class="line"><span class="comment">//     &#125;    </span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//单层级目录</span></span><br><span class="line"><span class="comment">// mkdirp(&#x27;./uploadDir&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多层级目录</span></span><br><span class="line"><span class="title function_">mkdirp</span>(<span class="string">&#x27;./upload/aaa/xxxx&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>应用例子2：wwwroot文件夹下面有images css js 以及index.html , 找出 wwwroot目录下面的所有的目录，然后放在一个数组中</p>
<p><img src="/2020/05/12/blog52/image-20200511154027457.png" alt="image-20200511154027457"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误的写法  注意:fs里面的方法是异步</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    var path=&#x27;./wwwroot&#x27;;</span></span><br><span class="line"><span class="comment">    var dirArr=[];</span></span><br><span class="line"><span class="comment">    fs.readdir(path,(err,data)=&gt;&#123;</span></span><br><span class="line"><span class="comment">        if(err)&#123;</span></span><br><span class="line"><span class="comment">            console.log(err);</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;    </span></span><br><span class="line"><span class="comment">        for(var i=0;i&lt;data.length;i++)&#123;</span></span><br><span class="line"><span class="comment">            fs.stat(path+&#x27;/&#x27;+data[i],(error,stats)=&gt;&#123;</span></span><br><span class="line"><span class="comment">                if(stats.isDirectory())&#123;</span></span><br><span class="line"><span class="comment">                    dirArr.push(data[i]);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        console.log(dirArr);</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    console.log(dirArr);</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印出 3个3</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        for(var i=0;i&lt;3;i++)&#123;</span></span><br><span class="line"><span class="comment">            setTimeout(function()&#123;</span></span><br><span class="line"><span class="comment">                console.log(i);</span></span><br><span class="line"><span class="comment">            &#125;,100)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、改造for循环  递归实现      2、nodejs里面的新特性  async await</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path=<span class="string">&#x27;./wwwroot&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> dirArr=[];</span><br><span class="line">fs.<span class="title function_">readdir</span>(path,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    (<span class="keyword">function</span> <span class="title function_">getDir</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==data.<span class="property">length</span>)&#123; <span class="comment">//执行完成</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(dirArr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.<span class="title function_">stat</span>(path+<span class="string">&#x27;/&#x27;</span>+data[i],<span class="function">(<span class="params">error,stats</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(stats.<span class="title function_">isDirectory</span>())&#123;</span><br><span class="line">                dirArr.<span class="title function_">push</span>(data[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">getDir</span>(i+<span class="number">1</span>)<span class="comment">//自执行</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：错误写法中，由于fs是异步的，对于异步操作：</p>
<p>​	例如我们后面循环异步打印i，最后的输出结果是三个3，这是和JS事件循环机制有关。js事件处理器（DOM事件、timer、AJax）在（主）线程空闲时间不会优先运行处理，即先执行主线程的for循环的i赋值与迭代，当主线程结束后，才处理异步进程，导致最后运行这些异步事件的时候，输出的都是i最后的值。</p>
<p>​	因此，我们的使用fs模型的第一块代码，由于i最后为真实data的length，而data[length]里面是为空，导致最后输出的数组为空数组。</p>
<p>​	所以解决的方法有：</p>
<p>​	1、改造for循环，用递归实现（但是可读性比较差，通常用方法2）</p>
<p>​	写成匿名立即执行函数，相当于加一层闭包，i以函数参数形式传递给内层函数 。</p>
<p>​	2、nodejs里面的新特性（8.x之后）  async await</p>
<h4 id="nodejs里面的新特性（8-x之后）-async-await"><a href="#nodejs里面的新特性（8-x之后）-async-await" class="headerlink" title="nodejs里面的新特性（8.x之后）  async await"></a>nodejs里面的新特性（8.x之后）  async await</h4><p>​	首先，先介绍一下<strong>ES6的常用语法</strong>，主要有：</p>
<ol>
<li><p>let const (声明变量与常量)</p>
</li>
<li><p>箭头函数 （()&#x3D;&gt;{}，this指向上下文）</p>
</li>
<li><p>对象、属性的简写(属性名称与变量名一致时，</p>
<p><img src="/2020/05/12/blog52/image-20200513150812774.png" alt="image-20200513150812774"></p>
<p><img src="/2020/05/12/blog52/image-20200513151039781.png" alt="image-20200513151039781">）</p>
</li>
<li><p>模板字符串（<img src="/2020/05/12/blog52/image-20200513150700789.png" alt="image-20200513150700789">）</p>
</li>
<li><p>Promise。主要用来处理异步（涉及JS事件循环）</p>
<p>例子1：</p>
<p><img src="/2020/05/12/blog52/image-20200513151538108.png" alt="image-20200513151538108"></p>
<p><img src="/2020/05/12/blog52/image-20200513151548147.png" alt="image-20200513151548147"></p>
<p>会报错说，name没有定义，因为setTimeout是异步方法，在运行打印及执行getData的主进程中，setTimeout还没执行（在异步进程队列中），因而里面name是取不到的。</p>
<p>例子2：</p>
<p>之前ES5通常的解决上述问题的方法是设置回调函数。</p>
<p><img src="/2020/05/12/blog52/image-20200513151851571.png" alt="image-20200513151851571"></p>
<p><img src="/2020/05/12/blog52/image-20200513151900580.png" alt="image-20200513151900580"></p>
<p>打印函数是嵌套在setTimeout的外层，相当于提供了一个钩子，当setTimeout异步执行里面程序，1秒后，name赋值为张三，并且使用了callback，即正确打印了name。</p>
<p>例子3：</p>
<p>在ES6后，有了Promise的API，方便我们处理异步。</p>
<p>Promise来处理异步 resolve 成功的回调函数（与.then()配合）  reject失败的回调函数（与.catch()配合）</p>
<p>所以，上例子2可以改写为：</p>
<p><img src="/2020/05/12/blog52/image-20200513152817994.png" alt="image-20200513152817994"></p>
<p>结果也是一秒后打印：”张三“</p>
<h4 id="Async与Await和promise的使用"><a href="#Async与Await和promise的使用" class="headerlink" title="Async与Await和promise的使用"></a>Async与Await和promise的使用</h4><p>​	async 是“异步”的简写，而await 可以认为是async wait 的简写。所以应该很好理解async用于申明一个异步的function ，而await 用于等待一个异步方法执行完成。<br>简单理解：<br><strong>async 是让方法变成异步。</strong><br><strong>await 是等待异步方法执行完成。</strong></p>
<p>详细说明：<br>async 是让方法变成异步（用于声明），在终端里用node 执行这段代码，你会发现输出了Promise {‘您好nodejs’ }，这时候会发现它返回的是封装的Promise。</p>
<p><img src="/2020/05/12/blog52/image-20200513153441050.png" alt="image-20200513153441050"></p>
<p>如果我们直接向要’您好nodejs‘的字符串而不是promise，可以使用await获取数据。</p>
<p>await 在等待async 方法执行完毕，其实await 等待的只是一个表达式，这个表达式在官方文档里说的是Promise 对象，但是它也可以接受普通值。注意：await 必须在async 方法中才可以使用因为await 访问本身就会造成程序停止堵塞，所以必须在异步方法中才可以使用。</p>
<p>但下面的写法是错误的：</p>
<p><img src="/2020/05/12/blog52/image-20200513153829055.png" alt="image-20200513153829055"></p>
<p>所以应该写成：</p>
<p><img src="/2020/05/12/blog52/image-20200513154140330.png" alt="image-20200513154140330"></p>
<p>所以，通常使用async&#x2F;await来处理异步时，通常async 会将其后的函数（函数表达式或Lambda）的返回值封装成一个Promise 对象，而await 会等待这个Promise 完成，并将其resolve 的结果返回出来。</p>
<p><img src="/2020/05/12/blog52/image-20200513154919186.png" alt="image-20200513154919186"></p>
<p><strong>小结：async和await可以方便我们处理node里的异步：异步方法封装成promise，然后async声明，最后使用await调用结果。</strong></p>
<p>所以，之前的应用例子2：wwwroot文件夹下面有images css js 以及index.html , 找出 wwwroot目录下面的所有的目录，然后放在一个数组中。</p>
<p>【使用node的async和await来做：】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、定义一个isDir的方法判断一个资源到底是目录还是文件</span></span><br><span class="line"><span class="comment">//定义一个异步的方法，然后再外部通过await获取异步方法里面的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">isDir</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">      fs.<span class="title function_">stat</span>(path, <span class="function">(<span class="params">error, stats</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (error) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">              <span class="title function_">reject</span>(error)</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (stats.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取wwwroot里面的所有资源  循环遍历 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;<span class="comment">//不是 async function main()</span></span><br><span class="line">  <span class="keyword">var</span> path=<span class="string">&#x27;./wwwroot&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> dirArr=[];</span><br><span class="line">  fs.<span class="title function_">readdir</span>(path,<span class="keyword">async</span> (err,data)=&gt;&#123;  <span class="comment">//注意是包装await的外层方法用async声明，而不是main()</span></span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;    </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.<span class="property">length</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">await</span> <span class="title function_">isDir</span>(path+<span class="string">&#x27;/&#x27;</span>+data[i]))&#123;</span><br><span class="line">              dirArr.<span class="title function_">push</span>(data[i]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(dirArr);</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/2020/05/12/blog52/image-20200513160740951.png" alt="image-20200513160740951"></p>
<p>知识补充：【后续要理解async&#x2F;await与promise的区别与联系；执行顺序问题，阻塞问题】</p>
<h3 id="以流的方式读写文件"><a href="#以流的方式读写文件" class="headerlink" title="以流的方式读写文件"></a>以流的方式读写文件</h3><p>如果我们的文件比较大的时候，读取数据时，直接读取会存在问题，建议以流的形式读取。类似地，当要把一个大文件写入目录的时候，也以流的方法写入。</p>
<p>流的方式：就是一点一点（以一定量大小）操作 </p>
<ol start="10">
<li><p>fs.createReadStream 从文件流中读取数据</p>
<p><img src="/2020/05/12/blog52/image-20200513162652628.png" alt="image-20200513162652628"></p>
<p><img src="/2020/05/12/blog52/image-20200513162817519.png" alt="image-20200513162817519"></p>
<p>最后发现读取了6次。</p>
</li>
<li><p>fs.createWriteStream 写入文件</p>
<p><img src="/2020/05/12/blog52/image-20200513163106375.png" alt="image-20200513163106375"></p>
<p>注意：</p>
<p><img src="/2020/05/12/blog52/image-20200513163222764.png" alt="image-20200513163222764"></p>
<p>才能出发finish事件。</p>
</li>
<li><p>管道流</p>
<p>​	管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p>
<p><img src="/2020/05/12/blog52/image-20200513163509010.png" alt="image-20200513163509010"></p>
<p>如上面的图片所示，我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢的实现了<strong>大文件</strong>的复制过程。</p>
<p>​	以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。</p>
</li>
</ol>
<p><img src="/2020/05/12/blog52/image-20200513163623342.png" alt="image-20200513163623342"></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>fs模块</tag>
        <tag>管道流</tag>
        <tag>async</tag>
        <tag>await</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之利用HTTP模块 URl模块 PATH模块 FS模块创建一个WEB服务器</title>
    <url>/2020/05/14/blog53/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得</p>
<p>内容：Nodejs中的利用HTTP模块 URl模块 PATH模块 FS模块创建一个WEB服务器。</p>
<span id="more"></span>

<h3 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><p>​	Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。</p>
<p>​	目前最主流的三个Web服务器是Apache Nginx IIS。</p>
<h3 id="Nodejs创建一个WEB服务器"><a href="#Nodejs创建一个WEB服务器" class="headerlink" title="Nodejs创建一个WEB服务器"></a>Nodejs创建一个WEB服务器</h3><p>​	可以用nodejs提供一个WEB服务器。</p>
<p>​	最初，我们会放置静态文件到服务器，有图片，css，JS，HTML等。然后当客户端发送请求，服务器需要解析请求URL，找到正确的资源位置，然后以一定形式返回。</p>
<p><img src="/2020/05/14/blog53/image-20200514145758710.png" alt="image-20200514145758710"></p>
<p>​	例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fs模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//http://localhost:8001/news.html    /news.html</span></span><br><span class="line">	<span class="comment">//http://localhost:8001/index.html    /index.html</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//css/dmb.bottom.css</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pathname=req.<span class="property">url</span>;</span><br><span class="line">	<span class="keyword">if</span>(pathname==<span class="string">&#x27;/&#x27;</span>)&#123;<span class="comment">//为路径URL为空</span></span><br><span class="line">		pathname=<span class="string">&#x27;/index.html&#x27;</span>; <span class="comment">/*默认加载的首页*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;  <span class="comment">/*过滤请求favicon.ico图片文件*/</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(pathname);</span><br><span class="line">		<span class="comment">//文件操作获取 static下面的index.html</span></span><br><span class="line">		<span class="comment">//读取文件</span></span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;static/&#x27;</span>+pathname,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(err)&#123;  <span class="comment">/*没有这个文件*/</span></span><br><span class="line"></span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line"></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123; <span class="comment">/*返回这个文件*/</span></span><br><span class="line">				<span class="comment">//写入响应头</span></span><br><span class="line">				res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">				res.<span class="title function_">write</span>(data);</span><br><span class="line">				res.<span class="title function_">end</span>(); <span class="comment">/*结束响应*/</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8001</span>);<span class="comment">//设置监听端口号</span></span><br></pre></td></tr></table></figure>

<p>在VSCODE运行这段代码，然后打开浏览器，对应URL即可完成本地服务器对文件或网页的访问。</p>
<p><img src="/2020/05/14/blog53/image-20200514150441598.png" alt="image-20200514150441598"></p>
<p>但我们从F12浏览器控制台发现，我们请求这个index.html文件的时候，这个HTML加载请求了很多CSS文件和JS文件，但发现其并没有加载在页面上展示。</p>
<p><img src="/2020/05/14/blog53/image-20200514150913766.png" alt="image-20200514150913766"></p>
<p>原因在于：当我们CSS文件的响应头，发现其是content type是text&#x2F;html，内容解析为text&#x2F;html。所以我们应该在源代码上对不同的文件，修改对应不同的响应头。</p>
<p><img src="/2020/05/14/blog53/image-20200514150801400.png" alt="image-20200514150801400"></p>
<p>例子2：</p>
<p>如果页面404，可以转入到自定义显示404的404.html文件上。</p>
<p>根据不同后缀名，返回不同的content type的响应头。这里，除了可以使用原生JS，通常使用node内置的path模块。(例如后缀名就是path.extname(“XXX.CSS”))</p>
<p>我们可以先定义一个后缀名处理的模块。</p>
<p><img src="/2020/05/14/blog53/image-20200514152125341.png" alt="image-20200514152125341"></p>
<p>在代码引入之前后缀名处理模块，和修改相关代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fs模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//path模块</span></span><br><span class="line"><span class="keyword">var</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);  <span class="comment">/*nodejs自带的模块*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mimeModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/getmime.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(mime.getMime(&#x27;.css&#x27;));   //获取文件类型</span></span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//http://localhost:8001/news.html    /news.html</span></span><br><span class="line">	<span class="comment">//http://localhost:8001/index.html    /index.html</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//css/dmb.bottom.css</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pathname=req.<span class="property">url</span>;</span><br><span class="line">	<span class="keyword">if</span>(pathname==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">		pathname=<span class="string">&#x27;/index.html&#x27;</span>; <span class="comment">/*默认加载的首页*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取文件的后缀名</span></span><br><span class="line">	<span class="keyword">var</span> extname=path.<span class="title function_">extname</span>(pathname);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;  <span class="comment">/*过滤请求favicon.ico*/</span></span><br><span class="line">		<span class="comment">//console.log(pathname);</span></span><br><span class="line">		<span class="comment">//文件操作获取 static下面的index.html</span></span><br><span class="line"></span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;static/&#x27;</span>+pathname,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(err)&#123;  <span class="comment">/*么有这个文件*/</span></span><br><span class="line"></span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line"></span><br><span class="line">				fs.<span class="title function_">readFile</span>(<span class="string">&#x27;static/404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,data404</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(error)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">					&#125;</span><br><span class="line">					res.<span class="title function_">writeHead</span>(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">					res.<span class="title function_">write</span>(data404);</span><br><span class="line">					res.<span class="title function_">end</span>(); <span class="comment">/*结束响应*/</span></span><br><span class="line">				&#125;)</span><br><span class="line"></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123; <span class="comment">/*返回这个文件*/</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">var</span> mime=mimeModel.<span class="title function_">getMime</span>(extname);  <span class="comment">/*获取文件类型*/</span></span><br><span class="line">				res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;&quot;</span>+mime+<span class="string">&quot;;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">				res.<span class="title function_">write</span>(data);</span><br><span class="line">				res.<span class="title function_">end</span>(); <span class="comment">/*结束响应*/</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8001</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后运行。</p>
<p>此时，CSS，js文件都正确加载了：</p>
<p><img src="/2020/05/14/blog53/image-20200514152417602.png" alt="image-20200514152417602"></p>
<p>因为不同文件的响应头写正确了：</p>
<p><img src="/2020/05/14/blog53/image-20200514152601508.png" alt="image-20200514152601508"></p>
<p>但仍然存在一些问题：</p>
<p><img src="/2020/05/14/blog53/image-20200514152943500.png" alt="image-20200514152943500"></p>
<p>我们之前使用的是<code>var pathname=req.url;</code>。</p>
<p><img src="/2020/05/14/blog53/image-20200514153403106.png" alt="image-20200514153403106"></p>
<p><img src="/2020/05/14/blog53/image-20200514153519946.png" alt="image-20200514153519946"></p>
<p>所以，一些JSON的get传值没有找到，这个时候需要使用URL模块及其相关方法，正确找到pathname。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fs模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//path模块</span></span><br><span class="line"><span class="keyword">var</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);  <span class="comment">/*nodejs自带的模块*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//url模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mimeModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/getmime.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(mime.getMime(&#x27;.css&#x27;));   //获取文件类型</span></span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//http://localhost:8001/news.html    /news.html</span></span><br><span class="line">	<span class="comment">//http://localhost:8001/index.html    /index.html</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//css/dmb.bottom.css</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;<span class="comment">//这样就会把url转成一个对象，然后取pathname属性</span></span><br><span class="line"></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(pathname);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">		pathname=<span class="string">&#x27;/index.html&#x27;</span>; <span class="comment">/*默认加载的首页*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取文件的后缀名</span></span><br><span class="line">	<span class="keyword">var</span> extname=path.<span class="title function_">extname</span>(pathname);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;  <span class="comment">/*过滤请求favicon.ico*/</span></span><br><span class="line">		<span class="comment">//console.log(pathname);</span></span><br><span class="line">		<span class="comment">//文件操作获取 static下面的index.html</span></span><br><span class="line"></span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;static/&#x27;</span>+pathname,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(err)&#123;  <span class="comment">/*么有这个文件*/</span></span><br><span class="line"></span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line"></span><br><span class="line">				fs.<span class="title function_">readFile</span>(<span class="string">&#x27;static/404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,data404</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(error)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">					&#125;</span><br><span class="line">					res.<span class="title function_">writeHead</span>(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">					res.<span class="title function_">write</span>(data404);</span><br><span class="line">					res.<span class="title function_">end</span>(); <span class="comment">/*结束响应*/</span></span><br><span class="line">				&#125;)</span><br><span class="line"></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123; <span class="comment">/*返回这个文件*/</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">var</span> mime=mimeModel.<span class="title function_">getMime</span>(extname);  <span class="comment">/*获取文件类型*/</span></span><br><span class="line">				res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;&quot;</span>+mime+<span class="string">&quot;;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">				res.<span class="title function_">write</span>(data);</span><br><span class="line">				res.<span class="title function_">end</span>(); <span class="comment">/*结束响应*/</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8001</span>);</span><br></pre></td></tr></table></figure>

<p>此时，一些JSON数据也正确加载往网页了：</p>
<p><img src="/2020/05/14/blog53/image-20200514153656501.png" alt="image-20200514153656501"></p>
<p>JSON文件也响应成功：</p>
<p><img src="/2020/05/14/blog53/image-20200514153723185.png" alt="image-20200514153723185"></p>
<p><strong>小结：这样就完成了一个最基本的静态服务器功能。</strong></p>
<p>但是，仍然存在一些问题：</p>
<p>例如图片文件，响应头返回text&#x2F;html:</p>
<p><img src="/2020/05/14/blog53/image-20200514154003864.png" alt="image-20200514154003864"></p>
<p>实际上，我们会写一个<img src="/2020/05/14/blog53/image-20200514154033576.png" alt="image-20200514154033576"></p>
<p>控制所有文件格式对应的content type:</p>
<p><img src="/2020/05/14/blog53/image-20200514154104977.png" alt="image-20200514154104977"></p>
<p>类似地，重新写一个读取后缀名的方法模块：</p>
<p>注意如果使用fs.readFile是一个异步读取文件的方式，可能导致请求时读取不到数据，显示undefined。</p>
<p>所以应该使用同步的方法fs.readFileSync：</p>
<p><img src="/2020/05/14/blog53/image-20200514155222272.png" alt="image-20200514155222272"></p>
<p>然后在使用的地方引入使用：</p>
<p><img src="/2020/05/14/blog53/image-20200514155318278.png" alt="image-20200514155318278"></p>
<p>最后就可以得到CSS（任意文件）对应的content type(text&#x2F;css)。</p>
<p>因此，最后只需在源代码基础上修改获取扩展名方法的模块及对应方法：</p>
<p><img src="/2020/05/14/blog53/image-20200514160106605.png" alt="image-20200514160106605"></p>
<p>运行</p>
<p><img src="/2020/05/14/blog53/image-20200514160217950.png" alt="image-20200514160217950"></p>
<p>此时，对应文件的content type正确按照我们JSON文件对应上了。</p>
<p><strong>小结：这样就使用nodejs创建了一个类似Apache Nginx IIS的WEB服务器。</strong></p>
<p>最后的完整代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fs模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//path模块</span></span><br><span class="line"><span class="keyword">var</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);  <span class="comment">/*nodejs自带的模块*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//url模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入扩展名的方法是在文件里面获取到的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mimeModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/getmimefromfile.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(mimeModel.getMime(&#x27;.css&#x27;));   //获取文件类型</span></span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//http://localhost:8001/news.html    /news.html</span></span><br><span class="line">	<span class="comment">//http://localhost:8001/index.html    /index.html</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//css/dmb.bottom.css</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//xxx.json?214214124</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(pathname);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">		pathname=<span class="string">&#x27;/index.html&#x27;</span>; <span class="comment">/*默认加载的首页*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取文件的后缀名</span></span><br><span class="line">	<span class="keyword">var</span> extname=path.<span class="title function_">extname</span>(pathname);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;  <span class="comment">/*过滤请求favicon.ico*/</span></span><br><span class="line">		<span class="comment">//console.log(pathname);</span></span><br><span class="line">		<span class="comment">//文件操作获取 static下面的index.html</span></span><br><span class="line"></span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;static/&#x27;</span>+pathname,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(err)&#123;  <span class="comment">/*么有这个文件*/</span></span><br><span class="line"></span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line"></span><br><span class="line">				fs.<span class="title function_">readFile</span>(<span class="string">&#x27;static/404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,data404</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(error)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">					&#125;</span><br><span class="line">					res.<span class="title function_">writeHead</span>(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">					res.<span class="title function_">write</span>(data404);</span><br><span class="line">					res.<span class="title function_">end</span>(); <span class="comment">/*结束响应*/</span></span><br><span class="line">				&#125;)</span><br><span class="line"></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123; <span class="comment">/*返回这个文件*/</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">var</span> mime=mimeModel.<span class="title function_">getMime</span>(fs,extname);  <span class="comment">/*获取文件类型*/</span></span><br><span class="line">				res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;&quot;</span>+mime+<span class="string">&quot;;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">				res.<span class="title function_">write</span>(data);</span><br><span class="line">				res.<span class="title function_">end</span>(); <span class="comment">/*结束响应*/</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8002</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>HTTP模块</tag>
        <tag>URl模块</tag>
        <tag>PATH模块</tag>
        <tag>FS模块</tag>
        <tag>WEB服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之Nodejs的非阻塞I/O、异步、事件驱动</title>
    <url>/2020/05/14/blog54/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得</p>
<p>内容：Nodejs中的Nodejs的非阻塞I&#x2F;O、异步、事件驱动。</p>
<span id="more"></span>

<h3 id="Nodejs的单线程、非阻塞I-O、事件驱动"><a href="#Nodejs的单线程、非阻塞I-O、事件驱动" class="headerlink" title="Nodejs的单线程、非阻塞I&#x2F;O、事件驱动"></a>Nodejs的单线程、非阻塞I&#x2F;O、事件驱动</h3><p>​	在Java、PHP或者.net等服务器端语言中，会为每一个客户端连接创建一个新的线程。而每个线程需要耗费大约2MB内存。也就是说，理论上，一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。要让Web应用程序支持更多的用户，就需要增加服务器的数量，而Web应用程序的硬件成本当然就上升了。 (高并发场景)</p>
<p>​	Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发一个内部事件，通过非阻塞I&#x2F;O、事件驱动机制，让Node.js程序宏观上也是并行的。使用Node.js，一个8GB内存的服务器，可以同时处理超过4万用户的连接。</p>
<p>​	之前，我们使用fs模块的readFile方法是一个异步方法，或者说是非阻塞式IO。</p>
<p>​	所以代码：</p>
<p>​	<img src="/2020/05/14/blog54/image-20200514162310289.png" alt="image-20200514162310289"></p>
<p>​	结果：</p>
<p><img src="/2020/05/14/blog54/image-20200514162319039.png" alt="image-20200514162319039"></p>
<p>但是，当我们在外部使用这个异步方法的时候，会出undefined</p>
<p><img src="/2020/05/14/blog54/image-20200514162610600.png" alt="image-20200514162610600"></p>
<p>因为，这个方法是异步的，最后才会返回第3步，data没有在getMime方法结束前返回。</p>
<p>所以，通常的方法是回调函数的方法解决这种异步问题。</p>
<h3 id="Nodejs回调处理异步"><a href="#Nodejs回调处理异步" class="headerlink" title="Nodejs回调处理异步"></a>Nodejs回调处理异步</h3><p><img src="/2020/05/14/blog54/image-20200514162911561.png" alt="image-20200514162911561"></p>
<p>相当于callback在异步方法中留了一个钩子，等待异步处理完成，传入data给callback，自然也获取了到这个data。</p>
<p>此外，我们可以使用events模块。</p>
<h3 id="Nodejs-events模块处理异步"><a href="#Nodejs-events模块处理异步" class="headerlink" title="Nodejs events模块处理异步"></a>Nodejs events模块处理异步</h3><p>​	Node.js 事件循环:  Node.js 是单进程单线程应用程序，但是通过<strong>事件和回调</strong>支持<strong>并发</strong>，所以性能非常高。</p>
<p>​	 <strong>Node.js</strong> 的<strong>每一个 API 都是异步</strong>的，并作为<strong>一个独立线程</strong>运行，使用<strong>异步函数调用</strong>，并处理并发。</p>
<p>​	Node.js 有多个内置的事件，我们可以通过引入 <strong>events 模块</strong>，并通过<strong>实例化 EventEmitter</strong> 类来<strong>绑定和监听事件</strong>（广播与接收广播，即事件驱动）。</p>
<p>​	首先，查看一下events模块</p>
<p><img src="/2020/05/14/blog54/image-20200514163306943.png" alt="image-20200514163306943"></p>
<p><img src="/2020/05/14/blog54/image-20200514163315029.png" alt="image-20200514163315029"></p>
<p>​	有很多属性。</p>
<p>​		通常，我们通过<strong>实例化 EventEmitter</strong> 类来<strong>绑定和监听事件</strong>，即广播事件，接收广播，出发事件的相关操作方法。</p>
<p>​	例如：</p>
<p><img src="/2020/05/14/blog54/image-20200514164135200.png" alt="image-20200514164135200"></p>
<p><img src="/2020/05/14/blog54/image-20200514164145399.png" alt="image-20200514164145399"></p>
<p>注意的是，<code>EventEmitter.emit(&#39;to_parent&#39;,&#39;发送的数据&#39;)</code>中发射to_parent事件并且是把  发送的数据 作为数据传送出去的，这是可以被监听到的。（这类似于vue中的子组件与父组件通信(子传父的情况)。）</p>
<p>类似地，事件的广播和监听可以循环嵌套（事件驱动）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> events=<span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(events);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">EventEmitter</span>=<span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>();<span class="comment">//实例化ventEmitter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//广播 和接收广播（事件驱动）</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="title function_">on</span>(<span class="string">&#x27;to_mime&#x27;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听to_parent的广播</span></span><br><span class="line"><span class="title class_">EventEmitter</span>.<span class="title function_">on</span>(<span class="string">&#x27;to_parent&#x27;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;接收到了这个广播事件&#x27;);</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">EventEmitter</span>.<span class="title function_">emit</span>(<span class="string">&#x27;to_mime&#x27;</span>,<span class="string">&#x27;给mime发送的数据&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始广播...&#x27;</span>);</span><br><span class="line">    <span class="comment">//广播to_parent事件</span></span><br><span class="line">    <span class="title class_">EventEmitter</span>.<span class="title function_">emit</span>(<span class="string">&#x27;to_parent&#x27;</span>,<span class="string">&#x27;发送的数据&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/14/blog54/image-20200514164718390.png" alt="image-20200514164718390"></p>
<h4 id="nodejs事件驱动获取数据"><a href="#nodejs事件驱动获取数据" class="headerlink" title="nodejs事件驱动获取数据"></a>nodejs事件驱动获取数据</h4><p>所以我们用事件驱动的方法，接收fs异步处理的数据。</p>
<p><img src="/2020/05/14/blog54/image-20200514165159839.png" alt="image-20200514165159839"></p>
<p>拿到了对应的数据</p>
<p><img src="/2020/05/14/blog54/image-20200514165217037.png" alt="image-20200514165217037"></p>
<h4 id="处理fs异步读取的问题"><a href="#处理fs异步读取的问题" class="headerlink" title="处理fs异步读取的问题"></a>处理fs异步读取的问题</h4><p>在上一个blog中，fs的readFile是一个异步读取的方法，我们不能正确读取文件，所以采用了fs.readFileSync同步读取。</p>
<p>这里，我们可以使用刚刚讲的两种处理异步的方式解决这个问题。</p>
<p>1、使用回调函数的方式</p>
<p><img src="/2020/05/14/blog54/image-20200514165629455.png" alt="image-20200514165629455"></p>
<p>2、使用event模块的发射事件与监听事件</p>
<p><img src="/2020/05/14/blog54/image-20200514165656301.png" alt="image-20200514165656301"></p>
<p>注意：对应调用的格式和参数要相应修改。</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>非阻塞I/O</tag>
        <tag>异步</tag>
        <tag>事件驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之NodeJs WEB服务器、静态文件托管、 路由、EJS模板引擎、GET、POST</title>
    <url>/2020/05/15/blog55/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得</p>
<p>内容：Nodejs中的NodeJs WEB服务器、静态文件托管、 路由、EJS模板引擎、GET、POST。</p>
<span id="more"></span>

<h3 id="Nodejs-静态文件托管"><a href="#Nodejs-静态文件托管" class="headerlink" title="Nodejs 静态文件托管"></a>Nodejs 静态文件托管</h3><p>​	上一个blog介绍了如何使用nodejs创建一个WEB服务器，用于静态文件托管。</p>
<p>​	但我们会发现，大量的代码写在一块，比较混乱。其实我们可以把一些代码封装为一个模块（router.js），然后使得服务器代码简化：</p>
<p><img src="/2020/05/15/blog55/image-20200515154119924.png" alt="image-20200515154119924"></p>
<p>​	即大量的读取文件等操作（路由操作），封装为一个router.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMime</span>(<span class="params">extname,callback</span>)&#123;  </span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./mime.json&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//console.log(data.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Mimes</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result= <span class="title class_">Mimes</span>[extname] || <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">callback</span>(result)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">statics</span>=<span class="keyword">function</span>(<span class="params">req,res,staticpath</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pathname==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">        pathname=<span class="string">&#x27;/index.html&#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> extname=path.<span class="title function_">extname</span>(pathname);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pathname!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        fs.<span class="title function_">readFile</span>(staticpath+<span class="string">&#x27;/&#x27;</span>+pathname,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(err)&#123;  </span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                fs.<span class="title function_">readFile</span>(staticpath+<span class="string">&#x27;/404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,data404</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.<span class="title function_">writeHead</span>(<span class="number">404</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">                    res.<span class="title function_">write</span>(data404);</span><br><span class="line">                    res.<span class="title function_">end</span>(); </span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"></span><br><span class="line">               <span class="title function_">getMime</span>(extname,<span class="keyword">function</span>(<span class="params">mime</span>)&#123;</span><br><span class="line">                    res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;&quot;</span>+mime+<span class="string">&quot;;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line">                    res.<span class="title function_">write</span>(data);</span><br><span class="line">                    res.<span class="title function_">end</span>(); </span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	这样同样能够实现之前写的静态服务器的功能。</p>
<p>​	</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>​	路由（Routing）是由一个 URI（或者叫路径）和一个特定的 HTTP 方法（GET、POST 等）组成的，涉及到应用如何响应客户端对某个网站节点的访问。</p>
<p>​	即路由指的就是针对不同请求的URL，处理不同的业务逻辑。</p>
<p><img src="/2020/05/15/blog55/image-20200515153020139.png" alt="image-20200515153020139"></p>
<p>​	通常我们要获取URL，从而执行不同的操作，这就是nodejs的路由。</p>
<p>​	例如url的pathname存在login或register，要进行一些操作时：</p>
<p><img src="/2020/05/15/blog55/image-20200515155114068.png" alt="image-20200515155114068"></p>
<p>当<img src="/2020/05/15/blog55/image-20200515155148412.png" alt="image-20200515155148412"></p>
<p>当<img src="/2020/05/15/blog55/image-20200515155215506.png" alt="image-20200515155215506"></p>
<p>类似地，可以通过根据URL，来自定义自己想要的操作。	</p>
<p>​	但是，我们发现这样的写法，还是有点混乱。这时候我们可以使用模板引擎。</p>
<h3 id="EJS模块引擎（属于后台渲染）"><a href="#EJS模块引擎（属于后台渲染）" class="headerlink" title="EJS模块引擎（属于后台渲染）"></a>EJS模块引擎（属于后台渲染）</h3><p>​	我们学的EJS是后台模板，可以把我们数据库和文件读取的数据显示到Html页面上面。</p>
<p>它是一个第三方模块，需要通过npm安装<br><a href="https://www.npmjs.com/package/ejs">https://www.npmjs.com/package/ejs</a></p>
<p><code>npm install ejs -–save</code></p>
<p>（CMD当前目录，安装。会自动在项目中生成package.json。但通常还是在写项目初期，使用npm init来生成）</p>
<p>​	现在，我们还是想服务器能够根据不同的URL，执行一些不同的操作。例如，我们输入login的URL时，要加载login的页面，但是按照之前的方法，只能加载之前写好在静态文件夹中的静态文件，我们希望的是能够把（后台）数据库的数据渲染到模板上。</p>
<p>​	这时可以使用EJS模块引擎。EJS提供了renderFile方法，用于渲染模板。</p>
<p>​	还有一些常用标签：</p>
<p>​	&lt;% %&gt;流程控制标签 </p>
<p>​	 &lt;%&#x3D; %&gt;输出标签（原文输出HTML标签） </p>
<p>​	 &lt;%- %&gt;输出标签（HTML会被浏览器解析）</p>
<p>​	因此，首先，通常我们会在项目中，创建视图文件夹（放置模板）views，然后在里面创建.ejs为后缀名的模板。（.ejs是为了能够使用ejs的语法）</p>
<p><img src="/2020/05/15/blog55/image-20200515161252637.png" alt="image-20200515161252637"></p>
<p>​	<img src="/2020/05/15/blog55/image-20200515162226112.png" alt="image-20200515162226112"></p>
<p>​	现在就是想输入带login的URL就转入到这个login.ejs页面，并且传入一些数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ejs=<span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由:指的就是针对不同请求的 URL，处理不同的业务逻辑。</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">	res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname==<span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> data=<span class="string">&#x27;i am backend data &#x27;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> list=[</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="string">&#x27;1111&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;2222&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;3333&#x27;</span>,</span><br><span class="line">		];</span><br><span class="line"></span><br><span class="line">		<span class="comment">//把数据库的数据渲染到模板上面</span></span><br><span class="line">		ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;views/login.ejs&#x27;</span>,&#123;</span><br><span class="line">			<span class="attr">msg</span>:data,</span><br><span class="line">			<span class="attr">list</span>:list</span><br><span class="line">		&#125;,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">			res.<span class="title function_">end</span>(data);</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8001</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>页面结果：</p>
<p><img src="/2020/05/15/blog55/image-20200515162716412.png" alt="image-20200515162716412"></p>
<p>​	类似地，我们还可以定义很多views，例如register等。</p>
<p>​	这样就实现了后台渲染。（之前vue学习的单页应用是前端渲染）</p>
<p>​	</p>
<h3 id="Get、Post"><a href="#Get、Post" class="headerlink" title="Get、Post"></a>Get、Post</h3><p>​	超文本传输协议（HTTP）的设计目的是保证客户端机器与服务器之间的通信。 在客户端和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。 </p>
<p>GET - 从指定的资源请求数据。（一般用于获取数据）</p>
<p>POST - 向指定的资源提交要被处理的数据。（一般用于提交数据）</p>
<p>​	</p>
<p>​	现在，我们有个需求，当打开&#x2F;login的url时，显示登录页面，例如一个登录的表单（通常表单的提交信息是通过post，提交给服务器）：</p>
<p><img src="/2020/05/15/blog55/image-20200515193645489.png" alt="image-20200515193645489"></p>
<p>当url带login时，渲染到form.ejs页面</p>
<p><img src="/2020/05/15/blog55/image-20200515193708858.png" alt="image-20200515193708858"></p>
<p><img src="/2020/05/15/blog55/image-20200515193855994.png" alt="image-20200515193855994"></p>
<p>​	所以，通常我们是在打开登录页面，输入用户名和密码，然后提交。</p>
<p>​	首先，我们要判断客户端请求的方法是get还是post。（通过req对象method属性）</p>
<p>​	获取请求的方法，判断是post还是get：</p>
<p><img src="/2020/05/15/blog55/image-20200515194203770.png" alt="image-20200515194203770"></p>
<p>​	如果客户端请求方法是get，则这个信息会query字段拼接在URL后面。服务器要获取这个信息，需要对这个URL进行解析。</p>
<p>​	如果表单为get方法：</p>
<p>​	<img src="/2020/05/15/blog55/image-20200515195020064.png" alt="image-20200515195020064"></p>
<p>​	例如输入wu12和123，然后点击登录：</p>
<p>​	<img src="/2020/05/15/blog55/image-20200515194935674.png" alt="image-20200515194935674"></p>
<p>注意：当提交表单时，我们修改了路径：</p>
<p><img src="/2020/05/15/blog55/image-20200515195721831.png" alt="image-20200515195721831"></p>
<p>所以是在这个路径下拼接了query信息。</p>
<p><img src="/2020/05/15/blog55/image-20200515194947895.png" alt="image-20200515194947895"></p>
<p>打开控制台，的确是以get方法，请求数据，query的参数也正确：</p>
<p><img src="/2020/05/15/blog55/image-20200515200449838.png" alt="image-20200515200449838"></p>
<p>​		服务器可直接解析这个url：</p>
<p><img src="/2020/05/15/blog55/image-20200515195312424.png" alt="image-20200515195312424"></p>
<p><img src="/2020/05/15/blog55/image-20200515195321959.png" alt="image-20200515195321959"></p>
<p>​	可以获取客户端提交的信息。</p>
<p>​	如果表单以post方法：</p>
<p>​	<img src="/2020/05/15/blog55/image-20200515195113481.png" alt="image-20200515195113481"></p>
<p>​	例如分别输入wu123和123，然后点击登录：</p>
<p><img src="/2020/05/15/blog55/image-20200515194352025.png" alt="image-20200515194352025"></p>
<p>我们可以设置一个弹窗alert，说明登录成功：</p>
<p><img src="/2020/05/15/blog55/image-20200515201333965.png" alt="image-20200515201333965"></p>
<p><img src="/2020/05/15/blog55/image-20200515194433532.png" alt="image-20200515194433532"></p>
<p>注意：此时，post方式不会把数据像get方式哪样拼接在url后面，而是放在请求头里。</p>
<p>打开浏览器控制台，的确是post方式，参数也正确：</p>
<p><img src="/2020/05/15/blog55/image-20200515200658929.png" alt="image-20200515200658929"></p>
<p><img src="/2020/05/15/blog55/image-20200515200725397.png" alt="image-20200515200725397"></p>
<p>服务器也正确获取数据：</p>
<p><img src="/2020/05/15/blog55/image-20200515194521441.png" alt="image-20200515194521441"></p>
<p>同时，我们还可以设置服务器获取传值，然后写入login.txt保存数据（后面学习数据库还会使用数据库，继续加深理解）：</p>
<p><img src="/2020/05/15/blog55/image-20200515195954343.png" alt="image-20200515195954343"></p>
<p><img src="/2020/05/15/blog55/image-20200515200008095.png" alt="image-20200515200008095"></p>
<p>再之后，通常如果认证成功，则会让客户端进行页面跳转。</p>
<p><strong>小结：这样就可以用nodejs实现后端路由，即根据不同URL和请求方法，执行不同操作，例如网页跳转，数据展示，数据获取等。</strong></p>
<p>但是，我们把get和post操作都写到了服务器代码中，显得很大很臃肿，后续应该进行封装（封装仿照express框架的路由）。</p>
<p>完整代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ejs=<span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由:指的就是针对不同请求的 URL，处理不同的业务逻辑。</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">	res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取get 还是post请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> method=req.<span class="property">method</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">	<span class="comment">//console.log(method);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>).<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pathname==<span class="string">&#x27;/login&#x27;</span>)&#123;  <span class="comment">/*显示登录页面*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;views/form.ejs&#x27;</span>,&#123;</span><br><span class="line"></span><br><span class="line">		&#125;,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			res.<span class="title function_">end</span>(data);</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pathname==<span class="string">&#x27;/dologin&#x27;</span> &amp;&amp;method==<span class="string">&#x27;get&#x27;</span>)&#123;  <span class="comment">/*执行登录的操作*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//get获取数据</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>).<span class="property">query</span>);</span><br><span class="line"></span><br><span class="line">		res.<span class="title function_">end</span>(<span class="string">&#x27;dologin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pathname==<span class="string">&#x27;/dologin&#x27;</span> &amp;&amp;method==<span class="string">&#x27;post&#x27;</span>)&#123;  <span class="comment">/*执行登录的操作*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> postStr=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="keyword">function</span>(<span class="params">chunk</span>)&#123;</span><br><span class="line"></span><br><span class="line">			postStr+=chunk;</span><br><span class="line">		&#125;)</span><br><span class="line">		req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,chunk</span>)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//res.end(postStr);</span></span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(postStr);</span><br><span class="line"></span><br><span class="line">			fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;login.txt&#x27;</span>,postStr+<span class="string">&#x27;\n&#x27;</span>,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span>(err)&#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入数据成功&#x27;</span>);</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">			res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功&#x27;);history.back();&lt;/script&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">		ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;views/index.ejs&#x27;</span>,&#123;</span><br><span class="line"></span><br><span class="line">		&#125;,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">			res.<span class="title function_">end</span>(data);</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8001</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>路由</tag>
        <tag>node</tag>
        <tag>WEB服务器</tag>
        <tag>静态文件托管</tag>
        <tag>EJS模板引擎</tag>
        <tag>GET</tag>
        <tag>POST</tag>
      </tags>
  </entry>
  <entry>
    <title>node自学之Nodejs 路由模块封装、封装仿照express的路由</title>
    <url>/2020/05/16/blog56/</url>
    <content><![CDATA[<p>终极目标：掌握和使用node</p>
<p>本博客目的：记录node学习的进度和心得</p>
<p>内容：Nodejs中的路由模块封装、封装仿照express的路由。</p>
<span id="more"></span>

<h3 id="路由模块封装（模块化的方式封装）"><a href="#路由模块封装（模块化的方式封装）" class="headerlink" title="路由模块封装（模块化的方式封装）"></a>路由模块封装（模块化的方式封装）</h3><p>​	上一个blog，我们把get和post操作都写到了服务器代码中，显得很大很臃肿，应该进行封装。</p>
<p>​	所以我们创建模块，把所有的路由操作封装在这个文件里面：</p>
<p><img src="/2020/05/16/blog56/image-20200516152430741.png" alt="image-20200516152430741"></p>
<p>model.js，即把路由以属性的方式封装到app对象，最后导出这个app对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ejs=<span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=&#123;</span><br><span class="line">    <span class="comment">//login 路由</span></span><br><span class="line">    <span class="attr">login</span>:<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">        <span class="comment">//res.end(&#x27;login&#x27;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//渲染到views/form.ejs</span></span><br><span class="line">        ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;views/form.ejs&#x27;</span>,&#123;&#125;,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">            res.<span class="title function_">end</span>(data);</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dologin</span>:<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> postStr=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="keyword">function</span>(<span class="params">chunk</span>)&#123;</span><br><span class="line"></span><br><span class="line">            postStr+=chunk;</span><br><span class="line">        &#125;)</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,chunk</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//res.end(postStr);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(postStr);</span><br><span class="line"></span><br><span class="line">            fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;login.txt&#x27;</span>, postStr + <span class="string">&#x27;\n&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入数据成功&#x27;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功&#x27;);history.back();&lt;/script&gt;&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;,</span><br><span class="line">    <span class="attr">register</span>:<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">home</span>:<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.login(&#x27;req&#x27;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//app[&#x27;login&#x27;](&#x27;req&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=app;</span><br></pre></td></tr></table></figure>

<p>服务器代码就使用这个路由文件model.js，根据获取的URL的pathname确定使用那个路由，从而执行特点的方法。</p>
<p>这样代码大大简化了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> model=<span class="built_in">require</span>(<span class="string">&#x27;./model/model.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//model[&#x27;login&#x27;](&#x27;111&#x27;,&#x27;22&#x27;);//调用model中的路由，根据名称执行不同操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">//因为url.parse(req.url).pathname是带/的，我们需要和model无斜杠的使用匹配起来</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pathname!=<span class="string">&#x27;favicon.ico&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//如果跳转到别的没定义的页面，则让它回到home页面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            model[pathname](req, res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            model[<span class="string">&#x27;home&#x27;</span>](req, res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8001</span>);</span><br></pre></td></tr></table></figure>



<p>​	这样我们实现了路由模块的封装，如果在model.js一些路由的方法比较复杂，其实还能进一步封装。此外，我们还能以别的方式进行封装。</p>
<h3 id="封装仿照express框架封装的路由"><a href="#封装仿照express框架封装的路由" class="headerlink" title="封装仿照express框架封装的路由"></a>封装仿照express框架封装的路由</h3><p>​	Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。 </p>
<p> 使用 Express 可以快速地搭建一个完整功能的网站。  </p>
<p>​	Express 框架核心特性：  </p>
<p>​	可以设置中间件来响应 HTTP 请求。  </p>
<p>​	定义了路由表用于执行不同的 HTTP 请求动作。  </p>
<p>​	可以通过向模板传递参数来动态渲染 HTML 页面。</p>
<p>​	（后续我们会接着学）</p>
<p>​	现在，我们想封装一个这样的路由：直接能够暴露一个接口，然后能够面向这个接口，根据请求方法进行路由匹配及相关处理：</p>
<p>​	<img src="/2020/05/16/blog56/image-20200516153741691.png" alt="image-20200516153741691"></p>
<p>​	（这样封装使用的形式更简洁）</p>
<p>测试结果：</p>
<p><img src="/2020/05/16/blog56/image-20200516153430322.png" alt="image-20200516153430322"></p>
<p><img src="/2020/05/16/blog56/image-20200516153458249.png" alt="image-20200516153458249"></p>
<p>​	现在，我们先介绍一下一些基本JS知识：</p>
<p>​	知识1：对象属性和方法的定义：</p>
<p>​	<img src="/2020/05/16/blog56/image-20200516153942692.png" alt="image-20200516153942692"></p>
<p>​	知识2：注册方法与使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> G=&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;app&#x27;+req);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(G[<span class="string">&#x27;login&#x27;</span>])&#123;</span><br><span class="line">        G[<span class="string">&#x27;login&#x27;</span>](req,res);  <span class="comment">/*执行注册的方法*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个get方法</span></span><br><span class="line">app.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params">string,callback</span>)&#123;</span><br><span class="line">    G[string]=callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line">    <span class="comment">//G[&#x27;login&#x27;]=function(req,res)&#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行get方法</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;login&#x27;</span>+req);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">app</span>(<span class="string">&#x27;req&#x27;</span>,<span class="string">&#x27;res&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>​	运行结果：<img src="/2020/05/16/blog56/image-20200516155303439.png" alt="image-20200516155303439"></p>
<p>​	流程理解：首先，定义了一个G对象和带两个参数的app方法；之后定义了一个app的get方法（也是带两个参数）。当执行app.get时，相当于传入了两个参数（‘login’和具体的callback），此时相当于注册了G[login]的一个方法（为具体的callback）。当最后定时1s异步执行app方法时，传参（’req’,’res’），进入app代码，判断是否存在G[‘login’]，如果存在则执行注册的方法 G[‘login’] (req,res)，最后输出结果。</p>
<p>​	现在，我们回归到http服务器中。</p>
<p>​	最早，我们创建一个http服务器时：</p>
<p><img src="/2020/05/16/blog56/image-20200516155621961.png" alt="image-20200516155621961"></p>
<p>里面的方法定义，其实就是可以看做之前我们定义的app，所以又可以写成：</p>
<p>​	<img src="/2020/05/16/blog56/image-20200516155702845.png" alt="image-20200516155702845"></p>
<p>​	相当于，一直监听这个app，只有有请求就会出发app这个方法。</p>
<p>完整代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> G=&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方法开始结束</span></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;app&#x27;+req);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!pathname.<span class="title function_">endsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line"></span><br><span class="line">        pathname=pathname+<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(G[pathname])&#123;</span><br><span class="line">        G[pathname](req,res);  <span class="comment">/*执行注册的方法*/</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;no router&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个get方法</span></span><br><span class="line">app.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params">string,callback</span>)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//以/结尾</span></span><br><span class="line">    <span class="keyword">if</span>(!string.<span class="title function_">endsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">        string=string+<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//以/开头</span></span><br><span class="line">    <span class="keyword">if</span>(!string.<span class="title function_">startsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">        string=<span class="string">&#x27;/&#x27;</span>+string;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    /login/</span></span><br><span class="line">    G[string]=callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line">    <span class="comment">//G[&#x27;login&#x27;]=function(req,res)&#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有有请求 就会触发app这个方法</span></span><br><span class="line">http.<span class="title function_">createServer</span>(app).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">// http.createServer(function(req,res)&#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#125;).listen(3000);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册login这个路由（方法）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;register&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​	类似之前的原理。注册路由方法，监听app，只要有请求，就会触发这个请求对应的app这个方法。</p>
<pre><code>  现在我们更全面（例如除了get方法，还有post方法）地把这些路由方法封装成一个文件，只暴露接口给HTTP服务器使用。
</code></pre>
<p>封装路由文件（类似express框架的风格）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装方法改变res  绑定res.send()</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeRes</span>(<span class="params">res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    res.<span class="property">send</span>=<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">		<span class="comment">//响应头，例如用于正确显示中文</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露的模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Server</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> G=<span class="variable language_">this</span>;   <span class="comment">/*全局变量*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理get和post请求</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_get</span>=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_post</span>=&#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> app=<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">        <span class="title function_">changeRes</span>(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取路由</span></span><br><span class="line">        <span class="keyword">var</span> pathname=url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">        <span class="keyword">if</span>(!pathname.<span class="title function_">endsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">            pathname=pathname+<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求的方式 get  post</span></span><br><span class="line">        <span class="keyword">var</span> method=req.<span class="property">method</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(G[<span class="string">&#x27;_&#x27;</span>+method][pathname])&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(method==<span class="string">&#x27;post&#x27;</span>)&#123; <span class="comment">/*执行post请求*/</span></span><br><span class="line">                <span class="comment">//拿数据</span></span><br><span class="line">                <span class="keyword">var</span> postStr=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="keyword">function</span>(<span class="params">chunk</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    postStr+=chunk;</span><br><span class="line">                &#125;)</span><br><span class="line">                req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,chunk</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    req.<span class="property">body</span>=postStr;  <span class="comment">/*表示拿到post的值，赋值给body*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//G._post[&#x27;dologin&#x27;](req,res)</span></span><br><span class="line"></span><br><span class="line">                    G[<span class="string">&#x27;_&#x27;</span>+method][pathname](req,res); <span class="comment">/*执行方法*/</span></span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">/*执行get请求*/</span></span><br><span class="line">                G[<span class="string">&#x27;_&#x27;</span>+method][pathname](req,res); <span class="comment">/*执行方法*/</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;no router&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.<span class="property">get</span>=<span class="keyword">function</span>(<span class="params">string,callback</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!string.<span class="title function_">endsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">            string=string+<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!string.<span class="title function_">startsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">            string=<span class="string">&#x27;/&#x27;</span>+string;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//    /login/</span></span><br><span class="line">        G.<span class="property">_get</span>[string]=callback;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.<span class="property">post</span>=<span class="keyword">function</span>(<span class="params">string,callback</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!string.<span class="title function_">endsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">            string=string+<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!string.<span class="title function_">startsWith</span>(<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">            string=<span class="string">&#x27;/&#x27;</span>+string;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//    /login/</span></span><br><span class="line">        G.<span class="property">_post</span>[string]=callback;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//G._post[&#x27;dologin&#x27;]=function(req,res)&#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="title class_">Server</span>();</span><br></pre></td></tr></table></figure>

<p>​	服务器代码（使用EJS模板渲染）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ejs=<span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=<span class="built_in">require</span>(<span class="string">&#x27;./model/express-route.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(app).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> msg=<span class="string">&#x27;这是数据库的数据&#x27;</span></span><br><span class="line">	<span class="comment">//数据可以传人渲染模板，后续其实可以和数据库结合使用</span></span><br><span class="line">    ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;views/index.ejs&#x27;</span>,&#123;<span class="attr">msg</span>:msg&#125;,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">		<span class="comment">//使用定义的send</span></span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录页面</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    ejs.<span class="title function_">renderFile</span>(<span class="string">&#x27;views/form.ejs&#x27;</span>,&#123;&#125;,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行登录</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/dologin&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);  <span class="comment">/*获取post传过来的数据*/</span></span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功&#x27;);history.back();&lt;/script&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/register&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;新闻数据&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p>login:</p>
<p><img src="/2020/05/16/blog56/image-20200516164915369.png" alt="image-20200516164915369"></p>
<p><img src="/2020/05/16/blog56/image-20200516164929879.png" alt="image-20200516164929879"></p>
<p><img src="/2020/05/16/blog56/image-20200516164935115.png" alt="image-20200516164935115"></p>
<p>news:</p>
<p><img src="/2020/05/16/blog56/image-20200516164838558.png" alt="image-20200516164838558"></p>
<p>register:</p>
<p><img src="/2020/05/16/blog56/image-20200516164758015.png" alt="image-20200516164758015"></p>
<p>​	</p>
<p><strong>小结：这样就实现了express框架封装的路由，逻辑清晰，使用起来很方便。</strong></p>
<p>​	</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>路由模块封装</tag>
        <tag>express路由</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯实习总结</title>
    <url>/2020/08/16/blog57/</url>
    <content><![CDATA[<p>介绍：这是关于暑期去腾讯实习项目的总结复盘</p>
<p>项目：实习内容、心得、启发的总结与反思</p>
<p>技术栈：PHP，CodeIgniter(MVC 框架)，MySQL，vue，iview UI，axios。</p>
<span id="more"></span>

<h3 id="腾讯实习总结"><a href="#腾讯实习总结" class="headerlink" title="腾讯实习总结"></a>腾讯实习总结</h3><h4 id="岗位："><a href="#岗位：" class="headerlink" title="岗位："></a>岗位：</h4><p>TEG技术工程事业群&#x2F;网络平台部&#x2F;网络运营中心&#x2F;运营开发组&#x2F;运营开发岗</p>
<h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>网络平台部是负责整个腾讯公司网络相关的东西。网络的生命周期很长，到硬件，到软件，到架构，到机房运营，到网络运营。我在的中心是负责网络运营的，例如做些机房管理、网络架构设计，专线扩容&#x2F;切换，变更管理（例如设备升级等）等等。我们组是负责做一些关于网络运营管理工具平台的开发（devOps模式，开发的平台跟用户的业务逻辑完全区分开），当出现网络设备系统升级等变更需求时，此时平台可提供通用的流程模板，用于用户自定义处理方案，从而执行网络变更。（里面涉及错误流程的紧急回退等等）</p>
<h4 id="工作需求："><a href="#工作需求：" class="headerlink" title="工作需求："></a>工作需求：</h4><p>为了进一步提升NC变更平台的问题复盘效率以及实现追溯模板历史能力，我们需实现NC平台的模板日志功能，能够记录变更模板的创建、信息修改以及生成对应模板版本，并且能对比出不同模板版本间的数据差异。同时，日志功能需可视化展示。</p>
<p>（除了查看模板日志，日志记录的新旧数据及其差异等，还可能希望当遇到因修改模板导致的变更流程出现问题时，能够快速还原修改前的模板版本，因而我还实现了模板旧版本的回滚功能。）</p>
<h4 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h4><p>2.1 复杂的实际项目</p>
<p>之前我只学习过前端（vue技术栈），没接触过后端方面的技术细节，而NC项目是基于PHP+CodeIgniter后端框架的后端渲染的web系统，这对我的代码开发是一个难题。因此我花了几周时间，学习掌握了后端方面的知识并写了个web开发demo，从前端到后端及数据库真真正正理解了web开发的整个流程。接着接触NC这种复杂的实际项目，结合业务文档，阅读项目代码，理解代码块功能，我才对NC项目有了一个比较整体的理解。后面进行日志功能的开发时，就比较顺手了。</p>
<p>2.2 日志功能中的对比模板差异功能</p>
<p>​    对于用户来说，更关注于不同模板版本间的数据差异，而NC模板由于其可用户定义的灵活性，使得它的数据构成十分复杂，对比找出差异是一个难点。我是通过不断分析模板数据对象构成成分，逐项遍历地，逐层次地对比，发现各层级差异，最后把整个模板差异信息给汇总一起，并用表格可视化地展示给用户具体是什么变量在哪个位置做了什么操作，从什么状态变为了什么状态，从而才实现差异发现功能。</p>
<h4 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h4><p><strong>实现了整个日志表功能</strong>：</p>
<ol>
<li><p>“日志记录”功能。记录变更模板每次新建、修改、回滚、删除操作以及对应的模板版本。</p>
<p>a)     对于第一次创建模板，保存后，由于没有修改前的模板信息，则标记为“创建”，并保存在日志表中。</p>
</li>
</ol>
<p>​	b)    每次修改模板并保存后，会把修改前后的模板信息保存到日志表中。并标记为“修改”。</p>
<p>​	c)     对于模板回滚，会把回滚前的当前模板信息和要回滚的模板信息保存在日志表中，并标记为“回滚”。</p>
<p>​	d)    对于“创建”状态，旧数据中的“查看数据”和“回滚”按钮、“查看差异”按钮都被禁用，而新数据中“查看数据”按钮可用。对于“修改”和“回滚”状态，四个按钮都可用。</p>
<p>​	e)     对于“已删除”状态，是模板执行“删除”操作，此时，日志会记录，并且禁用该模板的所有日志记录的“回滚”功能（模板处于不可编辑状态）。</p>
<ol start="2">
<li><p>“查看日志”功能。在变更模板查看视图中，点击“查看日志”，可跳转日志视图，查看当前模板日志信息和一些可执行操作。</p>
<p>a)     日志表信息展示。以分页表格进行展示同一模板id的日志信息，表头有日志编号、模板id、模板编号、操作人、操作时间、操作类别、旧数据、新数据、数据差异。</p>
<p>b)    其中，操作类别主要有创建、修改、回滚、删除；对于旧数据，有“查看数据”功能和“回滚”功能；对于新数据，有“查看数据”功能；对于数据差异，有“查看差异”功能。</p>
</li>
<li><p>“查看数据”功能。跳转到查看数据视图，以变更模板查看视图（只读，不能对模板信息进行修改），去展示某次日志记录的新&#x2F;旧数据，包括日志编号、日志类型（旧&#x2F;新数据）、模板信息（基本信息、全局变量配置、屏蔽工具配置、EOP工具配置、实施操作模板）。</p>
</li>
<li><p>“回滚”功能。将当前模板数据被替换为在日志表选中的某个模板旧数据，并有回滚信息提示。</p>
</li>
<li><p>“查看差异”功能。将日志记录中的模板新旧数据的差异信息，在日志表视图展示出来，并标记差异存在的位置，变量，操作类型，旧状态和新状态。</p>
</li>
</ol>
<h5 id="还实现了其他的需求优化工作"><a href="#还实现了其他的需求优化工作" class="headerlink" title="还实现了其他的需求优化工作"></a>还实现了其他的需求优化工作</h5><p>1、新增屏蔽规则的日志相关</p>
<p>2、把物理删除转为逻辑删除</p>
<p>3、netops流程接入NC平台</p>
<h4 id="实习收获与体会"><a href="#实习收获与体会" class="headerlink" title="实习收获与体会"></a>实习收获与体会</h4><p>1、接触复杂的项目，设计了前端、后端、数据库等知识，加深了我对整个web开发的理解。</p>
<p>2、工程化，学了代码的规范，便于团队人员的代码开发效率。此外，还有业务解耦性。</p>
<p>3、阅读项目代码时（阅读之前肯定得看项目设计文档、说明文档），首先，看大概框架结构，有哪些部分组成，各个部分的整体功能是什么，每个部分里面具体可以做什么（主要的功能），细节的小的功能先不看它怎么实现，大致看它的功能和代码逻辑即可。这样，就有一个整体的观念。然后再根据整个数据流向与网页对应关系，去理解代码项目的每个功能方法。</p>
<p>4、多从用户的角度思考。例如在实现模板差异列表展示的时候，用户是看不懂英文标识，我们应该添加转化后的中文翻译。</p>
<p>5、以后要熟悉使用公司开发的平台工具。</p>
<p>6、复盘思想，目标是解决什么问题，怎么做，做的过程遇到什么问题，怎么解决，后续还需要做些什么等。每次做完一个需求，可以自觉地做一个ppt复盘总结自己的工作，5W1H原则。</p>
<p>7、ppt的制作，尽量以图表的形式展示，不要太多非必要的文字，少于40%的文字介绍。</p>
<p>8、IDE快捷键的使用，能够提升工作效率。</p>
<h4 id="自我评估"><a href="#自我评估" class="headerlink" title="自我评估"></a>自我评估</h4><p>优点：具有良好的学习能力，能短时间学习掌握新知识并快速接手项目，理解业务以及代码需求开发；良好的问题分析与解决能力；注重自我反思复盘与知识产出。</p>
<p>缺点：实习过程中对PHP的编程熟练度和对业务理解深度还可以进一步提升。</p>
<h4 id="下一步规划"><a href="#下一步规划" class="headerlink" title="下一步规划"></a>下一步规划</h4><p>通过实习，我深刻明白，为了以后能更高效地团队协作，我应该一方面提升自己的技术能力，另一方面是去加深负责项目业务以及相关业务的理解深度，这样才能更好理解业务需求。此外，保持不断学习才能不断进步，例如还得后端方面的技术要更深入一点，在整体对web开发有个较深入整体的基础上，再不断探索学习前端方面的知识，例如JS性能优化，学习跨平台工具，学习react框架，学习typeScript等。 </p>
]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>腾讯</tag>
        <tag>TEG 实习</tag>
      </tags>
  </entry>
  <entry>
    <title>项目结构规范</title>
    <url>/2021/07/16/blog58/</url>
    <content><![CDATA[<p>介绍：项目结构规范</p>
<span id="more"></span>

<h3 id="React项目结构规范"><a href="#React项目结构规范" class="headerlink" title="React项目结构规范"></a>React项目结构规范</h3><p>|– src  只能修改src目录下的文件</p>
<p>   |– assets  图片、字体等资源文件</p>
<p>​      |– favicon.ico  站点头像</p>
<p>​      |– logo.png  站点logo</p>
<p>   |– common  各个页面间共用的文件</p>
<p>​      |– components  公共组件</p>
<p>​      |– constants  常量</p>
<p>​      |– contexts  全局contexts</p>
<p>​      |– hooks  hooks</p>
<p>​      |– layout  页面布局相关的文件</p>
<p>​      |– utils  工具函数</p>
<p>   |– config  配置相关</p>
<p>​      |– appConfig.js  app的配置</p>
<p>​      |– config.js  mock的配置</p>
<p>​      |– routes.jsx  app的路由</p>
<p>   |– mock  mock数据</p>
<p>​      |– data  mock数据模块</p>
<p>​      |– config.js  mock的配置</p>
<p>​      |– server.js  mock server</p>
<p>   |– pages  页面文件</p>
<p>​      |– Home  首页</p>
<p>​         |– index.jsx  页面入口</p>
<p>​         |– s.module.scss  css module</p>
<p>​      |– 403  403 forbidden 页面</p>
<p>​      |– 404  404 not found 页面</p>
<p>​      |– …</p>
<p>   |– index.css  全局css文件</p>
<p>   |– index.js  app入口</p>
<ul>
<li>只能改动src目录内的文件，src目录以外的文件严禁修改。</li>
<li>pages目录结构尽量与页面菜单结构保持一致。</li>
<li>页面自己的components、constants、contexts、hooks、utils等就近放在自己的文件夹内。</li>
<li>组件名称采用大驼峰命名（首字母大写）。</li>
<li>采用css module的方案来做样式隔离，采用sass语法，scss格式，命名为s.module.scss。</li>
</ul>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>规范，项目</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL开发规范</title>
    <url>/2021/07/25/blog59/</url>
    <content><![CDATA[<p>介绍：MySQL 开发规范</p>
<span id="more"></span>

<h3 id="MySQL开发规范"><a href="#MySQL开发规范" class="headerlink" title="MySQL开发规范"></a>MySQL开发规范</h3><h1 id="MySQL-开发规范"><a href="#MySQL-开发规范" class="headerlink" title="MySQL 开发规范"></a>MySQL 开发规范</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对目前Node项目内的MYSQL开发方式拟定一个大致的规范。</p>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul>
<li>统一按照<code>lower_case_with_underscores</code>的命名方式</li>
<li>禁止使用<a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">mysql的关键字和保留字</a></li>
<li>命名的length长度小于32</li>
</ul>
<h3 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h3><ul>
<li>以<code>_db</code>为后缀，如<code>account_db</code>, <code>shopee_account_db</code></li>
<li>以业务代码为前缀，如<code>shopee_account_db</code>, <code>gop_txn_db</code></li>
<li>如果db是单独为某个region，如<code>shopee_admin_vn_db</code></li>
<li>如果要分库，把sharding id放到_db后面，sharding id从0开始，占8位，如<code>shopee_seller_dms_sg_db</code>和<code>shopee_seller_dms_id_db_00001000</code></li>
<li>db名称长度需要小于42(DBA)</li>
</ul>
<h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><ul>
<li>以<code>_tab</code>为后缀，表名不适用复数名词，如果要分表，把sharding id放到_tab后面，sharding id从0开始，占8位 ，如<code>order_tab_00000000</code>和<code>login_log_tab_00201801</code></li>
<li>table名称长度需要小于48(DBA)</li>
</ul>
<h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><ul>
<li>布尔类型字段，is_做为前缀，如<code>is_active</code></li>
<li>如果该字段是外键，并且引用的另一个表是整数主键，则应以<code>_id</code>为后缀</li>
</ul>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><ul>
<li>唯一索引使用<code>uniq_</code>做为前缀，并按顺序紧跟字段名，如<code>uniq_key1_key2</code></li>
<li>非唯一索引使用<code>idx_</code>做为前缀，并按顺序紧跟字段名,如<code>idx_key1_key2</code></li>
</ul>
<h2 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h2><ul>
<li><code>ENGINE=InnoDB</code></li>
<li>通常字符编码选用<code>utf8mb4_unicode_ci</code>,特殊情况可以考虑<code>latin1_general_ci</code>，其中<code>_ci</code>表明不区分大小写，而字符集可以参考<a href="https://stackoverflow.com/questions/2708958/differences-between-utf8-and-latin1">这里</a></li>
<li>如果此字段需要区分大小写，需要在字段中使用<code>*_cs</code></li>
<li>禁止在数据库中存储图片，文件等大的二进制数据。通常存储于文件服务器，数据库只存储文件地址信息</li>
<li>禁止使用外键，如果要保证完整性，应由应用层实现<ul>
<li>MySQL外键实现比较简单粗暴，性能不好</li>
<li>不建议在 MySQL 上放置任何计算逻辑。我们将 MySQL 作为后端存储，不允许外键或存储例程</li>
</ul>
</li>
<li>必须为字段添加注释，注释要言简意赅，不建议很长很详尽的注释</li>
<li>必须包含三个字段<ul>
<li>主键：<code>&#39;id&#39; bigint(20) unsigned NOT NULL AUTO_INCREMENT</code></li>
<li>两个日期字段：<code>create_time</code>，<code>update_time</code>，对表的记录进行更新的时候，必须更新<code>update_time</code></li>
</ul>
</li>
<li>新增列，禁止指定位置 （FIRST &#x2F; AFTER）,而是将新列仅作为最后一列附加</li>
<li>所有字段均定义为NOT NULL</li>
<li>禁止使用ENUM，用TINYINT代替<ul>
<li>ENUM增加新值要进行DDL操作，而DDL对于MYSQL来说维护成本很高</li>
</ul>
</li>
<li>使用INT UNSIGNED （UNIX timestamp）存储时间</li>
<li>使用INT UNSIGNED存储IPV4地址</li>
<li>除非必要，否则不要设置默认值<ul>
<li>在现有表上添加新字段时建议使用默认值，以确保平滑升级&#x2F;回滚</li>
</ul>
</li>
<li>数值类型尽量使用严格数值数据类型 （比如INT, DECIMAL），而不是近似数值数据类型 （比如FLOAT, DOUBLE）<ul>
<li>在存储的时候，float 和 double 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存 储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数并分开存储。</li>
</ul>
</li>
<li>非负数值类型设置为UNSIGNED</li>
<li>定义 ID 值尽可能使用<code>BIGINT unsigned</code></li>
</ul>
<h2 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h2><ul>
<li>建议单表索引数量不超过5个<ul>
<li>太多索引会影响写性能</li>
<li>生成执行计划时，如果索引太多，会降低性能，并可能导致MySQL选择不到最优索引</li>
<li>异常复杂的查询需求，可以选择ES等更为适合的方式存储</li>
</ul>
</li>
<li>建议组合索引的字段不超过5个<ul>
<li>如果5个字段还不能极大缩小row范围，八成是设计有问题</li>
</ul>
</li>
<li>对于频繁的查询优先考虑使用覆盖索引</li>
<li>不建议在频繁更新的字段上建立索引</li>
<li>理解组合索引最左前缀原则，避免重复索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)</li>
<li>非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引<ul>
<li>JOIN字段类型不一致，会自动进行类型转换，可能导致全表扫描</li>
</ul>
</li>
</ul>
<h2 id="查询规范"><a href="#查询规范" class="headerlink" title="查询规范"></a>查询规范</h2><ul>
<li>禁止使用SELECT *，需要哪些字段必须明确写明，使用SELECT &lt;字段列表&gt; 查询<ul>
<li>增加查询分析器解析成本</li>
<li>无用字段增加网络消耗，尤其是 text 类型的字段</li>
</ul>
</li>
<li>LIKE查询时，禁止用 % 通配符最左前导</li>
<li>不要在WHERE使用函数</li>
<li>不要使用SQL运算</li>
<li>能用UNION ALL不要用UNION<ul>
<li>UNION会对结果做去重，会产生临时表</li>
</ul>
</li>
<li>超1000行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作，每批次LIMIT 1000，并在两个批次之间引入延时（比如1s）</li>
<li>不能用 use &lt;&gt; NULL, &#x3D; NULL, in (NULL), not in (NULL), group by NULL, aggregation method(NULL), 只能用<code>is NULL</code>和<code>is not NULL</code>，因为NULL 不是一个值，不能做任何比较</li>
<li>不允许在 MySQL 客户端执行 SQL 直接更新生产数据库中的数据（例如修复数据）<ul>
<li>您可以 DB Update Data在 <a href="https://gts.garenanow.com/create-ticket">GTS</a>中创建 带有票证类型的票证，并将 SQL 放入票证中。DBA 将帮助运行 SQL</li>
<li>您还可以编写脚本来更新数据，并将脚本传递给 DBA 进行审核，然后再在生产环境中运行脚本</li>
<li>为了安全起见，请不要 在 GTS 票证中提供<code>DROP TABLE</code> 或命令。<code>DROP DATABASE</code>通常我们可以使用<code>RENAME TABLE</code> 更改表名来代替。要从实时数据库中物理删除表或数据库，通常我们重命名表，然后再等待 90 天。如果没有报告错误&#x2F;异常，或者没有人想恢复它们，那么可以安全地删除它们。</li>
</ul>
</li>
</ul>
<h2 id="MYSQL最佳实践"><a href="#MYSQL最佳实践" class="headerlink" title="MYSQL最佳实践"></a>MYSQL最佳实践</h2><h3 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h3><p>使用软删除，而不是硬删除，使用<code>is_deleted</code>的标志位来标识删除状态</p>
<blockquote>
<p>硬删除可能会导致数据库性能下降,有时硬删除确实有必要需要提单给DBA处理</p>
</blockquote>
<h3 id="TEXT-BLOB"><a href="#TEXT-BLOB" class="headerlink" title="TEXT&#x2F;BLOB"></a>TEXT&#x2F;BLOB</h3><p>尽可能不去使用TEXT&#x2F;BLOB，如确实需要，将比较大的列拆分到单独的表中</p>
<blockquote>
<ul>
<li>DB大小越小，性能越好</li>
<li>不推荐在InnoDB表里面包含多个TEXT&#x2F;BLOB列</li>
<li>不推荐使用：MEDIUMTEXT&#x2F;LONGBLOB&#x2F;…</li>
</ul>
</blockquote>
<h3 id="integer-timestamp"><a href="#integer-timestamp" class="headerlink" title="integer timestamp"></a>integer timestamp</h3><ul>
<li>建议使用INT UNSIGNED 或者 BIGINT Unix timestamp</li>
<li>永远使用UTC timestamp<ul>
<li>UTC时间戳更容易在多个时区之间进行时间转换</li>
<li>不需要额外的字段存储时区信息</li>
</ul>
</li>
<li>int类型更高效</li>
</ul>
<h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><ul>
<li>单表&gt;单库分表&gt;分库分表，在满足业务场景的情况下，优先级逐渐降低</li>
</ul>
<h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><p>针对dataZoo这里比较大的查询SQL，咨询了服务端的处理方式，也没有太好的做法，一般就是利用orm库来减轻一些拼接sql的负担。</p>
<p>对于类似SUM和if()判断等求和&#x2F;判断逻辑一般也是交由给SQL来做，交由给业务层，一方面要额外写聚合逻辑，另一方面如果数据量大，内存操作可能会有oom的风险。</p>
<p><img src="/2021/07/25/blog59/image2022-8-23_11-9-2-1701696559248-1.png" alt="img"></p>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>规范，MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之栈</title>
    <url>/2019/09/25/blog6/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：栈。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/stack">ES6的JavaScript数据结构实现之栈</a></p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、栈（先入后出）"><a href="#1、栈（先入后出）" class="headerlink" title="1、栈（先入后出）"></a>1、栈（先入后出）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>] = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">/* while (!this.isEmpty()) &#123;</span></span><br><span class="line"><span class="comment">this.pop();</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span>; i++) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>(); <span class="comment">// new StackArray();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using WeakMap to store Stack items we ensure true privacy</span></span><br><span class="line"><span class="comment">// console.log(Object.getOwnPropertyNames(stack));</span></span><br><span class="line"><span class="comment">// console.log(Object.keys(stack));</span></span><br><span class="line"><span class="comment">// console.log(stack.items);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stack.isEmpty() =&gt; &#x27;</span>, stack.<span class="title function_">isEmpty</span>()); <span class="comment">// outputs true</span></span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">6</span>);</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stack after push 5 and 8 =&gt; &#x27;</span>, stack.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stack.peek() =&gt; &#x27;</span>, stack.<span class="title function_">peek</span>()); <span class="comment">// outputs 8</span></span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stack.size() after push 11 =&gt; &#x27;</span>, stack.<span class="title function_">size</span>()); <span class="comment">// outputs 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stack.isEmpty() =&gt; &#x27;</span>, stack.<span class="title function_">isEmpty</span>()); <span class="comment">// outputs false</span></span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">pop</span>();</span><br><span class="line">stack.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stack.size() after push 15 and pop twice =&gt; &#x27;</span>, stack.<span class="title function_">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="title class_">Stack</span></span><br></pre></td></tr></table></figure>



<h3 id="二、栈应用：数据进制转换；平衡圆括号；汉诺塔"><a href="#二、栈应用：数据进制转换；平衡圆括号；汉诺塔" class="headerlink" title="二、栈应用：数据进制转换；平衡圆括号；汉诺塔"></a>二、栈应用：数据进制转换；平衡圆括号；汉诺塔</h3><h4 id="1、由十进制传为二进制。"><a href="#1、由十进制传为二进制。" class="headerlink" title="1、由十进制传为二进制。"></a>1、由十进制传为二进制。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decimalToBinary</span> (decNumber)&#123;</span><br><span class="line"><span class="keyword">const</span> remStack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="keyword">let</span> number = decNumber;</span><br><span class="line"><span class="keyword">let</span> rem;</span><br><span class="line"><span class="keyword">let</span> binaryString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (number &gt; <span class="number">0</span>)&#123;</span><br><span class="line">rem = <span class="title class_">Math</span>.<span class="title function_">floor</span>(number % <span class="number">2</span>);</span><br><span class="line">remStack.<span class="title function_">push</span>(rem);</span><br><span class="line">number = <span class="title class_">Math</span>.<span class="title function_">floor</span>(number / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!remStack.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line">binaryString += remStack.<span class="title function_">pop</span>().<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">decimalToBinary</span>(<span class="number">233</span>));<span class="comment">//输出转换结果11101001</span></span><br><span class="line"></span><br><span class="line">decimalToBinary</span><br></pre></td></tr></table></figure>



<h4 id="2、同理，可以把任意十进制转为2-36进制"><a href="#2、同理，可以把任意十进制转为2-36进制" class="headerlink" title="2、同理，可以把任意十进制转为2-36进制"></a>2、同理，可以把任意十进制转为2-36进制</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">baseConverter</span>(<span class="params">decNumber, base</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> remStack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="keyword">const</span> digits = <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> number = decNumber;</span><br><span class="line"><span class="keyword">let</span> rem;</span><br><span class="line"><span class="keyword">let</span> baseString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(base &gt;= <span class="number">2</span> &amp;&amp; base &lt;= <span class="number">36</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">rem = <span class="title class_">Math</span>.<span class="title function_">floor</span>(number % base);</span><br><span class="line">remStack.<span class="title function_">push</span>(rem);</span><br><span class="line">number = <span class="title class_">Math</span>.<span class="title function_">floor</span>(number / base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!remStack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">baseString += digits[remStack.<span class="title function_">pop</span>()];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baseString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">baseConverter</span>(<span class="number">1023</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">baseConverter</span>(<span class="number">1023</span>, <span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">baseConverter</span>(<span class="number">1023</span>, <span class="number">16</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">baseConverter</span>(<span class="number">1023</span>, <span class="number">25</span>));</span><br><span class="line"></span><br><span class="line">baseConverter</span><br></pre></td></tr></table></figure>

<h4 id="3、平衡圆括号"><a href="#3、平衡圆括号" class="headerlink" title="3、平衡圆括号"></a>3、平衡圆括号</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parenthesesChecker</span>(<span class="params">symbols</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="keyword">const</span> opens =<span class="string">&#x27;([&#123;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> closers = <span class="string">&#x27;)]&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> symbol;</span><br><span class="line"><span class="keyword">let</span> balanced = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> top;</span><br><span class="line"><span class="keyword">while</span> (index &lt; symbols.<span class="property">length</span> &amp;&amp; balanced) &#123;</span><br><span class="line">symbol = symbols[index];</span><br><span class="line"><span class="keyword">if</span> (opens.<span class="title function_">indexOf</span>(symbol) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">stack.<span class="title function_">push</span>(symbol);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">balanced = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">top = stack.<span class="title function_">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (!(opens.<span class="title function_">indexOf</span>(top) === closers.<span class="title function_">indexOf</span>(symbol)))&#123;</span><br><span class="line">balanced = <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> balanced &amp;&amp; stack.<span class="title function_">isEmpty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">parenthesesChecker</span>(<span class="string">&#x27;&#123;&#125;()([])&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">parenthesesChecker</span>(<span class="string">&#x27;&#123;&#125;()([&#125;&#123;&#125;])&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">parenthesesChecker</span><br></pre></td></tr></table></figure>



<h4 id="4、汉诺塔"><a href="#4、汉诺塔" class="headerlink" title="4、汉诺塔"></a>4、汉诺塔</h4><p>&#x2F;&#x2F;注释：汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如把一根柱子上的3个盘移动到另一根柱子上。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构建汉诺塔结构</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hanoiStack</span>(<span class="params">plates</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> source = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="keyword">const</span> dest = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="keyword">const</span> helper = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = plates; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">source.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">towerOfHanoi</span>(plates, source, helper, dest, <span class="string">&#x27;source&#x27;</span>, <span class="string">&#x27;helper&#x27;</span>, <span class="string">&#x27;dest&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">towerOfHanoi</span>(<span class="params">plates, source, helper, dest, sourceName, helperName, destName, moves = []</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (plates &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> moves;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (plates === <span class="number">1</span>) &#123;</span><br><span class="line">dest.<span class="title function_">push</span>(source.<span class="title function_">pop</span>());</span><br><span class="line"><span class="keyword">const</span> move = &#123;&#125;;</span><br><span class="line">move[sourceName] = source.<span class="title function_">toString</span>();</span><br><span class="line">move[helperName] = helper.<span class="title function_">toString</span>();</span><br><span class="line">move[destName] = dest.<span class="title function_">toString</span>();</span><br><span class="line">moves.<span class="title function_">push</span>(move);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">towerOfHanoi</span>(plates - <span class="number">1</span>, source, dest, helper, sourceName, destName, helperName, moves);</span><br><span class="line">dest.<span class="title function_">push</span>(source.<span class="title function_">pop</span>());</span><br><span class="line"><span class="keyword">const</span> move = &#123;&#125;;</span><br><span class="line">move[sourceName] = source.<span class="title function_">toString</span>();</span><br><span class="line">move[helperName] = helper.<span class="title function_">toString</span>();</span><br><span class="line">move[destName] = dest.<span class="title function_">toString</span>();</span><br><span class="line">moves.<span class="title function_">push</span>(move);</span><br><span class="line"><span class="title function_">towerOfHanoi</span>(plates - <span class="number">1</span>, helper, source, dest, helperName, sourceName, destName, moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> moves;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hanoi</span>(<span class="params">plates, source, helper, dest, moves = []</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (plates &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> moves;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (plates === <span class="number">1</span>) &#123;</span><br><span class="line">moves.<span class="title function_">push</span>([source, dest]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">hanoi</span>(plates - <span class="number">1</span>, source, dest, helper, moves);</span><br><span class="line">moves.<span class="title function_">push</span>([source, dest]);</span><br><span class="line"><span class="title function_">hanoi</span>(plates - <span class="number">1</span>, helper, source, dest, moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> moves;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hanoiStack</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ &#123; source: &#x27;3,2&#x27;, helper: &#x27;&#x27;, dest: &#x27;1&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; source: &#x27;3&#x27;, dest: &#x27;1&#x27;, helper: &#x27;2&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; dest: &#x27;&#x27;, source: &#x27;3&#x27;, helper: &#x27;2,1&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; source: &#x27;&#x27;, helper: &#x27;2,1&#x27;, dest: &#x27;3&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; helper: &#x27;2&#x27;, dest: &#x27;3&#x27;, source: &#x27;1&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; helper: &#x27;&#x27;, source: &#x27;1&#x27;, dest: &#x27;3,2&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#123; source: &#x27;&#x27;, helper: &#x27;&#x27;, dest: &#x27;3,2,1&#x27; &#125; ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hanoi</span>(<span class="number">3</span>, <span class="string">&#x27;source&#x27;</span>, <span class="string">&#x27;helper&#x27;</span>, <span class="string">&#x27;dest&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ [ &#x27;source&#x27;, &#x27;dest&#x27; ],</span></span><br><span class="line"><span class="comment">[ &#x27;source&#x27;, &#x27;helper&#x27; ],</span></span><br><span class="line"><span class="comment">[ &#x27;dest&#x27;, &#x27;helper&#x27; ],</span></span><br><span class="line"><span class="comment">[ &#x27;source&#x27;, &#x27;dest&#x27; ],</span></span><br><span class="line"><span class="comment">[ &#x27;helper&#x27;, &#x27;source&#x27; ],</span></span><br><span class="line"><span class="comment">[ &#x27;helper&#x27;, &#x27;dest&#x27; ],</span></span><br><span class="line"><span class="comment">[ &#x27;source&#x27;, &#x27;dest&#x27; ] ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">hanoiStack</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>typeorm-model-generator 生成TypeOrm实体类</title>
    <url>/2021/09/10/blog61/</url>
    <content><![CDATA[<span id="more"></span>

<p>TypeOrm 支持 synchronize 这样直接同步entity到db的功能，不过这个用在线上有太大的风险。</p>
<p>并且目前我们的开发模式主要是先进行库表设计，再构建entity实体类进行开发；再就是对于已经有的库表，想使用的时候也需要自己构建entity；这样一来，维护本地entity于db中table的一致性，或者按照远程db中的table组装entity类比较繁琐。</p>
<p>typeorm-model-generator 这个工具可以直接连接对应db直接生成entity，方便使用，提升开发效率.</p>
<p>工具地址</p>
<p><a href="https://github.com/Kononnable/typeorm-model-generator">https://github.com/Kononnable/typeorm-model-generator</a></p>
<p>目前这个项目处于只维护状态</p>
<p><img src="/2021/09/10/blog61/image2022-8-30_14-23-5-1701762555101-7.png" alt="img"></p>
<p>直接使用npx 运行会少包导致运行失败</p>
<p><img src="/2021/09/10/blog61/image2022-8-30_14-22-21-1701762562279-9.png" alt="img"></p>
<p>考虑到作者已经不怎么维护这个项目了，直接clone一份本地跑一下吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https:``//github.com/Kononnable/typeorm-model-generator.git &amp;&amp; cd typeorm-model-generator &amp;&amp; npm i &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>

<p>dist 文件生成以后执行一下 &#x2F;bin&#x2F;typeorm-model-generator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建个target文件夹用来存放生成的实体类``mkdir target``# 执行生成实体类``./bin/typeorm-model-generator -h db_host -p ``6606` `-d db_name -u db_user -x db_pwd -e mysql -o ./target</span><br></pre></td></tr></table></figure>

<p>在target目录下生成了entities 目录下面就是对应的实体类了</p>
<p><img src="/2021/09/10/blog61/image2022-8-30_14-31-18-1701762573944-11.png" alt="img"></p>
<p>生成的实体类还是比较全的，尤其对于bigint类型还贴心的转了string</p>
<p><img src="/2021/09/10/blog61/image2022-8-30_14-31-1-1701762582953-13.png" alt="img"></p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>typeorm-model-generator，nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs监控方案</title>
    <url>/2021/08/14/blog60/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Nodejs监控方案"><a href="#Nodejs监控方案" class="headerlink" title="Nodejs监控方案"></a>Nodejs监控方案</h1><p>BFF 上线后，未提供监控能力，无法主动发现报错、接口性能等，需要有相应的指标监控 BFF 程序运行状况。</p>
<p>本方案以监控 BFF （Nest.js 应用），描述从指标制定到查看数据面板的过程。</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a><strong>目标</strong></h1><p>BFF 的监控主要包含系统监控、服务监控、业务监控、报警响应四大类</p>
<h2 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a><strong>监控指标</strong></h2><table>
<thead>
<tr>
<th>类型</th>
<th>指标类</th>
<th>指标名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>系统监控</td>
<td>容器指标</td>
<td>容器 CPU</td>
<td>Pod CPU 使用率</td>
</tr>
<tr>
<td>进程指标</td>
<td>进程 CPU</td>
<td>进程 CPU 使用率</td>
<td></td>
</tr>
<tr>
<td>服务监控</td>
<td>HTTP 指标</td>
<td>接口 QPS</td>
<td>所有接口请求量</td>
</tr>
<tr>
<td>接口 P99 延时</td>
<td>接口响应时间，取前 99%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>接口 P95 延时</td>
<td>接口响应时间，取前 99%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>接口成功率</td>
<td>http 状态码 200</td>
<td></td>
<td></td>
</tr>
<tr>
<td>RPC指标</td>
<td>同HTTP指标</td>
<td>&#x2F;</td>
<td></td>
</tr>
<tr>
<td>Spex指标</td>
<td>同HTTP指标</td>
<td>&#x2F;</td>
<td></td>
</tr>
<tr>
<td>业务监控</td>
<td>业务指标</td>
<td>根据业务具体场景而定</td>
<td>&#x2F;</td>
</tr>
</tbody></table>
<h2 id="报警响应"><a href="#报警响应" class="headerlink" title="报警响应"></a><strong>报警响应</strong></h2><ul>
<li>支持报警规则配置</li>
<li>支持邮件通知业务 owner</li>
</ul>
<h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a><strong>架构设计</strong></h1><p><img src="/2021/08/14/blog60/image2022-4-18_15-16-26-1701762318525-1.png" alt="img"></p>
<h2 id="主要架构模块"><a href="#主要架构模块" class="headerlink" title="主要架构模块"></a><strong>主要架构模块</strong></h2><p>按功能类别主要划分为三个类模块。</p>
<ol>
<li>监控 SDK<ul>
<li>以项目（Project）维度， 每个项目按初始化参数创建一个 SDK 类实例，用于配置追踪与上报的类别信息。</li>
<li>负责具体类别的数据处理与指标收集，并提供给 Prometheus </li>
<li>业务方直接引入使用，不需要关心指标采集逻辑</li>
</ul>
</li>
<li>监控面板<ul>
<li>以项目（Project）维度， 每个项目创建自己的监控大盘</li>
<li>负责将数据归类并展示对应的可视化图表</li>
</ul>
</li>
<li>告警 <ol>
<li>监听上报数据，支持告警阈值规则配置</li>
<li>负责告警异常到指定 owner</li>
</ol>
</li>
</ol>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a><strong>技术选型</strong></h2><ul>
<li>基于 nest 实现监控 SDK</li>
<li>普罗米修斯提供数据采集能力</li>
<li>Grafana 提供可视化数据展示</li>
<li>AlertManager 提供告警能力</li>
</ul>
<h1 id="核心流程设计"><a href="#核心流程设计" class="headerlink" title="核心流程设计"></a><strong>核心流程设计</strong></h1><h2 id="SDK-设计"><a href="#SDK-设计" class="headerlink" title="SDK 设计"></a><strong>SDK 设计</strong></h2><p><img src="/2021/08/14/blog60/image2022-4-20_12-34-27-1701762336706-3.png" alt="img"></p>
<h3 id="Controller-设计"><a href="#Controller-设计" class="headerlink" title="Controller 设计"></a><strong>Controller 设计</strong></h3><ul>
<li>Method<ul>
<li>提供 get 方法，供普罗米修斯访问</li>
</ul>
</li>
<li>Router<ul>
<li>提供 &#x2F;metrics 接口，暴露采集到的所有指标给普罗米修斯</li>
</ul>
</li>
</ul>
<h3 id="Service-设计"><a href="#Service-设计" class="headerlink" title="Service 设计"></a><strong>Service 设计</strong></h3><p>Service 基于 prom-client 进行封装，是 SDK 的核心逻辑，提供了对指标的采集</p>
<ul>
<li>默认指标<ul>
<li>导出 Prom-client 采集的默认指标</li>
</ul>
</li>
<li>SDK 自动采集的指标<ul>
<li>QPS</li>
<li>接口耗时</li>
<li>接口错误数</li>
</ul>
</li>
<li>暴露给业务方的方法<ul>
<li>基础 API<ul>
<li>耗时统计</li>
<li>次数统计（包含异常次数、成功次数）</li>
<li>Spex 统计（预留）</li>
<li>RPC 统计（预留）</li>
</ul>
</li>
<li>高级 API<ul>
<li>Histogram(柱状图)：统计数据的分布情况（比如 Http_response_time 的时间分布）</li>
<li>Summary(摘要)：主要用于表示一段时间内数据采样结果（请求持续的时间或响应大小）</li>
<li>Gauges(瞬态)：最简单的度量指标，监测瞬间状态（监控硬盘容量或者内存的使用量）</li>
<li>Counters(累加态)：从数据量0开始累积计算，在理想状态下只能是永远的增长不会降低</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="拦截器设计"><a href="#拦截器设计" class="headerlink" title="拦截器设计"></a><strong>拦截器设计</strong></h3><p>拦截器的作用主要是全局采集我们所需要的指标，同时不让业务方感知</p>
<p><img src="/2021/08/14/blog60/Interceptors_1-1701762346098-5.png" alt="img"></p>
<ul>
<li>HttpRequests 拦截器<ul>
<li>所有请求都会通过 httpRequests 拦截器，在这里进行以下指标收集</li>
<li>QPS</li>
<li>接口耗时</li>
</ul>
</li>
<li>Exception 拦截器<ul>
<li>所有未捕获异常都会经过 Exception 拦截器，在这里进行一下指标收集</li>
<li>接口错误数</li>
</ul>
</li>
</ul>
<h3 id="如何接入"><a href="#如何接入" class="headerlink" title="如何接入"></a><strong>如何接入</strong></h3><h4 id="应用框架应该如何接入"><a href="#应用框架应该如何接入" class="headerlink" title="应用框架应该如何接入"></a><strong>应用框架应该如何接入</strong></h4><ul>
<li>应用框架需要默认依赖该 SDK</li>
</ul>
<h4 id="现有项目应该如何接入"><a href="#现有项目应该如何接入" class="headerlink" title="现有项目应该如何接入"></a><strong>现有项目应该如何接入</strong></h4><ul>
<li>在现有服务中新增依赖该 SDK</li>
<li>将 SDK 中的 Module 注册到 main 中</li>
<li>并在启动模版中添加对 8081 端口的监控</li>
<li>在 main 中引入拦截器</li>
</ul>
<h2 id="监控面板设计"><a href="#监控面板设计" class="headerlink" title="*监控面板设计*"></a><em><strong>*监控面板设计*</strong></em></h2><h3 id="面板上需要体现出哪些指标"><a href="#面板上需要体现出哪些指标" class="headerlink" title="*面板上需要体现出哪些指标*"></a><em><strong>*面板上需要体现出哪些指标*</strong></em></h3><h4 id="通用指标展示"><a href="#通用指标展示" class="headerlink" title="*通用指标展示*"></a><em><strong>*通用指标展示*</strong></em></h4><ul>
<li>CPU</li>
<li>内存</li>
<li>QPS</li>
<li>接口耗时</li>
<li>接口错误率</li>
</ul>
<h4 id="其余指标展示（可选）"><a href="#其余指标展示（可选）" class="headerlink" title="其余指标展示（可选）"></a><strong>其余指标展示（可选）</strong></h4><ul>
<li>MySQL 数据库指标<ul>
<li>Shopee 线上的数据库已经装有对应 exporter ，无需手动导出指标数据</li>
</ul>
</li>
<li>Spex 指标</li>
<li>RPC 指标</li>
</ul>
<h3 id="如何展示指标"><a href="#如何展示指标" class="headerlink" title="*如何展示指标*"></a><em><strong>*如何展示指标*</strong></em></h3><p>目前普罗米修斯支持的类型有下面几类</p>
<ul>
<li>Histogram(柱状图)：统计数据的分布情况（比如 Http_response_time 的时间分布）</li>
<li>Summary(摘要)：主要用于表示一段时间内数据采样结果（请求持续的时间或响应大小）</li>
<li>Gauges(瞬态)：最简单的度量指标，监测瞬间状态（监控硬盘容量或者内存的使用量）</li>
<li>Counters(累加态)：从数据量0开始累积计算，在理想状态下只能是永远的增长不会降低</li>
</ul>
<p>指标展示分类如下</p>
<table>
<thead>
<tr>
<th align="left">指标</th>
<th align="left">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CPU</td>
<td align="left">Gauges(瞬态) &amp; Summary(摘要)</td>
</tr>
<tr>
<td align="left">内存</td>
<td align="left">Gauges(瞬态) &amp; Summary(摘要)</td>
</tr>
<tr>
<td align="left">QPS</td>
<td align="left">Gauges(瞬态)</td>
</tr>
<tr>
<td align="left">接口耗时</td>
<td align="left">Histogram(柱状图)P99、P90</td>
</tr>
<tr>
<td align="left">接口错误率</td>
<td align="left">Histogram(柱状图)P99、P90</td>
</tr>
<tr>
<td align="left">数据库成功率</td>
<td align="left">Histogram(柱状图)</td>
</tr>
<tr>
<td align="left">Spex 指标</td>
<td align="left">Histogram(柱状图)P99、P90</td>
</tr>
<tr>
<td align="left">RPC 指标</td>
<td align="left">Histogram(柱状图)P99、P90</td>
</tr>
</tbody></table>
<h2 id="告警设计"><a href="#告警设计" class="headerlink" title="*告警设计*"></a><em><strong>*告警设计*</strong></em></h2><h3 id="哪些指标需要告警"><a href="#哪些指标需要告警" class="headerlink" title="*哪些指标需要告警*"></a><em><strong>*哪些指标需要告警*</strong></em></h3><p>告警可以让我们及时响应线上异常，避免问题被动发现</p>
<p>通常我们会对重要或者紧急的线上指标进行告警响应，以下指标需要我们进行告警</p>
<ul>
<li>CPU</li>
<li>内存</li>
<li>接口错误率</li>
<li>数据库 I&#x2F;O 异常</li>
<li>Spex 异常</li>
<li>RPC 异常</li>
</ul>
<h3 id="告警策略"><a href="#告警策略" class="headerlink" title="*告警策略*"></a><em><strong>*告警策略*</strong></em></h3><table>
<thead>
<tr>
<th>指标名</th>
<th>介绍</th>
<th>告警阈值</th>
<th>告警方式</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td>进程 CPU 使用率</td>
<td>&gt;&#x3D; 80%，持续5分钟</td>
<td>sea talk &amp; 邮件</td>
</tr>
<tr>
<td>Memory</td>
<td>进程 Mem 使用率</td>
<td>&gt;&#x3D; 80%，持续5分钟</td>
<td>sea talk &amp; 邮件</td>
</tr>
<tr>
<td>接口错误率</td>
<td>任何一个接口的错误率</td>
<td>每分钟 &gt; 0%</td>
<td>邮件</td>
</tr>
<tr>
<td>每分钟 &gt; 5%</td>
<td>sea talk</td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库异常</td>
<td>数据库 I&#x2F;O 异常</td>
<td>每分钟 &gt; 0</td>
<td>邮件</td>
</tr>
<tr>
<td>每分钟 &gt; 10</td>
<td>sea talk</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Spex 异常</td>
<td>任何一个 Spex 异常</td>
<td>每分钟 &gt; 0</td>
<td>邮件</td>
</tr>
<tr>
<td>每分钟 &gt; 10</td>
<td>sea talk</td>
<td></td>
<td></td>
</tr>
<tr>
<td>RPC 异常</td>
<td>任何一个 RPC 异常</td>
<td>每分钟 &gt; 0</td>
<td>邮件</td>
</tr>
<tr>
<td>每分钟 &gt; 10</td>
<td>sea talk</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>监控，nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>hive和数据库对比总结</title>
    <url>/2021/10/25/blog62/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="hive和数据库对比总结"><a href="#hive和数据库对比总结" class="headerlink" title="hive和数据库对比总结"></a>hive和数据库对比总结</h1><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>Hadoop:</strong></p>
<p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。</p>
<p>Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了POSIX（可移植操作系统接口）的要求，可以以流的形式访问（streaming access）文件系统中的数据。</p>
<p>Hadoop的框架最核心的设计就是：<strong>HDFS</strong>和<strong>MapReduce</strong>。HDFS为海量的数据提供了存储，而MapReduce则为海量的数据提供了计算。</p>
<p><em>简单了解一下hadoop的前世今生：<a href="https://zhuanlan.zhihu.com/p/54994736?utm_source=wechat_session&utm_medium=social&utm_oi=1153751120357687296">https://zhuanlan.zhihu.com/p/54994736?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=1153751120357687296</a></em></p>
<p><em><img src="/2021/10/25/blog62/image2022-8-9_9-54-56-1701762785148-15.png" alt="img"></em></p>
<p><strong>MapReduce：</strong></p>
<p>MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念”Map（映射）”和”Reduce（归约）”，是它们的主要思想，都是从函数式编程语言里借来的，还有从矢量编程语言里借来的特性。</p>
<p>它极大地方便了编程人员在不会分布式并行编程的情况下，将自己的程序运行在分布式系统上。 当前的软件实现是指定一个Map（映射）函数，map的主要输入是一对&lt;key , value&gt;值，经过map计算后输出一对&lt;key , value&gt;值；然后将相同key合并，形成&lt;key , value集合&gt;；再将这个&lt;key , value集合&gt;输入并发的Reduce（归约）函数，经过计算输出零个或多个&lt;key , value&gt;对。</p>
<p><strong>Spark:</strong></p>
<p>Spark是一种比MapReduce更高效读HDFS文件数据的方式（还支持其他数据源，如kafka等），并且读取到数据后（做一些业务逻辑的数据处理等），可以支持写入各种数据源中，例如Redis、MySQL等。</p>
<p>Hadoop MapReduce 是一种用于处理大数据集的编程模型，它采用并行的分布式算法。开发人员可以编写高度并行化的运算符，而不用担心工作分配和容错能力。不过，MapReduce 所面对的一项挑战是它要通过连续多步骤流程来运行某项作业。在每个步骤中，MapReduce 要读取来自集群的数据，执行操作，并将结果写到 HDFS。因为每个步骤都需要磁盘读取和写入，磁盘 I&#x2F;O 的延迟会导致 MapReduce 作业变慢。开发 Spark 的初衷就是为了突破 MapReduce 的这些限制，它可以执行内存中处理，减少作业中的步骤数量，并且跨多项并行操作对数据进行重用。借助于 Spark，将数据读取到内存、执行操作和写回结果仅需要一个步骤，大大地加快了执行的速度。</p>
<p><strong>hive:</strong></p>
<p>hive是基于Hadoop的一个数据仓库工具，用来进行数据提取、转化、加载，这是一种可以存储、查询和分析存储在Hadoop中的大规模数据的机制。hive数据仓库工具能将结构化的数据文件（例如HDFS文件）映射为一张数据库表，并提供SQL查询功能，能将SQL语句转变成MapReduce任务来执行。</p>
<p>Hive的优点是学习成本低，可以通过类似SQL语句（例如Presto SQL）实现快速MapReduce统计，使MapReduce变得更加简单，而不必开发专门的MapReduce应用程序。hive十分适合对数据仓库进行统计分析。</p>
<p><strong>Presto 或 PrestoDB：</strong></p>
<p>Presto（或 PrestoDB）是一种开源的分布式 SQL 查询引擎，从头开始设计用于针对任何规模的数据进行快速分析查询。</p>
<p>它既可支持非关系数据源，例如 Hadoop 分布式文件系统 (HDFS)、Amazon S3、Cassandra、MongoDB 和 HBase，又可支持关系数据源，例如 MySQL、PostgreSQL、Amazon Redshift、Microsoft SQL Server 和 Teradata。</p>
<p><strong>hive和数据库的比较：</strong></p>
<p>从结构上来看，Hive 和数据库除了拥有类似的查询语言，再无类似之处。数据库可以用在 Online 的应用中，但是Hive 是为数据仓库而设计的（用于数据归档等）。</p>
<p>​    1）查询语言<br>　　由于SQL被广泛的应用在数据仓库中，因此，专门针对Hive的特性设计了类SQL的查询语言HQL。熟悉SQL开发的开发者可以很方便的使用Hive进行开发。</p>
<p>　　2）数据存储位置<br>　　Hive 是建立在 Hadoop 之上的，所有 Hive 的数据都是存储在 HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。</p>
<p>　　3）数据格式<br>　　Hive 中没有定义专门的数据格式，数据格式可以由用户指定，用户定义数据格式需要指定三个属性：列分隔符（通常为空格、”\t”、”\x001″）、行分隔符（”\n”）以及读取文件数据的方法（Hive 中默认有三个文件格式TextFile，SequenceFile以及RCFile）。由于在加载数据的过程中，不需要从用户数据格式到 Hive 定义的数据格式的转换，因此，Hive在加载的过程中不会对数据本身进行任何修改，而只是将数据内容复制或者移动到相应的HDFS目录中。而在数据库中，不同的数据库有不同的存储引擎，定义了自己的数据格式。所有数据都会按照一定的组织存储，因此，数据库加载数据的过程会比较耗时。</p>
<p>　　4）数据更新<br>　　由于Hive是针对数据仓库应用设计的，而数据仓库的内容是读多写少的。因此，Hive中不支持对数据的改写和添加，所有的数据都是在加载的时候中确定好的。而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO … VALUES 添加数据，使用 UPDATE … SET修改数据。</p>
<p>　　5）索引<br>　　之前已经说过，Hive在加载数据的过程中不会对数据进行任何处理，甚至不会对数据进行扫描，因此也没有对数据中的某些Key建立索引。Hive要访问数据中满足条件的特定值时，需要暴力扫描整个数据，因此访问延迟较高。由于 MapReduce 的引入， Hive 可以并行访问数据，因此即使没有索引，对于大数据量的访问，Hive 仍然可以体现出优势。数据库中，通常会针对一个或者几个列建立索引，因此对于少量的特定条件的数据的访问，数据库可以有很高的效率，较低的延迟。由于数据的访问延迟较高，决定了 Hive 不适合在线数据查询。</p>
<p>　　6）执行<br>　　Hive中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的（类似 select * from tbl的查询不需要MapReduce）。而数据库通常有自己的执行引擎。</p>
<p>　　7）执行延迟<br>　　之前提到，Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive 执行延迟高的因素是 MapReduce框架。由于MapReduce 本身具有较高的延迟，因此在利用MapReduce 执行Hive查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时 候，Hive的并行计算显然能体现出优势。</p>
<p>　　8）可扩展性<br>　　由于Hive是建立在Hadoop之上的，因此Hive的可扩展性是和Hadoop的可扩展性是一致的（世界上最大的Hadoop 集群在 Yahoo!，2009年的规模在4000 台节点左右）。而数据库由于 ACID 语义的严格限制，扩展行非常有限。目前最先进的并行数据库 Oracle 在理论上的扩展能力也只有100台左右。</p>
<p>　　9）数据规模<br>　　由于Hive建立在集群上并可以利用MapReduce进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。</p>
]]></content>
      <categories>
        <category>hive</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端简介</title>
    <url>/2021/11/30/blog63/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="一、什么是微前端"><a href="#一、什么是微前端" class="headerlink" title="一、什么是微前端"></a>一、什么是微前端</h2><p>微前端（Micro-Frontends）是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立运行、独立开发、独立部署。<strong>微前端不是单纯的前端框架或者工具，而是一套架构体系</strong>。</p>
<p>任何新技术的产生都是为了解决现有场景和需求下的技术痛点，微前端也不例外：</p>
<ol>
<li><strong>拆分和细化</strong>：当下前端领域，单页面应用（SPA）是非常流行的项目形态之一，而随着时间的推移以及应用功能的丰富，单页应用变得不再单一而是越来越庞大也越来越难以维护，往往是改一处而动全身，由此带来的发版成本也越来越高。微前端的意义就是将这些庞大应用进行拆分，并随之解耦，每个部分可以单独进行维护和部署，提升效率。</li>
<li><strong>整合历史系统</strong>：在不少的业务中，或多或少会存在一些历史项目，这些项目大多以采用老框架（Backbone.js，Angular.js ）的B端管理系统为主，介于日常运营，这些系统需要结合到新框架中来使用还不能抛弃，对此我们也没有理由浪费时间和精力重写旧的逻辑。而微前端可以将这些系统进行整合，在基本不修改来逻辑的同时来同时兼容新老两套系统并行运行。</li>
</ol>
<p>可以看到虽然在日常使用之，微前端架构来经常被使用来解决单体应用过于庞大的问题，但实际上它也可以用于将不同团队使用不同技术栈在不同时期所开发的前端项目合并为一个整体展示给用户并统一维护。因此，微前端给我们的前端开发工作提供了一个自行掌控项目规模、自由拆分合并项目的工具，让我们不必再盲目跟随项目需求的多少、新旧而划分我们的代码管理粒度。</p>
<h2 id="二、微前端的实现"><a href="#二、微前端的实现" class="headerlink" title="二、微前端的实现"></a>二、微前端的实现</h2><p>微前端的思想可能是在2016年后才被完整的总结并提出，但是其实现方式却早在web诞生之初就已经存在了，比如最经典的iframe等。发展至今，依靠着不断涌现的新技术，微前端的实现可以说是百家争鸣，百花齐放。</p>
<p>不过一般而言，我们微前端架构的应用可以被简单划分为如下几个部分。</p>
<p><img src="/2021/11/30/blog63/e6c9d24ely1h3uxlhgs9oj20dr08m3ym-1701762929198-17.jpg" alt="未命名文件"></p>
<p>其中，浏览器与子应用不直接交互，取而代之，中间部分的项目基座负责监听或侦测浏览器的指令，通过基座的能力来协调相应子应用的加载并将其展渲染在浏览器中指定的位置上。</p>
<h3 id="2-1-集成方式"><a href="#2-1-集成方式" class="headerlink" title="2.1 集成方式"></a>2.1 集成方式</h3><p>在微前端实现中，最最重要的就是如何集成相关的子应用，大体上整个集成方式分为两类：</p>
<p><strong>1.构建时集成</strong></p>
<p>在这种方式下，子应用作为组件被打包并发布，而基座应用通过安装子应用来实现集成（就和安装普通的NPM包类似）。这种方式存在很多问题，例如如何维护不同应用的版本，如何在不同应用中使用不同的技术，如何缩减最终应用的大小等等。而且，每个子应用的微小改变都会导致基座应用需要重新部署。</p>
<p><strong>2.运行时集成</strong></p>
<p>运行时集成可以进一步分为以下3种方式：</p>
<p><em>2.1 服务器侧集成</em></p>
<p>在这种集成方式中，加载哪个子应用的能力被放在了服务端完成。服务器根据请求的URL来决定以何子应用回复相关请求。最典型的就是使用Nginx路由转发实现微前端。</p>
<p><em>2.2 CDN边缘节点侧集成</em></p>
<p>这种方式充分利用了CDN和Lamda方法的能力，子应用的集成发生在CDN之中。</p>
<p><em>2.3 客户端集成</em></p>
<p>在这种方式中，各子应用都独立进行构建部署，而基座项目则可以根据需要在浏览器端加载不同的子应用。在这种集成方式中，子应用和基座几乎可以完全解耦，不同应用可以基于完全不同的技术栈进行开发。</p>
<h3 id="2-2-关注点"><a href="#2-2-关注点" class="headerlink" title="2.2 关注点"></a>2.2 关注点</h3><p>为了在后续的技术选型中能够更为清晰的比较相关框架的异同，我们列举出以下几个尤为重要的方面，后续的框架对比可以着重关注在这些方面的对比上：</p>
<p><strong>1.子应用集成&#x2F;加载方式</strong></p>
<p>a. 基座如何监听或侦测浏览器变化；</p>
<p>b. 基座如何控制各子应用的加载渲染；</p>
<p><strong>2.子应用隔离</strong></p>
<p>a. 不同子应用中JS代码的运行应该完全独立，互不影响；</p>
<p>b. 不同子应用中的CSS样式应该完全独立，互不影响；</p>
<p><strong>3.应用间通讯</strong></p>
<p>a. 子应用与基座之间如何传递数据；</p>
<p>b. 子应用之间如何传递数据；</p>
<h2 id="三、框架罗列"><a href="#三、框架罗列" class="headerlink" title="三、框架罗列"></a>三、框架罗列</h2><p>初步认为可行的（基本都是运行时集成）：</p>
<ol>
<li><a href="https://github.com/systemjs/systemjs">SYSTEMJS</a>（并非完整解决方案，对import-map的补充）、single-spa、<a href="https://qiankun.umijs.org/zh/guide">qiankun</a>（路由分发）</li>
<li><a href="https://github.com/smapiot/piral">PIRAL</a>（可在服务器或客户端集成，主要针对React,提供大量API，看起来不错）</li>
<li><a href="https://zeroing.jd.com/">micro-app</a>（Web Components）</li>
<li><a href="https://webpack.js.org/concepts/module-federation/">Module Federation</a>（依赖webpack5）、<a href="https://shopee.git-pages.garena.com/seller-fe/multi-module/multi-module-framework/base/solution/multi-module-solution.html">Multi Module Framework</a> (Shopee自研 <a href="https://docs.google.com/presentation/d/1GqqoTeJG0kE2WVIYGMDfI3vcmnYTMmPqrwNOOkOT4O0/edit#slide=id.g12de45dc04e_0_76">文档链接</a> <a href="https://drive.google.com/file/d/12bcOn08Di61f7RKgZF_TlusLCu-4PUiu/view">视频链接</a>)</li>
<li><a href="https://luigi-project.io/">LUIGI</a></li>
</ol>
<p>框架趋势对比：<a href="https://npmtrends.com/@luigi-project/core-vs-@micro-zoe/micro-app-vs-piral-vs-qiankun">https://npmtrends.com/@luigi-project/core-vs-@micro-zoe/micro-app-vs-piral-vs-qiankun</a></p>
<p>其它可参考的：</p>
<ol>
<li><a href="https://bit.dev/">Bit</a>(构建时集成，组件集市？技术栈统一？)</li>
<li><a href="https://github.com/opencomponents/oc">OPEN COMPONENTS</a>（可在服务器或客户端集成，依赖云服务AWS S3 bucket或Google Storage，是否可替换？）</li>
<li><a href="https://www.mosaic9.org/">MOSAIC 9</a>（一整套工具包的集合，全栈微服务）</li>
<li><a href="https://github.com/puzzle-js/puzzle-js">PuzzleJs</a></li>
<li><a href="https://github.com/frintjs/frint">FRINTJS</a>（4年前最后一次更新）</li>
</ol>
]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>NestJS 中使用esm</title>
    <url>/2022/02/21/blog65/</url>
    <content><![CDATA[<h1 id="NestJS-中使用esm"><a href="#NestJS-中使用esm" class="headerlink" title="NestJS 中使用esm"></a>NestJS 中使用esm</h1><h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h3><p>修改tsconfig 如下，修改 module&#x2F;moduleResolution 这两个字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;module&quot;: &quot;Node16&quot;, // +</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;Node&quot;, // +</span><br><span class="line">    &quot;declaration&quot;: true,</span><br><span class="line">    &quot;removeComments&quot;: true,</span><br><span class="line">    &quot;emitDecoratorMetadata&quot;: true,</span><br><span class="line">    &quot;experimentalDecorators&quot;: true,</span><br><span class="line">    &quot;allowSyntheticDefaultImports&quot;: true,</span><br><span class="line">    &quot;target&quot;: &quot;es2017&quot;,</span><br><span class="line">    &quot;sourceMap&quot;: true,</span><br><span class="line">    &quot;outDir&quot;: &quot;./dist&quot;,</span><br><span class="line">    &quot;baseUrl&quot;: &quot;./&quot;,</span><br><span class="line">    &quot;allowJs&quot;: true,</span><br><span class="line">    &quot;incremental&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>安装 @brillout&#x2F;load-module npm包，如下使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const MyEsmClass = await loadModule(&#x27;my-esm-class&#x27;)</span><br><span class="line">const myobj = new MyEsmClass()</span><br></pre></td></tr></table></figure>

<h3 id="相关issue"><a href="#相关issue" class="headerlink" title="相关issue"></a>相关issue</h3><ol>
<li>为什么ts中无法直接使用 await import()<ol>
<li><a href="https://github.com/nestjs/nest/issues/10047">https://github.com/nestjs/nest/issues/10047</a> </li>
<li><a href="https://github.com/microsoft/TypeScript/issues/43329">https://github.com/microsoft/TypeScript/issues/43329</a></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>管理平台监控调研</title>
    <url>/2021/12/25/blog64/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="管理平台监控调研"><a href="#管理平台监控调研" class="headerlink" title="管理平台监控调研"></a>管理平台监控调研</h1><h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>对于管理平台未提供前端监控，无法主动发现报错、页面首屏加载时长、用户浏览器环境等影响用户体验的问题。因此，有必要实现一套前端监控体系方案，旨在提升平台质量和降低排查问题成本。</p>
<h1 id="二、目标"><a href="#二、目标" class="headerlink" title="二、目标"></a>二、目标</h1><p>针对目前各管理平台项目没有提供监控体系功能，将制定一套前端监控体系 SDK，帮助平台开发者快速接入前端监控功能而无需手动实现。</p>
<p>结合目前技术选型和业务情况，前端监控 SDK 需要支持的能力包括以下几点：</p>
<h3 id="异常监控"><a href="#异常监控" class="headerlink" title="异常监控"></a>异常监控</h3><ul>
<li>API 请求异常监控</li>
<li>JS 异常监控</li>
<li>静态资源加载异常监控</li>
<li>Promise 未捕获异常监控</li>
</ul>
<h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><ul>
<li>页面加载性能<ol>
<li>TTFE：首包响应时间</li>
<li>First Paint：首屏渲染时间</li>
<li>DOM Ready：DOM 就位时间</li>
<li>First Interactive：首次可交互时间</li>
</ol>
</li>
</ul>
<h3 id="埋点上报"><a href="#埋点上报" class="headerlink" title="埋点上报"></a>埋点上报</h3><ul>
<li>支持自动采集异常信息</li>
<li>支持自动采集性能信息</li>
<li>支持数据埋点<ul>
<li>浏览器环境</li>
<li>页面访问 pv、uv</li>
<li>手动埋点定制化数据</li>
</ul>
</li>
</ul>
<h3 id="报警响应"><a href="#报警响应" class="headerlink" title="报警响应"></a>报警响应</h3><ul>
<li>支持报警规则配置</li>
<li>支持 sea talk 通知</li>
<li>支持邮件通知业务 owner</li>
</ul>
<h1 id="三、方案"><a href="#三、方案" class="headerlink" title="三、方案"></a>三、方案</h1><p>这里我们主要讨论三个方案</p>
<ol>
<li>开源方案 — sentry</li>
<li>自研 SDK</li>
</ol>
<h2 id="开源方案-—-sentry"><a href="#开源方案-—-sentry" class="headerlink" title="开源方案 — sentry"></a>开源方案 — sentry</h2><p>Sentry 是第三方前端监控开源方案</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>免费</li>
<li>Sentry 可直接使用也可自行搭建</li>
<li>兼容性强，基本不受语言限制，搭建一套系统可用于多个项目</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>定制化程度低，普遍靠使用已有 api</li>
<li>后期维护报警很麻烦</li>
</ul>
<h3 id="异常监控-1"><a href="#异常监控-1" class="headerlink" title="异常监控"></a>异常监控</h3><p>Sentry 只需要注册后，就可以自动采集异常信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sentry.init(&#123;</span><br><span class="line">  // Sentry 项目的 dsn，可从项目设置中获取</span><br><span class="line">  dsn: &quot;https://xxxxxx@161.xxx.xxx.xxx:9000/2&quot;,</span><br><span class="line">  // 初始参数配置内容</span><br><span class="line">  integrations: [new Integrations.BrowserTracing()],</span><br><span class="line">  // 触发异常后发送给 Sentry 的概率</span><br><span class="line">  tracesSampleRate: 1.0,</span><br><span class="line">  // 控制应捕获的面包屑(行为栈)的总量</span><br><span class="line">  maxBreadcrumbs: 20,</span><br><span class="line">  // 规定上下文数据结构的深度，默认为 3</span><br><span class="line">  normalizeDepth: 100,</span><br><span class="line">  // 版本信息</span><br><span class="line">  release: &quot;common@1.0.0&quot;,</span><br><span class="line">  // 环境信息</span><br><span class="line">  environment: process.env.NODE_ENV,</span><br><span class="line">  // 钩子函数，在每次发送 event 前触发</span><br><span class="line">  beforeSend(event) &#123;</span><br><span class="line">    // 网页应用刷新后设置的变量会消失，所以我选择在 beforeSend 触发时插入用户信息</span><br><span class="line">    event.user = &#123;</span><br><span class="line">      userNick: &quot;xxx&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">    return event;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="性能监控-1"><a href="#性能监控-1" class="headerlink" title="性能监控"></a>性能监控</h3><p>Sentry 除了异常监控之外，还集成了强大的性能监控。通过监视应用程序的性能，可以准确定位线上服务问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new` `TracingIntegrations.BrowserTracing(), ``// 性能监控</span><br></pre></td></tr></table></figure>

<h3 id="埋点上报-1"><a href="#埋点上报-1" class="headerlink" title="埋点上报"></a>埋点上报</h3><p>Sentry 可以配置上报规则，由 SDK 自行上报</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Sentry.captureMessage(&quot;Something went fundamentally wrong&quot;, &#123;</span><br><span class="line">  contexts: &#123;</span><br><span class="line">    text: &#123;</span><br><span class="line">      hahah: 22,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  level: Sentry.Severity.Info,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="报警响应-1"><a href="#报警响应-1" class="headerlink" title="报警响应"></a>报警响应</h3><p>Sentry 可以为每个项目创建各种警报规则，并让 Sentry 知道应用程序中发生错误时通知的时间(when)、方式(how)和对象(whom)。 警报规则(Alert rules)由条件(Conditions)和操作(Actions)组成，它们在满足相关条件时执行。</p>
<h2 id="自研-SDK"><a href="#自研-SDK" class="headerlink" title="自研 SDK"></a>自研 SDK</h2><p>自研 SDK 是通过自主研发前端监控 SDK 的一种方案</p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>其定制化程度很高</p>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>但是耗费研发资源</p>
<h3 id="异常监控-2"><a href="#异常监控-2" class="headerlink" title="异常监控"></a>异常监控</h3><p>主要通过拦截器、全局注册 onerror 监听事件、自定义 handler 以及手动 try-catch 实现异常采集</p>
<h3 id="性能监控-2"><a href="#性能监控-2" class="headerlink" title="性能监控"></a>性能监控</h3><p>主要通过 W3C 提供的 performance api 采集性能相关数据</p>
<h3 id="埋点上报-2"><a href="#埋点上报-2" class="headerlink" title="埋点上报"></a>埋点上报</h3><p>主要通过 Navigator.sendBeacon() 进行数据上报，降级方案采用 new Img() 以及 http post 方案</p>
<h3 id="报警响应-2"><a href="#报警响应-2" class="headerlink" title="报警响应"></a>报警响应</h3><p>对接告警平台进行告警设置，主要有普罗米修斯、Grafana 平台等</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li>前端监控 — 分析定位：<a href="https://docs.google.com/presentation/d/1i6LUx2NlImTor20md-Sws9cKY6y4aZ5e_LoBEs_8qNw/edit#slide=id.g113cad12bf9_2_34">https://docs.google.com/presentation/d/1i6LUx2NlImTor20md-Sws9cKY6y4aZ5e_LoBEs_8qNw/edit#slide=id.g113cad12bf9_2_34</a></li>
</ul>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>业界mysql的实践方案调研</title>
    <url>/2022/03/16/blog66/</url>
    <content><![CDATA[<h1 id="业界mysql的实践方案调研"><a href="#业界mysql的实践方案调研" class="headerlink" title="业界mysql的实践方案调研"></a>业界mysql的实践方案调研</h1><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>现存于 Node.js 和 TypeScript 生态环境中的数据库工具可以分为三类。</p>
<h3 id="手写-SQL"><a href="#手写-SQL" class="headerlink" title="手写 SQL"></a>手写 SQL</h3><p>自己手写 SQL（比如使用 pg 和 mysql 这样的 Node.js 数据库驱动）当然可以完全控制数据库操作，但是，生产力却不高，而且会遇到很多细碎的事情（如手动处理链接、操作模板）。</p>
<p>这种方式的另一个问题在于你获取的查询结果时不是类型安全的。你可能会手动书写这些查询结果的类型，但这会花费大量的时间；另外，如果你对数据库进行了改动，你的类型文件也需要保持一致才行，这也会花费大量时间。</p>
<p>此外，手动构造 SQL 字符串的时候，编辑器没法给你任何提示（只能提示一些 SQL 关键字），效率极差。</p>
<p>特点：控制力极强，生产力弱</p>
<h3 id="SQL-构造器"><a href="#SQL-构造器" class="headerlink" title="SQL 构造器"></a>SQL 构造器</h3><p>有不少人用的解决方案是使用 SQL 构造器（如 <a href="http://knexjs.org/guide/query-builder.html#with">knex.js</a>，<a href="http://csnw.github.io/sql-bricks/#selwhere">SQL Bricks</a>）以提高生产力。这种工具为构建 SQL 语句提供了封装层次较高的 API。</p>
<p>但最大的问题在于这种工具需要开发者从 SQL 的角度来对待数据，但应用数据往往是关系型的对象，这就会导致了数据在认知层面与实际层面的差异。开发者不得不经常切换思维模型才能写好 SQL 语句。</p>
<p>特点：控制力强，生产力一般</p>
<h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM 可以让开发者将所有数据定义为 class，一个 class 就是一个数据表，开发者不需要对 SQL 有那么深的理解了。</p>
<p>你可以通过 class 的方法来对数据库进行读写，非常方便，而且也非常接近开发者的心智模型。</p>
<p>特点：控制力弱，生产力不错</p>
<h1 id="调研情况"><a href="#调研情况" class="headerlink" title="调研情况"></a>调研情况</h1><p>针对上面三种类型，由于手写SQL这里则不做过多阐述，为了避免SQL注入和代码可读性，而且写原生SQL对于大部分前端同学来说真的是一种折磨。</p>
<p>所以对业界常见的SQL构造器(QueryBuilder)和ORM框架做一个调研。</p>
<h3 id="ORM-1"><a href="#ORM-1" class="headerlink" title="ORM"></a>ORM</h3><p>NodeJS社区中主流的ORM主要有这么几个，它们都有各自的一些特色：</p>
<h4 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a><a href="https://github.com/sequelize/sequelize">Sequelize</a></h4><p>一款老牌的ORM框架，缺点是TS支持不太好，不过社区有给出对应的解决方案<a href="https://github.com/sequelize/sequelize-typescript">Sequelize-Typescript</a>，当然后续官方v6版本后也支持了TS，具体可以参考：<a href="https://sequelize.org/docs/v6/other-topics/typescript/">Link</a></p>
<p>具体用法参考：<a href="https://docs.nestjs.com/techniques/database#sequelize-integration">https://docs.nestjs.com/techniques/database#sequelize-integration</a></p>
<h4 id="TypeORM"><a href="#TypeORM" class="headerlink" title="TypeORM"></a><a href="https://github.com/typeorm/typeorm">TypeORM</a></h4><p>NodeJS社区star最多的一个ORM,亮点在基于装饰器语法声明表结构、事务、级联等，以及很棒的TS支持。</p>
<p>同时支持ORM的Data Mapper与Actice Record模式，具体参考：<a href="https://typeorm.biunav.com/zh/active-record-data-mapper.html#%E4%BB%80%E4%B9%88%E6%98%AFdata-mapper%E6%A8%A1%E5%BC%8F">https://typeorm.biunav.com/zh/active-record-data-mapper.html#%E4%BB%80%E4%B9%88%E6%98%AFdata-mapper%E6%A8%A1%E5%BC%8F</a></p>
<p>具体用法参考：<a href="https://docs.nestjs.com/techniques/database">https://docs.nestjs.com/techniques/database</a></p>
<h4 id="Prisma"><a href="#Prisma" class="headerlink" title="Prisma"></a><a href="https://www.prisma.io/">Prisma</a></h4><p>Prisma对自己的定义仍然是NodeJS的ORM，但个人感觉它比普通意义上的ORM要强大得多。这里放一张官方的图，来大致了解下Prisma和ORM、SQL、Query Builder的能力比较：</p>
<p><img src="/2022/03/16/blog66/v2-386f17e213efd070e3ff2741f9bc7653_720w-1701763965406-19.jpg" alt="img"></p>
<p>具体用法参考：<a href="https://docs.nestjs.com/recipes/prisma%E5%92%8Chttps://blog.logrocket.com/how-to-use-nestjs-prisma/">https://docs.nestjs.com/recipes/prisma和https://blog.logrocket.com/how-to-use-nestjs-prisma/</a></p>
<h3 id="SQL-构造器-1"><a href="#SQL-构造器-1" class="headerlink" title="SQL 构造器"></a>SQL 构造器</h3><p>除了ORM与原生SQL以外，还有一种常用的数据库交互方式：Query Builder（以下简称QB）。</p>
<p>QB和ORM既有相同之处又有不同之处，比如MQuery (MongoDB的一个Query Builder)的方法是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mquery().find(match, function (err, docs) &#123; </span><br><span class="line">    assert(Array.isArray(docs)); </span><br><span class="line">&#125;) </span><br><span class="line">mquery().findOne(match, function (err, doc) &#123;</span><br><span class="line">    if (doc) &#123; </span><br><span class="line">        // the document may not be found </span><br><span class="line">        console.log(doc); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;) </span><br><span class="line">mquery().update(match, updateDocument, options, function (err, result)&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>看起来是和ORM很像，我们看看其他场景：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mquery().find(match, function (err, docs) &#123; </span><br><span class="line">    assert(Array.isArray(docs)); </span><br><span class="line">&#125;) </span><br><span class="line">mquery().findOne(match, function (err, doc) &#123;</span><br><span class="line">    if (doc) &#123; </span><br><span class="line">        // the document may not be found </span><br><span class="line">        console.log(doc); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;) </span><br><span class="line">mquery().update(match, updateDocument, options, function (err, result)&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>在ORM中，通常不会存在这样的多个方法链式调用，而是通过单个方法+多个参数的方式来操作，这也是Query Builder和ORM的一个重要差异。再来看看TypeORM的Query Builder模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; getConnection &#125; from &quot;typeorm&quot;; </span><br><span class="line">const user = await getConnection() </span><br><span class="line">    .createQueryBuilder() </span><br><span class="line">    .select(&quot;user&quot;) </span><br><span class="line">    .from(User, &quot;user&quot;) </span><br><span class="line">    .where(&quot;user.id = :id&quot;, &#123; id: 1 &#125;) </span><br><span class="line">    .getOne();</span><br></pre></td></tr></table></figure>

<p>以上的操作其实就相当于<code>userRepo.find(&#123; id: 1 &#125;)</code>，你可能会觉得QB的写法过于繁琐，但实际上这种模式要灵活的多，和SQL语句的距离也要近的多（你可以理解为每一个链式方法调用都会对最终生成的SQL语句进行一次操作）。</p>
<p>同时在部分情境（如多级级联下）中，Query Builder反而是代码更简洁的那一方，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const selectQueryBuilder = this.executorRepository </span><br><span class="line">    .createQueryBuilder(&quot;executor&quot;) </span><br><span class="line">    .leftJoinAndSelect(&quot;executor.tasks&quot;, &quot;tasks&quot;) </span><br><span class="line">    .leftJoinAndSelect(&quot;executor.relatedRecord&quot;, &quot;records&quot;) </span><br><span class="line">    .leftJoinAndSelect(&quot;records.recordTask&quot;, &quot;recordTask&quot;) </span><br><span class="line">    .leftJoinAndSelect(&quot;records.recordAccount&quot;, &quot;recordAccount&quot;) </span><br><span class="line">    .leftJoinAndSelect(&quot;records.recordSubstance&quot;, &quot;recordSubstance&quot;) </span><br><span class="line">    .leftJoinAndSelect(&quot;tasks.taskSubstance&quot;, &quot;substance&quot;);</span><br></pre></td></tr></table></figure>

<p>以上代码构建了一个包含多张表的级联关系的Query Builder。</p>
<blockquote>
<p>级联关系如下：</p>
<ul>
<li>Executor</li>
<li>tasks -&gt; Task<ul>
<li>relatedRecord -&gt; Record</li>
</ul>
</li>
<li>Task<ul>
<li>substances -&gt; Substance</li>
</ul>
</li>
<li>Record<ul>
<li>recordTask -&gt; Task</li>
<li>recordAccount -&gt; Account</li>
<li>recordSubstance -&gt; Substance</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="knext-js"><a href="#knext-js" class="headerlink" title="knext.js"></a><a href="http://knexjs.org/">knext.js</a></h4><p>目前主流的QB是knext.js, <a href="https://github.com/bookshelf/bookshelf">Bookshelf.js</a>和<a href="https://github.com/Vincit/objection.js">Objection.js</a>的QB都是基于此来实现的，我们看下其具体使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const knex = require(&#x27;knex&#x27;)(&#123;</span><br><span class="line">  client: &#x27;sqlite3&#x27;,</span><br><span class="line">  connection: &#123;</span><br><span class="line">    filename: &#x27;./data.db&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">try &#123;</span><br><span class="line"> </span><br><span class="line">  await knex.schema</span><br><span class="line">    .createTable(&#x27;users&#x27;, table =&gt; &#123;</span><br><span class="line">      table.increments(&#x27;id&#x27;);</span><br><span class="line">      table.string(&#x27;user_name&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .createTable(&#x27;accounts&#x27;, table =&gt; &#123;</span><br><span class="line">      table.increments(&#x27;id&#x27;);</span><br><span class="line">      table.string(&#x27;account_name&#x27;);</span><br><span class="line">      table</span><br><span class="line">        .integer(&#x27;user_id&#x27;)</span><br><span class="line">        .unsigned()</span><br><span class="line">        .references(&#x27;users.id&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">  const insertedRows = await knex(&#x27;users&#x27;).insert(&#123; user_name: &#x27;Tim&#x27; &#125;)</span><br><span class="line"> </span><br><span class="line">  await knex(&#x27;accounts&#x27;).insert(&#123; account_name: &#x27;knex&#x27;, user_id: insertedRows[0] &#125;)</span><br><span class="line"> </span><br><span class="line">  const selectedRows = await knex(&#x27;users&#x27;)</span><br><span class="line">    .join(&#x27;accounts&#x27;, &#x27;users.id&#x27;, &#x27;accounts.user_id&#x27;)</span><br><span class="line">    .select(&#x27;users.user_name as user&#x27;, &#x27;accounts.account_name as account&#x27;)</span><br><span class="line"> </span><br><span class="line">  const enrichedRows = selectedRows.map(row =&gt; (&#123; ...row, active: true &#125;))</span><br><span class="line"> </span><br><span class="line">&#125; catch(e) &#123;</span><br><span class="line">  console.error(e);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以看到knex的链式操作更进了一步，甚至可以链式创建多张数据库表。</p>
<p>Nest官方也提供了动态模块的方式来实现Nest项目内Knext的使用，具体参考：<a href="https://dev.to/nestjs/build-a-nestjs-module-for-knex-js-or-other-resource-based-libraries-in-5-minutes-12an%E5%92%8Chttps://github.com/nestjsplus/knex%E4%BB%A5%E5%8F%8Ahttps://github.com/nestjsplus/knex-cats">https://dev.to/nestjs/build-a-nestjs-module-for-knex-js-or-other-resource-based-libraries-in-5-minutes-12an和https://github.com/nestjsplus/knex以及https://github.com/nestjsplus/knex-cats</a></p>
<h1 id="趋势"><a href="#趋势" class="headerlink" title="趋势"></a>趋势</h1><p><a href="https://www.prisma.io/dataguide/database-tools/top-nodejs-orms-query-builders-and-database-libraries#conclusion">prisma官网</a>有对2022年前11的DB查询工具的活跃度介绍，总结的较为全面，这里也贴一下当前介绍的几种ORM和QueryBuilder的<a href="https://npmtrends.com/knex-vs-prisma-vs-sequelize-vs-sql-bricks-vs-typeorm">NPM Trending</a>。</p>
<p>总结：prisma近几年越来越被开发者接受，社区活跃度高；TypeORM做为Nest官方推荐的ORM框架和TS支持，也有很高的下载量；Sequelize做为老牌的ORM下载量最大，且趋于稳定，但社区活跃度不高。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>代码注释规范</title>
    <url>/2021/09/25/blog67/</url>
    <content><![CDATA[<h3 id="1、文件注释"><a href="#1、文件注释" class="headerlink" title="1、文件注释"></a>1、文件注释</h3><p>&#x2F;*<br>* @Author:xxx@xx<br>* @Date: 2021-09-25 17:02:51<br>* @LastEditTime: 2021-09-30 00:26:09<br>* @LastEditors:xxx@xx<br>* @Description: 应用的入口文件<br>* @FilePath: &#x2F;xx&#x2F;src&#x2F;index.jsx<br>*&#x2F;</p>
<h3 id="2、函数注释"><a href="#2、函数注释" class="headerlink" title="2、函数注释"></a>2、函数注释</h3><p>&#x2F;**<br>* @description: 给没有数据的日期填充undefined值<br>* @param {Array} 填充前的数据<br>* @param {String} 按哪个属性进行分组<br>* @return {Array} 填充后的数据<br>*&#x2F;</p>
<h3 id="3、块注释"><a href="#3、块注释" class="headerlink" title="3、块注释"></a>3、块注释</h3><p>&#x2F;* 块注释 *&#x2F;</p>
<h3 id="4、行注释"><a href="#4、行注释" class="headerlink" title="4、行注释"></a>4、行注释</h3><p>&#x2F;&#x2F; 行注释</p>
<h3 id="5、scss注释"><a href="#5、scss注释" class="headerlink" title="5、scss注释"></a>5、scss注释</h3><p>&#x2F;* 块注释 *&#x2F;</p>
<p>&#x2F;&#x2F; 行注释</p>
<h3 id="6、vscode插件"><a href="#6、vscode插件" class="headerlink" title="6、vscode插件"></a>6、vscode插件</h3><p>koroFileHeader</p>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>代码注释</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>antd table 设置横向滚动更新column遇到header错位</title>
    <url>/2022/10/19/blog68/</url>
    <content><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>antd table不支持列可选，自己实现了一下列可选，但发现在横向滚动到中间位置时，选中某些列去展示时，会出现header错位，但此时横向滚动一下滚动条则会恢复正常header位置。</p>
<p>问题现象图示：</p>
<p>1、横向滚动到中间位置：</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_11-15-57-1701764303571-24.png" alt="img"></p>
<p>2、选择之前没有渲染选中的列进行展示，此时header出现了回到初始状态位置，出现错位：</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_11-16-53-1701764314734-26.png" alt="img"></p>
<p>3、但此时滚动一下横向滚动条，header瞬间复位成功：</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_11-22-19-1701764324002-28.png" alt="img"></p>
<p>4、此外，对于之前渲染成功的列，在选择取消列展示时，不会出现header错位：</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_11-56-24-1701764332170-30.png" alt="img"></p>
<p>（不会重置ant-table-header的scrollLeft为0）</p>
<h1 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a>二、原因分析</h1><p>首先，在选择之前未渲染的列后，该column的header和data是渲染的，只是header回到了横向滚动的初始位置。</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_11-33-42-1701764338740-32.png" alt="img"></p>
<p>header的横向滚动的位置计算出现了错误，赋值为0，但横向稍微滚动一下，又能够正确赋值为横向滚动位置，从而恢复header的错位展示问题。</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_15-19-19-1701764344004-34.png" alt="img"></p>
<p>由于需求是需要table固定表头，对table的scroll属性设置了y，当没有对scroll设置y时，此时，选中列时，不会出现header错位：</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_11-52-23-1701764348584-36.png" alt="img"></p>
<p>当设置固定定位后，header错位，此时header的scrollLeft为0，但是table-body的的scrollLeft是不为0的。</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_11-59-40-1701764354405-38.png" alt="img"></p>
<p>当横向滚动一下时，header的scrollLeft与table-body的的scrollLeft一致了，不错位。</p>
<p><img src="/2022/10/19/blog68/image2022-10-19_12-2-44-1701764361097-40.png" alt="img"></p>
<h1 id="三、方案尝试"><a href="#三、方案尝试" class="headerlink" title="三、方案尝试"></a>三、方案尝试</h1><p>1、方案一、刷新table，重新计算data、column的思路：给table设置一个随机数的key，当选中列的数据对象变化时，触发table重新渲染。– 不可取</p>
<p>问题：导致每次选择列的时候，table刷新，并且刷新data、column等，导致table的翻页、排序状态受到了影响。</p>
<p>2、方案二：从现象本身入手，在选择列的时候，动一下table的横向滚动条（设置ref，获取table-body节点，设置该节点的scrollLeft偏移1px,再偏移-1px），让header恢复到正确位置。–能解决问题，但比较hack</p>
<p>3、方案三：当可选列状态变化时，设置header的横向滚动条到之前的table-body的滚动位置。</p>
<p>问题：antd-table-header的scrollLeft不能正确被设置，每次新增未渲染过的列时，会重置为0。</p>
<p>git issue: <a href="https://github.com/react-component/table/pull/863">https://github.com/react-component/table/pull/863</a></p>
<p><img src="/2022/10/19/blog68/image2022-10-19_15-52-15-1701764368605-42.png" alt="img"></p>
<p>需要更新<a href="https://github.com/react-component">react-component</a>&#x2F;**<a href="https://github.com/react-component/table">table</a>**版本: v7.27.2 ： <a href="https://github.com/react-component/table/commit/266c10b273a5ea9a3c169a67e58a7e4f40a0caad">https://github.com/react-component/table/commit/266c10b273a5ea9a3c169a67e58a7e4f40a0caad</a></p>
<p>相关issues:</p>
<ol>
<li>（2022.8.22提的issue）<a href="https://github.com/ant-design/ant-design/issues/37179">https://github.com/ant-design/ant-design/issues/37179</a></li>
<li><a href="https://github.com/ant-design/ant-design/issues/19952">https://github.com/ant-design/ant-design/issues/19952</a></li>
<li><a href="https://github.com/ant-design/ant-design/issues/18893">https://github.com/ant-design/ant-design/issues/18893</a></li>
<li><a href="https://github.com/ant-design/ant-design/issues/19018">https://github.com/ant-design/ant-design/issues/19018</a></li>
<li><a href="https://github.com/ant-design/ant-design/issues/5825">https://github.com/ant-design/ant-design/issues/5825</a></li>
</ol>
]]></content>
      <categories>
        <category>antd</category>
      </categories>
      <tags>
        <tag>antd</tag>
        <tag>table</tag>
      </tags>
  </entry>
  <entry>
    <title>代码检查工具</title>
    <url>/2021/08/30/blog69/</url>
    <content><![CDATA[<p>在vscode中安装ESLint和Stylelint，可以在保存代码时自动检查代码和格式化代码。</p>
<ul>
<li>eslint和stylelint的配置中所需的插件已经集成在脚手架中， 无需单独配置</li>
<li>eslint和stylelint的vscode配置，已经保存在.vscode&#x2F;settings.json中，无需单独配置</li>
</ul>
<h3 id="一、ESLint：JavaScript编码规范（含React）"><a href="#一、ESLint：JavaScript编码规范（含React）" class="headerlink" title="一、ESLint：JavaScript编码规范（含React）"></a>一、ESLint：JavaScript编码规范（含React）</h3><p>1、使用eslint约束JavaScript的编写，集成以下插件规则：</p>
<ul>
<li>react&#x2F;recommended：React规则</li>
<li>react-hooks&#x2F;recommended：React hooks规则</li>
<li>standard：代码质量检查</li>
<li>prettier&#x2F;recommended：代码格式检查</li>
</ul>
<p>2、以下规则和最佳实践，供参考：</p>
<ul>
<li>Google JavaScript Style Guide：<a href="https://google.github.io/styleguide/jsguide.html">https://google.github.io/styleguide/jsguide.html</a></li>
<li>Airbnb JavaScript Style Guide：<a href="https://github.com/airbnb/javascript">https://github.com/airbnb/javascript</a></li>
<li>Airbnb React&#x2F;JSX Style Guide：<a href="https://github.com/airbnb/javascript/tree/master/react">https://github.com/airbnb/javascript/tree/master/react</a></li>
</ul>
<h3 id="二、Stylelint：CSS编码规范"><a href="#二、Stylelint：CSS编码规范" class="headerlink" title="二、Stylelint：CSS编码规范"></a>二、Stylelint：CSS编码规范</h3><p>1、使用stylelint约束css的编写，集成以下插件规则：</p>
<ul>
<li>stylelint-config-standard：包含各种style编写规则</li>
<li>stylelint-config-rational-order：约束css属性编写顺序</li>
</ul>
<p>2、以下规则和最佳实践，供参考：</p>
<p>Airbnb CSS &#x2F; Sass Styleguide：<a href="https://github.com/airbnb/css">https://github.com/airbnb/css</a></p>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>规范</tag>
        <tag>代码检查</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之队列</title>
    <url>/2019/09/25/blog7/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：队列和双端队列。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/queue">ES6的JavaScript数据结构实现之队列</a> </p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、队列（FIFO）"><a href="#1、队列（FIFO）" class="headerlink" title="1、队列（FIFO）"></a>1、队列（FIFO）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> =&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">enqueue</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>] = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span>++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> - <span class="variable language_">this</span>.<span class="property">lowestCount</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="variable language_">this</span>.lowestCount]&#125;</span>`</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i= <span class="variable language_">this</span>.<span class="property">lowestCount</span> + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span>;i++)&#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">isEmpty</span>());</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">size</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">toString</span>());</span><br><span class="line">queue.<span class="title function_">dequeue</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">peek</span>());</span><br><span class="line">queue.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Queue</span></span><br></pre></td></tr></table></figure>



<h4 id="2、双端队列（相当于是队列和栈的结合）"><a href="#2、双端队列（相当于是队列和栈的结合）" class="headerlink" title="2、双端队列（相当于是队列和栈的结合）"></a>2、双端队列（相当于是队列和栈的结合）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Deque</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addFront</span>(<span class="params">element</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">addBack</span>(element);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">lowestCount</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span>--;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>] = element;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">count</span>; i &gt;<span class="number">0</span> ; i--)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[i] = <span class="variable language_">this</span>.<span class="property">items</span>[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>] = element;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addBack</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>] = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">removeFront</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span>++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">removeBack</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">peekFront</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">peekBack</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> - <span class="variable language_">this</span>.<span class="property">lowestCount</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="variable language_">this</span>.lowestCount]&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">lowestCount</span> + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span>; i++) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deque = <span class="keyword">new</span> <span class="title class_">Deque</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque.<span class="title function_">isEmpty</span>());</span><br><span class="line">deque.<span class="title function_">addBack</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">deque.<span class="title function_">addBack</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque.<span class="title function_">toString</span>());</span><br><span class="line">deque.<span class="title function_">addBack</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">deque.<span class="title function_">removeFront</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line">deque.<span class="title function_">removeBack</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line">deque.<span class="title function_">addFront</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Deque</span></span><br></pre></td></tr></table></figure>



<h3 id="二、简单应用：击鼓传花，回文检测器。"><a href="#二、简单应用：击鼓传花，回文检测器。" class="headerlink" title="二、简单应用：击鼓传花，回文检测器。"></a>二、简单应用：击鼓传花，回文检测器。</h3><h4 id="1、击鼓传花游戏（hot-potato），即实现循环队列"><a href="#1、击鼓传花游戏（hot-potato），即实现循环队列" class="headerlink" title="1、击鼓传花游戏（hot potato），即实现循环队列"></a>1、击鼓传花游戏（hot potato），即实现循环队列</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Deque</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addFront</span>(<span class="params">element</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">addBack</span>(element);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">lowestCount</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span>--;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>] = element;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">count</span>; i &gt;<span class="number">0</span> ; i--)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[i] = <span class="variable language_">this</span>.<span class="property">items</span>[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>] = element;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addBack</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>] = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">removeFront</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span>++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">removeBack</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">peekFront</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lowestCount</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">peekBack</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lowestCount</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> - <span class="variable language_">this</span>.<span class="property">lowestCount</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="variable language_">this</span>.lowestCount]&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">lowestCount</span> + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span>; i++) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deque = <span class="keyword">new</span> <span class="title class_">Deque</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque.<span class="title function_">isEmpty</span>());</span><br><span class="line">deque.<span class="title function_">addBack</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">deque.<span class="title function_">addBack</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque.<span class="title function_">toString</span>());</span><br><span class="line">deque.<span class="title function_">addBack</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">deque.<span class="title function_">removeFront</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line">deque.<span class="title function_">removeBack</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line">deque.<span class="title function_">addFront</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deque);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Deque</span></span><br></pre></td></tr></table></figure>

<h4 id="2、回文检查器，用双端队列。"><a href="#2、回文检查器，用双端队列。" class="headerlink" title="2、回文检查器，用双端队列。"></a>2、回文检查器，用双端队列。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">palindromeChecker</span>(<span class="params">aString</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">aString === <span class="literal">undefined</span> </span><br><span class="line">|| aString === <span class="literal">null</span> </span><br><span class="line">|| (aString !== <span class="literal">null</span> &amp;&amp; aString.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> deque = <span class="keyword">new</span> <span class="title class_">Deque</span>;</span><br><span class="line"><span class="keyword">const</span> lowerString = aString.<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> firstChar;</span><br><span class="line"><span class="keyword">let</span> lastChar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;lowerString.<span class="property">length</span>; i++)&#123;</span><br><span class="line">deque.<span class="title function_">addBack</span>(lowerString.<span class="title function_">charAt</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (deque.<span class="title function_">size</span>() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">firstChar = deque.<span class="title function_">removeFront</span>();</span><br><span class="line">lastChar = deque.<span class="title function_">removeBack</span>();</span><br><span class="line"><span class="keyword">if</span> (firstChar !== lastChar) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">palindromeChecker</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">palindromeChecker</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">palindromeChecker</span>(<span class="string">&#x27; a&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">palindromeChecker</span>(<span class="string">&#x27;aba&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">palindromeChecker</span>(<span class="string">&#x27;12a21&#x27;</span>))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">palindromeChecker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>队列</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs-snowflake分布式ID</title>
    <url>/2022/04/18/blog70/</url>
    <content><![CDATA[<p>雪花算法</p>
<p><a href="https://www.npmjs.com/package/nodejs-snowflake">https://www.npmjs.com/package/nodejs-snowflake</a></p>
<h2 id="Number-or-String"><a href="#Number-or-String" class="headerlink" title="Number or String"></a>Number or String</h2><p>首先需要确定全局唯一ID是整型还是字符串？如果是字符串，那么现有的UUID就完全满足需求，不需要额外的工作。缺点是字符串作为ID占用空间大，索引效率比整型低。</p>
<p>如果采用整型作为ID，那么首先排除掉32位int类型，因为范围太小，必须使用64位long型。</p>
<h2 id="数据库自增ID缺点"><a href="#数据库自增ID缺点" class="headerlink" title="数据库自增ID缺点"></a>数据库自增ID缺点</h2><p>数据库自增ID的缺点是数据在插入前，无法获得ID。数据在插入后，获取的ID虽然是唯一的，但一定要等到事务提交后，ID才算是有效的。有些双向引用的数据，不得不插入后再做一次更新</p>
<h2 id="snowflake"><a href="#snowflake" class="headerlink" title="snowflake"></a>snowflake</h2><p>分布式ID解决方案</p>
<p><strong>SnowFlake可以保证</strong>：</p>
<ol>
<li>同一台服务器所有生成的id按时间趋势递增</li>
<li>整个分布式系统内不会产生重复id（因为有datacenterId和workerId来做区分）</li>
</ol>
<p><img src="/2022/04/18/blog70/image2022-8-30_19-35-49-1701764589163-44.png" alt="img"></p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>分布式ID</tag>
      </tags>
  </entry>
  <entry>
    <title>前端项目支持TS</title>
    <url>/2022/05/26/blog71/</url>
    <content><![CDATA[<p>vite 默认就支持 TS， 不过react需要加一些配置。</p>
<p>创建 tsconfig.json 如果有 jsconfig.json的话， 就把jsconfig改名为tsconfig</p>
<p>添加ts配置，最终如下参考</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;jsx&quot;: &quot;react-jsx&quot;,</span><br><span class="line">    &quot;allowJs&quot;: true,</span><br><span class="line">    &quot;isolatedModules&quot;: true,</span><br><span class="line">    &quot;baseUrl&quot;: &quot;./&quot;,</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;@/*&quot;: [&quot;src/*&quot;],</span><br><span class="line">      &quot;common/*&quot;: [&quot;src/common/*&quot;],</span><br><span class="line">      &quot;config/*&quot;: [&quot;src/config/*&quot;],</span><br><span class="line">      &quot;store/*&quot;: [&quot;src/store/*&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;outDir&quot;: &quot;dist&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;],</span><br><span class="line">  &quot;include&quot;: [&quot;src/**/*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加 react 的global 类型补充</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare module &#x27;*.scss&#x27; &#123;</span><br><span class="line">  interface IClassNames &#123;</span><br><span class="line">    [className: string]: string</span><br><span class="line">  &#125;</span><br><span class="line">  const classNames: IClassNames</span><br><span class="line">  export = classNames</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">declare module &#x27;*.png&#x27; &#123;</span><br><span class="line">  const src: string</span><br><span class="line">  export default src</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（可选）使用 @vitejs&#x2F;plugin-react vite 插件，移除掉 jsxInject: <code>import React from &#39;react&#39;</code>，这样可以避免重复引入 React 导致的报错</p>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>lockfile效果调研</title>
    <url>/2022/06/15/blog72/</url>
    <content><![CDATA[<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p><em><strong>npm install</strong></em></p>
<table>
<thead>
<tr>
<th align="left">版本</th>
<th align="left">package.json</th>
<th align="left">package-lock.json</th>
</tr>
</thead>
<tbody><tr>
<td align="left">5.0.x</td>
<td align="left">忽略</td>
<td align="left">为准</td>
</tr>
<tr>
<td align="left">5.1.0 - 5.4.1</td>
<td align="left">为准</td>
<td align="left">忽略</td>
</tr>
<tr>
<td align="left">&gt;&#x3D;5.4.2</td>
<td align="left">两者版本不兼容时</td>
<td align="left">两者版本兼容时</td>
</tr>
</tbody></table>
<p>5.0.x        忽略package.json, package-lock.json完全锁定；</p>
<p>5.1.0 - 5.4.1   只要package.json中的更新了, 就无视package-lock.json下载新版本（并更新package-lock.json）；</p>
<p>&gt;&#x3D;5.4.2      根据package.json, package-lock.json版本是否兼容共同确定，兼容以package-lock.json为准，不兼容以package.json为主（并更新package-lock.json）；</p>
<p><em><strong>npm ci</strong></em></p>
<p>推荐CI打包时使用；</p>
<p>使用npm ci时必须有package-lock.json；</p>
<p>npm ci确保不会更改package-lock.json中的版本，当package.json, package-lock.json版本不兼容时报错；</p>
<h2 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h2><p><em><strong>yarn 或 yarn install</strong></em></p>
<p>与<a href="mailto:&#110;&#112;&#109;&#x40;&#x35;&#x2e;&#52;&#x2e;&#50;">&#110;&#112;&#109;&#x40;&#x35;&#x2e;&#52;&#x2e;&#50;</a>版本之后表现一致</p>
<p>根据package.json, yarn.lock版本是否兼容共同确定，兼容以yarn.lock为准，不兼容以package.json为主（并更新yarn.lock）；</p>
<p><em><strong>yarn install –frozen-lockfile</strong></em></p>
<p>推荐CI打包时使用；</p>
<p>使用时必须有yarn.lock；</p>
<p>确保不会更改yarn.lock中的版本，当package.json, yarn.lock版本不兼容时报错；</p>
<h2 id="PNPM"><a href="#PNPM" class="headerlink" title="PNPM"></a>PNPM</h2><p><em><strong>pnpm install</strong></em></p>
<p>与<a href="mailto:&#110;&#112;&#x6d;&#x40;&#x35;&#x2e;&#x34;&#x2e;&#x32;">&#110;&#112;&#x6d;&#x40;&#x35;&#x2e;&#x34;&#x2e;&#x32;</a>版本之后表现一致</p>
<p>根据package.json, pnpm-lock.yaml版本是否兼容共同确定，兼容以pnpm-lock.yaml为准，不兼容以package.json为主（并更新pnpm-lock.yaml）；</p>
<p><em><strong>pnpm install –frozen-lockfile</strong></em></p>
<p>推荐CI打包时使用；</p>
<p>使用时必须有pnpm-lock.yaml；</p>
<p>确保不会更改pnpm-lock.yaml中的版本，当package.json, pnpm-lock.yaml版本不兼容时报错；</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul>
<li><strong>在<a href="mailto:&#x6e;&#112;&#x6d;&#x40;&#x35;&#x2e;&#x34;&#x2e;&#50;">&#x6e;&#112;&#x6d;&#x40;&#x35;&#x2e;&#x34;&#x2e;&#50;</a>版本之后，npm&#x2F;yarn&#x2F;pnpm在使用lockfile的方式上基本一致；</strong></li>
<li><strong>CI部署时推荐使用 npm ci &#x2F; yarn install –frozen-lockfile &#x2F; pnpm install –frozen-lockfile</strong></li>
</ul>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>lockfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 回滚规范</title>
    <url>/2022/07/10/blog73/</url>
    <content><![CDATA[<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>开发流程中，不免会遇到需要回滚 master 代码的时候。关于如何回滚，我们将统一采用 revert 方式进行回滚，以保留之前错误的提交，便于进行复盘与 CR</p>
<p>回滚步骤如下</p>
<ol>
<li>git checkout master —— 分支切换到 master</li>
<li>git pull —— 更新 master 代码为最新</li>
<li>从 master 分支中开一个 feat 分支</li>
<li>git log —— 查询提交记录，并找到需要回滚的 commit id</li>
<li>git revert <commit> 或者 git revert -m 1 faulty merge —— 回滚</commit></li>
<li>push &amp; 提交与 master 分支的 mr</li>
</ol>
<h1 id="Checkout、reset、revert-的择决"><a href="#Checkout、reset、revert-的择决" class="headerlink" title="Checkout、reset、revert 的择决"></a>Checkout、reset、revert 的择决</h1><h2 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h2><p>git checkout 是一种便捷的方式，来将快照「解包」到你的工作目录上去。 <code>git checkout</code> 可以检出提交、也可以检出单个文件甚至还可以检出分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout commitId</span><br></pre></td></tr></table></figure>

<p>检出 commitId 对应的提交，你会发现当前工作目录和<code>commitId</code>完全一致，你可以查看这个版本的文件编辑、运行、测试都不会被保存到git仓库里面。你可以<code>git checkout master</code> 或者 <code>git checkout -</code>回到原来的工作状态上来</p>
<h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><p><code>git reset</code> 有很多用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>从暂存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure>

<p>重置暂存区，匹配最近的一次提交，但工作目录不变。它会取消所有文件的暂存，而不会覆盖任何修改，给你了一个重设暂存快照的机会</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>

<p>加上<code>--hard</code>标记后会告诉git要重置缓存区和工作目录的更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>将缓存区重设到这个提交，但不改变工作目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>将当前分支的指针 head 移到对应的 commit id 提交</p>
<h2 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h2><p><code>git revert</code>被用来撤销一个已经提交的快照。和 reset 是完全不同的。实质是在最后加上一个撤销了更改的新提交，而不是从项目历史中移除这个提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p>生成一个撤消了，引入的修改的新提交，然后应用到当前分支</p>
<p><img src="/2022/07/10/blog73/image2022-1-21_16-18-11-1701765006271-46.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">81f734d commit after bug</span><br><span class="line">        |</span><br><span class="line">3a395af bug</span><br><span class="line">        |</span><br><span class="line">3aa5dfb v3  (&lt;- HEAD)</span><br><span class="line">        |</span><br><span class="line">5aab391 v2</span><br><span class="line">        |</span><br><span class="line">ff7b88e v1</span><br><span class="line">        |</span><br><span class="line">95d7816 init commit</span><br></pre></td></tr></table></figure>

<p>我们在<code>3a395af</code> 引入了一个 bug，我们明确是由于<code>3a395af</code>造成的 bug 的时候，以其我们通过新的提交来 fix 这个 bug，<code>git revert </code>, 让他来帮你剔除这个 bug</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert 3a395af</span><br></pre></td></tr></table></figure>

<p>得到结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cfb71fc Revert &quot;bug&quot;</span><br><span class="line">        |</span><br><span class="line">81f734d commit after bug</span><br><span class="line">        |</span><br><span class="line">3a395af bug</span><br><span class="line">        |</span><br><span class="line">3aa5dfb v3  (&lt;- HEAD)</span><br><span class="line">        |</span><br><span class="line">5aab391 v2</span><br><span class="line">        |</span><br><span class="line">ff7b88e v1</span><br><span class="line">        |</span><br><span class="line">95d7816 init commit</span><br></pre></td></tr></table></figure>

<p>这个时候 bug 的改动被撤销了，产生了一个新的 commit，但是<code>commit after bug</code>没有被清初。</p>
<p>所以相较于<code>reset</code> ，<code>revert</code>不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。其次<code>git revert</code>可以将提交历史中的任何一个提交撤销、而<code>reset</code>会把历史上某个提交及之后所有的提交都移除掉</p>
<h1 id="回滚错误的-merge"><a href="#回滚错误的-merge" class="headerlink" title="回滚错误的 merge"></a>回滚错误的 merge</h1><p>当一个有 bug 的分支 merge 进 master 后，且后续多个开发分支建立在该 merge 之后，将会给后续开发分支带来 bug，导致其余同学测试跑不通或者线上问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge -&gt; v4 -&gt; vc3 (master)</span><br><span class="line">        \  \            /                     /</span><br><span class="line">         \  d1  --&gt;  d2  --&gt; d3 --&gt; d4 (feat)/</span><br><span class="line">          \                                 / </span><br><span class="line">           c1  --&gt;  c2 -------------------c3 (other)</span><br></pre></td></tr></table></figure>

<p>此时第一想到的应该是回滚掉错误的提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert -m ``1` `faulty merge</span><br></pre></td></tr></table></figure>

<p><code>-m</code>后面带的参数值 可以是 1 或者 2，对应着 parent 的顺序.上面列子：1 代表<code>v3</code>，2 代表<code>d2</code> 所以该操作会保留 master 分支的修改，而撤销 feat 分支 merge 过来的修改。</p>
<p>提交历史变为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge -&gt; v4 -&gt; vc3 -&gt; rev3 (master)</span><br><span class="line">          \            /                     </span><br><span class="line">           d1  --&gt;  d2  --&gt; d3 --&gt; d4  (feat)</span><br></pre></td></tr></table></figure>

<p>此处<code>rev3</code>是一个常规 commit，其内容包含了之前在<code>faulty merge</code>撤销掉的 feat 合并过来的 commit 的【反操作】的合集。</p>
<h1 id="恢复之前的回滚"><a href="#恢复之前的回滚" class="headerlink" title="恢复之前的回滚"></a>恢复之前的回滚</h1><p>把之前 master 带有【反操作】的 commit 给撤销掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master``git revert rev3``git merge feat</span><br></pre></td></tr></table></figure>

<p>此时提交历史变成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge -&gt; v4 -&gt; vc3 -&gt; rev3 -&gt; rev3 -&gt; final merge (master)</span><br><span class="line">          \            /                                               /</span><br><span class="line">           d1  --&gt;  d2  --&gt; d3 --&gt; d4  --------------------------------(feat)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>React Keep-Alive设计方案</title>
    <url>/2022/08/16/blog74/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>为了在React中实现类似Keep-Alive的组件行为，之前对市面上目前所存在的一些主流实现库及其原理进行了调研总结。通过对比选择，最终得出以下三个实现方案是我们认为初步可行的：</p>
<table>
<thead>
<tr>
<th align="left">方案</th>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>组件级别缓存：</strong><a href="https://github.com/CJY0208/react-activation">react-activation</a></td>
<td align="left">缓存粒度细</td>
<td align="left">破坏DOM结构导致React 合成事件冒泡失效（基本无法修复）</td>
</tr>
<tr>
<td align="left"><strong>路由级别缓存：</strong><a href="https://github.com/CJY0208/react-router-cache-route">react-router-cache-route</a></td>
<td align="left">使用人数多、范围广</td>
<td align="left">只支持<a href="mailto:&#114;&#x65;&#97;&#99;&#x74;&#x2d;&#x72;&#111;&#x75;&#x74;&#x65;&#x72;&#x40;&#53;&#x2e;&#x78;&#46;&#120;">&#114;&#x65;&#97;&#99;&#x74;&#x2d;&#x72;&#111;&#x75;&#x74;&#x65;&#x72;&#x40;&#53;&#x2e;&#x78;&#46;&#120;</a></td>
</tr>
<tr>
<td align="left"><strong>路由级别缓存：</strong>自研react-router@6 Keep-Alive</td>
<td align="left">支持最新的<a href="mailto:&#x72;&#x65;&#x61;&#99;&#116;&#45;&#x72;&#x6f;&#x75;&#x74;&#101;&#114;&#x40;&#54;&#46;&#x78;&#x2e;&#x78;">&#x72;&#x65;&#x61;&#99;&#116;&#45;&#x72;&#x6f;&#x75;&#x74;&#101;&#114;&#x40;&#54;&#46;&#x78;&#x2e;&#x78;</a></td>
<td align="left">需要自己实现，有一定成本</td>
</tr>
</tbody></table>
<p>可以看到，目前并没有一个完美成熟且低成本的解决方案能够为我们所用。</p>
<p>经过对其实现原理的研究及讨论，我们认为目前情况下使用自研方案是一个最优解，其原因有以下几点：</p>
<ol>
<li>自研方案代码设计实现并没有想象中的复杂，实现成本可控；</li>
<li>自研方案能够摆脱应用框架实现keep-alive只能停留在<a href="mailto:&#114;&#101;&#97;&#x63;&#x74;&#x2d;&#x72;&#111;&#x75;&#x74;&#x65;&#114;&#x40;&#x35;&#x2e;&#x78;&#x2e;&#120;">&#114;&#101;&#97;&#x63;&#x74;&#x2d;&#x72;&#111;&#x75;&#x74;&#x65;&#114;&#x40;&#x35;&#x2e;&#x78;&#x2e;&#120;</a>的桎梏，让框架的生命力更长久；</li>
<li>自研keep-alive方案底层实现逻辑与<a href="https://github.com/CJY0208/react-router-cache-route">react-router-cache-route</a>一致，使用css display属性控制缓存组件的展现，并无破坏DOM结构等hack代码，实现逻辑可靠；</li>
</ol>
<p>因此，以下内容主要围绕自研Keep-alive方案该如何设计实现展开。</p>
<h2 id="二、方案设计"><a href="#二、方案设计" class="headerlink" title="二、方案设计"></a>二、方案设计</h2><p><img src="/2022/08/16/blog74/keep-alive-1701765276686-48.jpg" alt="img"></p>
<h3 id="2-1-基础组件"><a href="#2-1-基础组件" class="headerlink" title="2.1 基础组件"></a>2.1 基础组件</h3><p>为使用者提供三个基础组件来实现keep-alive基础功能：</p>
<p><strong>1. CacheRoutes</strong></p>
<p>组件用来包裹所有希望缓存的路由组件（将其渲染并存储在该组件下），应放置于所有希望缓存的CacheRouter组件最外层，避免react将其卸载。</p>
<p><strong>2. CacheOutlet</strong></p>
<p>组件用来包裹所有希望缓存的嵌套路由组件（将其渲染并存储在该组件下），应放置于所有希望缓存的CacheRouter嵌套路由组件最外层，避免react将其卸载。、</p>
<p><strong>3. CacheRoute</strong></p>
<p>组件用来包裹希望缓存的自定义组件，与Route组件一致在同一级别出现，CacheRoute标明该组件内的自定义组件需要被缓存。</p>
<p>此外该组件将支持一些行为拓展参数如when（用以决定何时使用缓存功能，<strong>forward&#x2F;back&#x2F;always</strong>）等等，</p>
<h3 id="2-2-生命周期"><a href="#2-2-生命周期" class="headerlink" title="2.2 生命周期"></a>2.2 生命周期</h3><p>为使用者提供两个生命周期函数，让使用者能够感知到缓存组件的展示情况，根据展示与否执行相关自定义逻辑：</p>
<p><strong>1. useActive</strong></p>
<p>缓存组件展示时调用传入其中的函数</p>
<p><strong>2. useDeactive</strong></p>
<p>缓存组件隐藏时调用传入其中的函数</p>
<h3 id="2-3-缓存清除"><a href="#2-3-缓存清除" class="headerlink" title="2.3 缓存清除"></a>2.3 缓存清除</h3><p>为使用者提供相关函数，赋予其手动清除缓存的能力：</p>
<p><strong>1. dropByCacheKey</strong></p>
<p>调用时通过缓存组件的key值清除其缓存</p>
<p><strong>2. clearCache</strong></p>
<p>调用时清除全部缓存</p>
<h3 id="2-4-质量保证"><a href="#2-4-质量保证" class="headerlink" title="2.4 质量保证"></a>2.4 质量保证</h3><p>提供较为完善的单元测试，并在实际项目中使用尝试</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>Keep-Alive</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React&amp;JSX 规范</title>
    <url>/2021/08/29/blog75/</url>
    <content><![CDATA[<h2 id="React-JSX-规范"><a href="#React-JSX-规范" class="headerlink" title="React&amp;JSX 规范"></a>React&amp;JSX 规范</h2><blockquote>
<p>本规范基本基于标准的 JavaScript 语法规范</p>
</blockquote>
<h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul>
<li>每个文件只包含一个 React 类组件<ul>
<li>但是多个函数式组件可以放到一个文件中，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless">react&#x2F;no-multi-comp</a></li>
</ul>
</li>
<li>一般使用 JSX 语法</li>
<li>除非是在非 JSX 文件中初始化应用，否则不要使用 <code>React.createElement</code></li>
</ul>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul>
<li>组件文件扩展名</li>
</ul>
<p>如果使用 JavaScript，则文件扩展名为 <code>.js</code>；如果使用 <code>TypeScript</code>，则文件扩展名为 <code>.tsx</code></p>
<ul>
<li>组件文件名</li>
</ul>
<p>如果是组件文件，则使用 PascalCase，如 <code>MyComponent.js</code></p>
<p>如果组件是一个目录，则组件主入口命名为 <code>index</code>，如 <code>index.js</code></p>
<ul>
<li>引用命名</li>
</ul>
<p>React 组件使用 PascalCase，组件实例使用 CamelCase，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md">react&#x2F;jsx-pascal-case</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">import reservationCard from &#x27;./ReservationCard&#x27;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import ReservationCard from &#x27;./ReservationCard&#x27;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const ReservationItem = &lt;ReservationCard /&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const reservationItem = &lt;ReservationCard /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>组件命名</li>
</ul>
<p>使用文件名作为组件名字，例如, <code>ReservationCard.js</code> 应该包含名为 <code>ReservationCard</code> 的引用，然而对于文件夹中的根组件, 使用 <code>index.js</code> 作为文件名，使用文件夹的名字作为组件的名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">import Footer from &#x27;./Footer/Footer&#x27;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">import Footer from &#x27;./Footer/index&#x27;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import Footer from &#x27;./Footer&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>组件属性名</li>
</ul>
<p>React DOM 使用小驼峰式命名法来定义属性的名称，而不使用 HTML 属性名称的命名约定，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div onClick=&#123;this.handler&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Class-Component-VS-Functional-Component"><a href="#Class-Component-VS-Functional-Component" class="headerlink" title="Class Component VS Functional Component"></a>Class Component VS Functional Component</h3><p>只允许使用 <code>Class Component</code> 和 <code>Functional Component</code> 两种形态来书写组件，建议尽量使用函数式组件配合 Hooks 来进行开发</p>
<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>遵循以下JSX语法的对齐风格，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md">react&#x2F;jsx-closing-bracket-location</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo superLongParam=&#x27;bar&#x27;</span><br><span class="line">     anotherSuperLongParam=&#x27;baz&#x27; /&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo</span><br><span class="line">  superLongParam=&#x27;bar&#x27;</span><br><span class="line">  anotherSuperLongParam=&#x27;baz&#x27;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">// if props fit in one line then keep it on the same line</span><br><span class="line">&lt;Foo bar=&#x27;bar&#x27; /&gt;</span><br><span class="line"></span><br><span class="line">// children get indented normally</span><br><span class="line">&lt;Foo</span><br><span class="line">  superLongParam=&#x27;bar&#x27;</span><br><span class="line">  anotherSuperLongParam=&#x27;baz&#x27;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;Quux /&gt;</span><br><span class="line">&lt;/Foo&gt;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">&#123;showButton &amp;&amp;</span><br><span class="line">  &lt;Button /&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">&#123;</span><br><span class="line">  showButton &amp;&amp;</span><br><span class="line">    &lt;Button /&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&#123;showButton &amp;&amp; (</span><br><span class="line">  &lt;Button /&gt;</span><br><span class="line">)&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&#123;showButton &amp;&amp; &lt;Button /&gt;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ul>
<li>自闭合的标签前要加一个空格，eslint: <a href="https://eslint.org/docs/rules/no-multi-spaces">no-multi-spaces</a>, <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md">react&#x2F;jsx-tag-spacing</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo/&gt;</span><br><span class="line"></span><br><span class="line">// very bad</span><br><span class="line">&lt;Foo                 /&gt;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">&lt;Foo</span><br><span class="line"> /&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>不要在 JSX 的花括号里边加空格，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md">react&#x2F;jsx-curly-spacing</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo bar=&#123; baz &#125; /&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo bar=&#123;baz&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>JSX 属性要使用单引号，与其他普通 JS 保持一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo bar=&quot;bar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo bar=&#x27;bar&#x27; /&gt;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">&lt;Foo style=&#123;&#123; left: &quot;20px&quot; &#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo style=&#123;&#123; left: &#x27;20px&#x27; &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li>属性名使用 CamelCase</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo</span><br><span class="line">  UserName=&#x27;hello&#x27;</span><br><span class="line">  phone_number=&#123;12345678&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo</span><br><span class="line">  userName=&#x27;hello&#x27;</span><br><span class="line">  phoneNumber=&#123;12345678&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>当属性值为true时可以省略， eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md">react&#x2F;jsx-boolean-value</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo</span><br><span class="line">  hidden=&#123;true&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo</span><br><span class="line">  hidden</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo hidden /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>避免使用数组的索引作为 key 属性值, 建议使用稳定的ID，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md">react&#x2F;no-array-index-key</a></li>
</ul>
<blockquote>
<p>原因：不使用稳定的 ID 会对性能产生副作用并且组件状态会出问题，是一种<a href="https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318">反模式</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&#123;todos.map((todo, index) =&gt;</span><br><span class="line">  &lt;Todo</span><br><span class="line">    &#123;...todo&#125;</span><br><span class="line">    key=&#123;index&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">)&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&#123;todos.map(todo =&gt; (</span><br><span class="line">  &lt;Todo</span><br><span class="line">    &#123;...todo&#125;</span><br><span class="line">    key=&#123;todo.id&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">))&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为所有的非必需属性定义使用 defaultProps 明确的默认值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">function SFC (&#123; foo, bar, children &#125;) &#123;</span><br><span class="line">  return &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line">SFC.propTypes = &#123;</span><br><span class="line">  foo: PropTypes.number.isRequired,</span><br><span class="line">  bar: PropTypes.string,</span><br><span class="line">  children: PropTypes.node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function SFC (&#123; foo, bar, children &#125;) &#123;</span><br><span class="line">  return &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line">SFC.propTypes = &#123;</span><br><span class="line">  foo: PropTypes.number.isRequired,</span><br><span class="line">  bar: PropTypes.string,</span><br><span class="line">  children: PropTypes.node</span><br><span class="line">&#125;</span><br><span class="line">SFC.defaultProps = &#123;</span><br><span class="line">  bar: &#x27;&#x27;,</span><br><span class="line">  children: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h3><p>避免使用字符串引用，请使用回调函数作为引用，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md">react&#x2F;no-string-refs</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo</span><br><span class="line">  ref=&#x27;myRef&#x27;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo</span><br><span class="line">  ref=&#123;ref =&gt; &#123; this.myRef = ref &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="圆括号"><a href="#圆括号" class="headerlink" title="圆括号"></a>圆括号</h3><p>当 JSX 标签超过一行时使用圆括号包裹， eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/wrap-multilines.md">react&#x2F;wrap-multilines</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">render () &#123;</span><br><span class="line">  return &lt;MyComponent className=&#x27;long body&#x27; foo=&#x27;bar&#x27;&gt;</span><br><span class="line">           &lt;MyChild /&gt;</span><br><span class="line">         &lt;/MyComponent&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">render () &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;MyComponent className=&#x27;long body&#x27; foo=&#x27;bar&#x27;&gt;</span><br><span class="line">      &lt;MyChild /&gt;</span><br><span class="line">    &lt;/MyComponent&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good, when single line</span><br><span class="line">render () &#123;</span><br><span class="line">  const body = &lt;div&gt;hello&lt;/div&gt;</span><br><span class="line">  return &lt;MyComponent&gt;&#123;body&#125;&lt;/MyComponent&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul>
<li>没有子元素的标签请自闭合，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md">react&#x2F;self-closing-comp</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo className=&#x27;stuff&#x27;&gt;&lt;/Foo&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo className=&#x27;stuff&#x27; /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果组件包含多行属性，在新的一行闭合标签，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md">react&#x2F;jsx-closing-bracket-location</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;Foo</span><br><span class="line">  bar=&#x27;bar&#x27;</span><br><span class="line">  baz=&#x27;baz&#x27; /&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;Foo</span><br><span class="line">  bar=&#x27;bar&#x27;</span><br><span class="line">  baz=&#x27;baz&#x27;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>使用箭头函数包裹本地变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function ItemList (props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;props.items.map((item, index) =&gt; (</span><br><span class="line">        &lt;Item</span><br><span class="line">          key=&#123;item.key&#125;</span><br><span class="line">          onClick=&#123;() =&gt; doSomethingWith(item.name, index)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>类组件的内部方法不要使用下划线前缀</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">class extends React.Component &#123;</span><br><span class="line">  _onClickSubmit () &#123;</span><br><span class="line">    // do stuff</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // other stuff</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">class extends React.Component &#123;</span><br><span class="line">  onClickSubmit () &#123;</span><br><span class="line">    // do stuff</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // other stuff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>确保在 render 方法中存在返回值，eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/pull/502">require-render-return</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">render () &#123;</span><br><span class="line">  (&lt;div /&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">render () &#123;</span><br><span class="line">  return (&lt;div /&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hooks-书写规范"><a href="#Hooks-书写规范" class="headerlink" title="Hooks 书写规范"></a>Hooks 书写规范</h3><ul>
<li>Hooks 只能应用于函数式组件中</li>
<li>只在 React 函数最顶层使用 Hooks</li>
</ul>
<blockquote>
<p>不要在循环，条件或嵌套函数中调用 Hook， 确保总是在你的 React 函数的最顶层调用他们</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bad</span><br><span class="line">function a () &#123;</span><br><span class="line">  const [count, setCount] = useState(0)</span><br><span class="line">  useEffect(function persistForm() &#123;</span><br><span class="line">    localStorage.setItem(&#x27;formData&#x27;, accountName)</span><br><span class="line">  &#125;)</span><br><span class="line">  const x = function () &#123;&#125;</span><br><span class="line">  const [timer, setTimer] = useState(0)</span><br><span class="line"></span><br><span class="line">  // main logic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">function a () &#123;</span><br><span class="line">  const [count, setCount] = useState(0)</span><br><span class="line">  useEffect(function persistForm() &#123;</span><br><span class="line">    localStorage.setItem(&#x27;formData&#x27;, accountName)</span><br><span class="line">  &#125;)</span><br><span class="line">  const [timer, setTimer] = useState(0)</span><br><span class="line">  const x = function () &#123;&#125;</span><br><span class="line">  // main logic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>规范</tag>
        <tag>React</tag>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>国际化方案调研与应用</title>
    <url>/2022/09/10/blog76/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>国际化（internationalization， 简称i18n）是一个能够让产品适应多地区和多语言的能力。对于国际化公司而言，产品的使用者往往是来自不同国家、不同地区的用户人群，对平台使用语言的要求不尽相同。因此，有必要实现一套前端国际化通用方案，旨在提供语言环境适配和切换的能力，降低用户阅读门槛，从而提升平台使用体验和工作效率。</p>
<h1 id="三、目标"><a href="#三、目标" class="headerlink" title="三、目标"></a>三、目标</h1><p>针对目前各平台项目没有提供国际化功能，将制定一套前端通用国际化方案，帮助平台开发者快速接入国际化功能而无需手动实现。</p>
<p>结合目前技术选型和业务情况，国际化方案需要支持的能力包括以下几点：</p>
<h3 id="支持多语言展示与切换（核心）"><a href="#支持多语言展示与切换（核心）" class="headerlink" title="支持多语言展示与切换（核心）"></a>支持多语言展示与切换（核心）</h3><p>默认语言、多类型语言选择与切换</p>
<h3 id="支持翻译资源管理"><a href="#支持翻译资源管理" class="headerlink" title="支持翻译资源管理"></a>支持翻译资源管理</h3><p>非硬编码，业务方可以通过线上平台维护翻译资源，支持线上修改资源、扩展多语言，从而降低维护成本。</p>
<h3 id="支持cli初始化国际化配置"><a href="#支持cli初始化国际化配置" class="headerlink" title="支持cli初始化国际化配置"></a>支持cli初始化国际化配置</h3><p>cli初始化项目时支持添加国际化功能（可选）</p>
<h3 id="支持自动识别-切换语言"><a href="#支持自动识别-切换语言" class="headerlink" title="支持自动识别&#x2F;切换语言"></a>支持自动识别&#x2F;切换语言</h3><p>识别地区，自动切换到当前地区对应的语言环境</p>
<h3 id="兼容UI库国际化"><a href="#兼容UI库国际化" class="headerlink" title="兼容UI库国际化"></a>兼容UI库国际化</h3><p>UI库内置组件的国际化同步</p>
<h1 id="四、理想技术模型"><a href="#四、理想技术模型" class="headerlink" title="四、理想技术模型"></a>四、理想技术模型</h1><p><img src="/2022/09/10/blog76/image2022-3-20_11-53-16-1701765642251-50.png" alt="img"></p>
<p><img src="/2022/09/10/blog76/image2022-3-22_23-24-44-1701765654779-52.png" alt="img"></p>
<h1 id="五、开源方案（运行时）"><a href="#五、开源方案（运行时）" class="headerlink" title="五、开源方案（运行时）"></a>五、开源方案（运行时）</h1><h2 id="1-react-intl"><a href="#1-react-intl" class="headerlink" title="1. react-intl"></a>1. react-intl</h2><p>react-intl是formatjs(JavaScript国际化库)的一部分，其主要针对基于react框架开发的项目来实现国际化， 通过使用其提供的API来实现对文本、日期、货币、数字的翻译。</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>1）<strong>自定义配置语言字典</strong>。语言字典就是各类语言所对应的数据映射集，以文件的形式存储，必须保持相同的格式。如：</p>
<p>en_US.js:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const en_US = &#123;</span><br><span class="line">    &quot;hello&quot; : &quot;Hello World&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;Test, &#123;name&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">export &#123; en_US &#125;</span><br></pre></td></tr></table></figure>

<p>zh_CN.js:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const zh_CN = &#123;</span><br><span class="line">    &quot;hello&quot; : &quot;你好世界&quot;,</span><br><span class="line">    &quot;test&quot;: 测试, &#123;name&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">export &#123; zh_CN &#125;</span><br></pre></td></tr></table></figure>

<p>2）<strong>生成全局配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import &#123; zh_CN &#125; from &#x27;./zh_CN&#x27;;</span><br><span class="line">import &#123; en_US &#125; from &#x27;./en_US&#x27;;</span><br><span class="line"> </span><br><span class="line">const defaultLocale = &#x27;en-US&#x27;</span><br><span class="line">const messages = &#123;</span><br><span class="line">    &#x27;en-US&#x27;: en_US,</span><br><span class="line">    &#x27;zh_CN&#x27;: zh_CN,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">export &#123; defaultLocale, messages &#125;</span><br></pre></td></tr></table></figure>



<p>2）在项目入口文件中引入<strong>react-intl</strong>提供的国际化容器组件<strong>IntlProvider，</strong>包裹在根组件外面， 并导入默认全局配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ReactDOM from &#x27;react-dom&#x27;</span><br><span class="line">import APP from &#x27;./APP.jsx&#x27;</span><br><span class="line">import &#123; defaultLocale, messages &#125; from &#x27;common/config/i18n&#x27;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;IntlProvider locale=&#123;defaultLocale&#125; defaultLocale=&#123;defaultLocale&#125; messages=&#123;messages[defaultLocale]&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/IntlProvider&gt;,</span><br><span class="line">    document.getElementById(&#x27;root&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>导入全局配置后，我们就能使用react-intl提供的组件&#x2F;API来展示当前语言匹配的文案了。react-intl支持<strong>component</strong>、<strong>hoc</strong>、<strong>hook</strong>两种使用方法:</p>
<h4 id="Component写法："><a href="#Component写法：" class="headerlink" title="Component写法："></a>Component写法：</h4><p>使用react-intl提供的**<FormattedMessage><strong>组件</strong>，<strong>并设置</strong>id**为语言字典中对应的key，组件会自动解析为span标签，并自动填充对应的文案：</FormattedMessage></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; FormattedMessage  &#125; from &#x27;react-intl&#x27;;</span><br><span class="line"> </span><br><span class="line">&lt;FormattedMessage id=&quot;hello&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>如果文本中包含变量，则需要通过<strong>values</strong>字段传入文本模板中需要解析的数据。比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; FormattedMessage  &#125; from &#x27;react-intl&#x27;;</span><br><span class="line"> </span><br><span class="line">&lt;FormattedMessage id=&quot;test&quot; values=&#123;&#123; name:&quot;Shawli&quot; &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>



<p><strong>HOC写法：</strong></p>
<p>使用react-intl提供的<strong>injectIntl</strong>可以对<strong>class组件</strong>进行包装<strong>，</strong>通过<strong>props</strong>向组件注入intl对象，然后通过调用intl.formatMessage获取翻译文案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#123; injectIntl &#125; from &#x27;react-intl&#x27;;</span><br><span class="line"> </span><br><span class="line">class Content extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123; intl &#125; = props</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    intl.formatMessage(&#123; id : hello&#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const ContenIntl = injectIntl(Content)</span><br><span class="line">export default ContenIntl;</span><br></pre></td></tr></table></figure>



<p><strong>Hook写法：</strong></p>
<p>支持React Function Component的Hook写法，可以使用react-intl提供的useIntl来实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useIntl &#125; from &#x27;react-intl&#x27;; </span><br><span class="line">const TestComponent = () =&gt; &#123;</span><br><span class="line">  const intl = useIntl();</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;intl.formatMessage(&#123;id: &#x27;hello&#x27;&#125;, &#123;name: &#x27;Shawli&#x27;&#125;)&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="umi支持"><a href="#umi支持" class="headerlink" title="umi支持"></a>umi支持</h3><p>umi框架内置国际化功能，其底层也是基于react-intl来实现的，我们可以通过其提供的api来实现国际化能力：</p>
<p>1）通过umi提供的<strong>useIntl</strong>来获取formatMessage等api来进行具体的值绑定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123; useIntl &#125; from &#x27;umi&#x27;;</span><br><span class="line"> </span><br><span class="line">export default function () &#123;</span><br><span class="line">  const intl = useIntl();</span><br><span class="line">  return (</span><br><span class="line">    &lt;button type=&quot;primary&quot;&gt;</span><br><span class="line">      &#123;intl.formatMessage(</span><br><span class="line">        &#123;</span><br><span class="line">          id: &#x27;name&#x27;,</span><br><span class="line">          defaultMessage: &#x27;你好，旅行者&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &#x27;旅行者&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<strong>setLocale</strong>来设置切换语言，默认会刷新页面</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; setLocale &#125; from &#x27;umi&#x27;;</span><br><span class="line"> </span><br><span class="line">// 刷新页面</span><br><span class="line">setLocale(&#x27;zh-TW&#x27;, true);</span><br><span class="line"> </span><br><span class="line">// 不刷新页面</span><br><span class="line">setLocale(&#x27;zh-TW&#x27;, false);</span><br></pre></td></tr></table></figure>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p>
<ul>
<li>支持多种方式来实现语言翻译，兼容Class组件和Function组件，用法丰富；</li>
<li>通过props的方式来注入语言包，可以在不刷新页面的情况下切换语言</li>
</ul>
<p>缺点：</p>
<ul>
<li>只能应用于视图层，例如React.Component。对于Vanilla JS文件（原生JS），无法对其进行国际化</li>
<li>对于injectIntl包裹的组件，要获取Component的实例，react-intl不能使用常规方法如：this.refs.xxx</li>
</ul>
<h2 id="2-react-intl-universal"><a href="#2-react-intl-universal" class="headerlink" title="2. react-intl-universal"></a>2. react-intl-universal</h2><p>基于react-intl的一些缺陷，react-intl-universal是阿里巴巴团队提供的一个国际化方案。它也是基于react-intl开发，提供了一个可以用来加载当前地区配置的单例对象，并允许非react组件（原生JS）使用这个库。</p>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>通过调用intl对象的<strong>init</strong>方法，并传入<strong>currentLocale</strong>和<strong>locales</strong>数据来初始化配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &quot;react&quot;;</span><br><span class="line"> </span><br><span class="line">import intl from &#x27;react-intl-universal&#x27;;</span><br><span class="line"> </span><br><span class="line">// common locale data</span><br><span class="line">require(&#x27;intl/locale-data/jsonp/en.js&#x27;);</span><br><span class="line">require(&#x27;intl/locale-data/jsonp/zh.js&#x27;);</span><br><span class="line"> </span><br><span class="line">// app locale data</span><br><span class="line">const locales = &#123;</span><br><span class="line">  &quot;en-US&quot;: require(&#x27;./locales/en-US.js&#x27;),</span><br><span class="line">  &quot;zh-CN&quot;: require(&#x27;./locales/zh-CN.js&#x27;),</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line"> </span><br><span class="line">  state = &#123;initDone: false&#125;;</span><br><span class="line"> </span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.loadLocales();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  loadLocales() &#123;</span><br><span class="line">    const currentLocale = intl.determineLocale(&#123;</span><br><span class="line">        urlLocaleKey: &#x27;lang&#x27;</span><br><span class="line">    &#125;)     </span><br><span class="line">    intl.init(&#123;</span><br><span class="line">      currentLocale: currentLocale || &#x27;en-US&#x27;,</span><br><span class="line">      locales,</span><br><span class="line">    &#125;).then(() =&gt; &#123;</span><br><span class="line">      // After loading CLDR locale data, start to render</span><br><span class="line">      this.setState(&#123;initDone: true&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1-get"><a href="#1-get" class="headerlink" title="1) get"></a>1) get</h4><p>状态更新后，通过intl提供的<strong>get</strong>方法来获取数据 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">... </span><br><span class="line">render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      this.state.initDone &amp;&amp;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;intl.get(&#x27;SIMPLE&#x27;)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-getHtml"><a href="#2-getHtml" class="headerlink" title="2) getHtml"></a>2) getHtml</h4><p>也可以使用intl.getHtml来返回html结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// zh.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;TIP&quot;: &quot;&lt;span style=&#x27;color:red&#x27;&gt;span元素&lt;/span&gt;&quot;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// Component</span><br><span class="line">...</span><br><span class="line">render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      this.state.initDone &amp;&amp;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;intl.getHtml(&#x27;TIP&#x27;)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-切换语言"><a href="#3-切换语言" class="headerlink" title="3) 切换语言"></a>3) 切换语言</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">const setLocale = locale =&gt; &#123;</span><br><span class="line">  return intl.init(&#123;</span><br><span class="line">    currentLocale: locale,</span><br><span class="line">    locales: locales</span><br><span class="line">  &#125;).then(() =&gt; &#123;</span><br><span class="line">        window.location.search = `?lang=$&#123;locale&#125;`</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p>
<ul>
<li>使用简单，只包含三个主要的API和可选的帮助器</li>
<li>支持在浏览器和Node中运行</li>
</ul>
<p>缺点</p>
<ul>
<li>无法实现无感知切换语言，需要刷新页面</li>
</ul>
<h2 id="3-react-i18next"><a href="#3-react-i18next" class="headerlink" title="3. react-i18next"></a>3. react-i18next</h2><p> I18next是一个历史悠久且非常完整的国际化框架，不仅适用于浏览器，也能够在其他javascript环境（Node&#x2F;Deno）上运行。react-i18next则是基于i18next开发的一个适用于react&#x2F;react-native的国际化方案。它能够支持组件方案，囊括class组件、HOC和Hook。同时也提供了丰富的插件支持，比如可以用插件检测当前系统的语言环境，从服务器或者文件系统加载翻译资源等。</p>
<h3 id="初始化配置-1"><a href="#初始化配置-1" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>1）<strong>自定义配置语言字典</strong>。i8next规定使用JSON文件来存储翻译文案，如：</p>
<p>en.json:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;hello&quot; : &quot;Hello World&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;Test, &#123;name&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>zh.json:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;hello&quot; : &quot;你好世界&quot;,</span><br><span class="line">    &quot;test&quot;: 测试, &#123;name&#125;&quot;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>2）导入资源，通过<strong>init</strong>方法初始化配置，并导出i18n实例:</p>
<p>index.js: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import i18n from &#x27;i18next&#x27;</span><br><span class="line">import &#123; initReactI18next &#125; from &#x27;react-i18next&#x27;</span><br><span class="line">import translation_en from &#x27;./en.json&#x27;</span><br><span class="line">import translation_zh from &#x27;./zh.json&#x27;</span><br><span class="line"> </span><br><span class="line">// 资源</span><br><span class="line">const resources = &#123;</span><br><span class="line">  en: &#123;</span><br><span class="line">    translation: translation_en</span><br><span class="line">  &#125;,</span><br><span class="line">  zh: &#123;</span><br><span class="line">    translation: translation_zh</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">i18n.use(initReactI18next).init(&#123;</span><br><span class="line">  resources,</span><br><span class="line">  lng: &#x27;en&#x27;,</span><br><span class="line">  interpolation: &#123;</span><br><span class="line">    escapeValue: false // react already safes from xss</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">export default i18n</span><br></pre></td></tr></table></figure>



<p>2）在项目入口文件中导入配置，即可支持初始化流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ReactDOM from &#x27;react-dom&#x27;</span><br><span class="line">import APP from &#x27;./APP.jsx&#x27;</span><br><span class="line">...</span><br><span class="line">import &#x27;@/config/i18n&#x27;  </span><br><span class="line"> </span><br><span class="line">ReactDOM.render(     </span><br><span class="line">    &lt;App /&gt;,</span><br><span class="line">    document.getElementById(&#x27;root&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><p>1）组件中使用：</p>
<p>这里仅以Hook写法举例，其他用法参考官方文档：<a href="https://react.i18next.com/">https://react.i18next.com/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#123; useTranslation &#125; from &#x27;react-i18next&#x27;</span><br><span class="line"> </span><br><span class="line">export default function () &#123;</span><br><span class="line">  const &#123; t &#125; = useTranslation()</span><br><span class="line">  return (</span><br><span class="line">    &lt;button type=&quot;primary&quot;&gt;</span><br><span class="line">      &#123;t(&#x27;hello&#x27;)&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）原生JS中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import i18n from &#x27;i18next&#x27;</span><br><span class="line">...</span><br><span class="line">const val = i18n.t(&#x27;test&#x27;, &#123; name: &#x27;Shawli&#x27; &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h3><p>i18next提供了切换语言的API，可以直接使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import i18n from &#x27;i18next&#x27;</span><br><span class="line">...</span><br><span class="line">const changeLanguage = (lng) =&gt; &#123;</span><br><span class="line">   i18n.changeLanguage(lng);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>使用hook方式，简单易用。</li>
<li>提供切换语言，不用手动实现</li>
<li>方案完整性高，同时支持浏览器端和服务端</li>
</ul>
<h2 id="4-方案对比"><a href="#4-方案对比" class="headerlink" title="4. 方案对比"></a>4. 方案对比</h2><h3 id="基础对比"><a href="#基础对比" class="headerlink" title="基础对比"></a>基础对比</h3><p>总结：react-i18next在包大小、下载时间、下载量上具有绝对的优势</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">react-intl</th>
<th align="left">react-intl-universal</th>
<th align="left">react-i18next</th>
</tr>
</thead>
<tbody><tr>
<td align="left">包大小(kB) <a href="https://bundlephobia.com/">https://bundlephobia.com/</a></td>
<td align="left">56.7</td>
<td align="left">86.5</td>
<td align="left">20 ✅</td>
</tr>
<tr>
<td align="left">下载时间（ms）4G</td>
<td align="left">19</td>
<td align="left">32</td>
<td align="left">7 ✅</td>
</tr>
<tr>
<td align="left">下载量</td>
<td align="left">900000+</td>
<td align="left">10000+</td>
<td align="left">1400000+  ✅</td>
</tr>
</tbody></table>
<h4 id="https-www-npmtrends-com-react-i18next-vs-react-intl-vs-react-intl-universal"><a href="#https-www-npmtrends-com-react-i18next-vs-react-intl-vs-react-intl-universal" class="headerlink" title="https://www.npmtrends.com/react-i18next-vs-react-intl-vs-react-intl-universal"></a><a href="https://www.npmtrends.com/react-i18next-vs-react-intl-vs-react-intl-universal">https://www.npmtrends.com/react-i18next-vs-react-intl-vs-react-intl-universal</a></h4><h4 id><a href="#" class="headerlink" title></a><img src="/2022/09/10/blog76/image2022-3-11_16-5-24-1701765832224-54.png" alt="img"></h4><h3 id="特性对比"><a href="#特性对比" class="headerlink" title="特性对比"></a>特性对比</h3><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">react-intl</th>
<th align="left">react-intl-universal</th>
<th align="left">react-i18next</th>
</tr>
</thead>
<tbody><tr>
<td align="left">无感切换语言</td>
<td align="left">✅</td>
<td align="left">❌</td>
<td align="left">✅</td>
</tr>
<tr>
<td align="left">Vanilla JS支持</td>
<td align="left">❌</td>
<td align="left">✅</td>
<td align="left">✅</td>
</tr>
<tr>
<td align="left">Hook写法支持</td>
<td align="left">✅</td>
<td align="left">❌</td>
<td align="left">✅</td>
</tr>
<tr>
<td align="left">模板解析支持</td>
<td align="left">✅</td>
<td align="left">✅</td>
<td align="left">✅</td>
</tr>
<tr>
<td align="left">内置切换语言API</td>
<td align="left">❌</td>
<td align="left">✅</td>
<td align="left">✅</td>
</tr>
<tr>
<td align="left">无破坏性</td>
<td align="left">❌（装饰器的代码实现会改变ref）</td>
<td align="left">✅</td>
<td align="left">✅</td>
</tr>
<tr>
<td align="left">初始值获取</td>
<td align="left">手动传入</td>
<td align="left">url &#x2F; cookie &#x2F; localStorage</td>
<td align="left">localStorage&#x2F;url</td>
</tr>
<tr>
<td align="left">是否需要Provider</td>
<td align="left">✅</td>
<td align="left">❌</td>
<td align="left">❌</td>
</tr>
<tr>
<td align="left">服务端支持</td>
<td align="left">❌</td>
<td align="left">✅</td>
<td align="left"><strong>✅</strong></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>国际化</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>国际化</tag>
      </tags>
  </entry>
  <entry>
    <title>vite和SnowPack简介</title>
    <url>/2022/10/17/blog77/</url>
    <content><![CDATA[<p>目前主流的JS开发构建工具有两个——webpack用于前端项目的打包，rollup用于库的打包。</p>
<p>但是，随着ESM规范被各大主流浏览器支持，JS模块化已经成为了浏览器的内置功能，因此JS代码实际上已经不需要打包了。这使得市面上出现了snowpack,vite等主打budless（不打包）概念的开发构建工具。</p>
<h2 id="什么是Vite"><a href="#什么是Vite" class="headerlink" title="什么是Vite?"></a><strong>什么是Vite?</strong></h2><p>Vite是EVAN YOU开发的下一代前端开发与构建工具：</p>
<ul>
<li>在开发模式下</li>
</ul>
<p>首先，vite启动开发模式时会根据项目中的依赖项使用esbuild进行预构建，这主要是为了：</p>
<ol>
<li>将commonjs模块转换为ESM模块；</li>
<li>将每个依赖项打包构建为一个文件，防止lodash-es这种库在ESM引入时产生瀑布请求（大量瞬时并发的文件get请求）；</li>
</ol>
<p>因为这些依赖项变动较少，这些依赖项在预构建后会被缓存至.vite目录中。</p>
<p>之后，vite对项目代码并不做处理就直接启动开发服务器，利用浏览器对ESM的支持就可以打开项目。</p>
<p>在开发模式下，vite能够做到如此快速主要得益于以下方面：</p>
<ol>
<li>对于需要打包构建或编译转换的文件使用了esbuild，esbuild基于go语言编写，其性能是传统JS打包工具的百倍。</li>
<li>依赖预构建使得占据代码大小的大部分依赖项能够缓存下来，仅在初次启动和依赖变化时重构建。</li>
<li>直接输出ESM至浏览器，省去了传统开发构建工具在DEV Server启动前的打包时间。</li>
</ol>
<p><img src="/2022/10/17/blog77/bundler-1701765988744-62.png" alt="img"><img src="/2022/10/17/blog77/bundless-1701765994366-64.png" alt="img"></p>
<ul>
<li>在生产模式下</li>
</ul>
<ol>
<li>考虑到浏览器兼容性以及实际网络中使用ESM可能会造成RTT时间过长，所以仍然需要打包构建。</li>
<li>又因为esbuild虽然快速，但其一方面还未到1.0的稳定版本，另一方面对代码分割和css处理等支持较弱，所以目前仍然使用rollup打包构建，不过未来很有可能改为esbuild。</li>
</ol>
<p>可以看出，虽然Vite具备了下一代开发构建工具的潜力，但是目前其开发与生产环境打包过程的不同可能会带来项目表现不一致的问题。</p>
<h2 id="什么是SnowPack"><a href="#什么是SnowPack" class="headerlink" title="什么是SnowPack?"></a><strong>什么是SnowPack?</strong></h2><p>SnowPack是Pika团队开发的轻量且快速的前端构建工具。该团队旨在‘<em>让Web</em>应用<em>提速90</em>%’。</p>
<p>SnowPack与Vite大部分功能和思想都非常相似（两者互相学习，如vite依赖预构建学习了snowpack，snowpack的HMR学习了vite）。不过，相比vite的实用主义，snowpack更理想化，技术至上一些。（我自己觉得）</p>
<p>两者的不同主要有以下两点：</p>
<p>1、SnowPack支持Streaming Imports。</p>
<p>Streaming Imports原理非常简单，就是将本地npm包依赖转换为远程npm包依赖，这样做的好处有以下几点：</p>
<ol>
<li>由于远程的npm包已经经过了打包编译，开发构建工具无需对依赖进行处理，节约了构建时间；</li>
<li>开发者无需在本地下载安装依赖项项目就可以运行；</li>
<li>远程npm包分布在CDN边缘节点中，用户页面在打开时会就近下载依赖，节约项目加载时间；</li>
</ol>
<p><strong>Streaming Imports</strong></p>
<p>之所以SnowPack能够想到并使用这种模式是因为pika团队之前开发了一个叫做<a href="https://www.skypack.dev/">SkyPack</a>的项目，该项目就是将npm包打包编译压缩后传至CDN中供开发者使用。</p>
<p>2、SnowPack在生产模式中默认使用了esbuild,不打包直接输出ESM，与开发模式行为保持一致。不过它支持用户选择其它打包构建工具如rollup和webpack。（注意：多选择不意味着就是好的，snowpack选择多但每个模式都存在一些问题，而Vite与rollup深入结合带来的问题会少一些）</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h2><p>目前看来要在实际的生产过程中放弃打包使用ESM Bundless还需要等待一些时日。</p>
<p>Vite的生产打包bundle，开发直出ESM的模式还有待成熟（主要要等esbuild稳定，使得开发和生产行为能够保持一致）。</p>
<p>SnowPack的模式相比Vite更为理想化，也需要进一步的观察。</p>
<p>相比之下，webpack虽然慢，但是其稳定性和生态的成熟度使得它还是目前大型项目开发构建的不二选择。（更何况webpack也在改进之中，比如webpack5性能有了很大提升, esbuild-loder等插件也可以进一步提升其打包速度）</p>
]]></content>
      <categories>
        <category>vite</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>SnowPack</tag>
      </tags>
  </entry>
  <entry>
    <title>blog78</title>
    <url>/2023/12/05/blog78/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之链表</title>
    <url>/2019/10/09/blog8/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：链表和双向链表，循环链表，有序链表。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/linkedList">ES6的JavaScript数据结构实现之链表</a></p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、链表"><a href="#1、链表" class="headerlink" title="1、链表"></a>1、链表</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">element, next</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">element</span> = element;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next</span> = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultEquals</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">equalsFn = defaultEquals</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">equalsFn</span> = equalsFn;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">push</span>(<span class="params">element</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element);</span><br><span class="line"><span class="keyword">let</span> current;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">while</span> (current.<span class="property">next</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line">current.<span class="property">next</span> = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getElementAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; node != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">node = node.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">insert</span>(<span class="params">element, index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element);</span><br><span class="line"><span class="keyword">if</span> (index ==<span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">const</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">node.<span class="property">next</span> = current;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> previous = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index - <span class="number">1</span>);</span><br><span class="line">node.<span class="property">next</span> = previous.<span class="property">next</span>;</span><br><span class="line">previous.<span class="property">next</span> = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">removeAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = current.<span class="property">next</span>; </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> previous = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index - <span class="number">1</span>);</span><br><span class="line">current = previous.<span class="property">next</span>;</span><br><span class="line">previous.<span class="property">next</span> = current;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line"><span class="keyword">return</span> current.<span class="property">element</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">remove</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element);</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">indexOf</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span> &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">equalsFn</span>(element, current.<span class="property">element</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHead</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.head.element&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="title function_">size</span>() &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span>;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">15</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">10</span>);</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">removeAt</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">4</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">indexOf</span>(<span class="number">15</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">indexOf</span>(<span class="number">1</span>));</span><br><span class="line">list.<span class="title function_">remove</span>(<span class="number">15</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line"></span><br><span class="line"><span class="title class_">LinkedList</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">LinkedList</span></span><br></pre></td></tr></table></figure>

<h4 id="2、双向链表"><a href="#2、双向链表" class="headerlink" title="2、双向链表"></a>2、双向链表</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyNode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Node</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">element, next, prev</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(element, next);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">prev</span> = prev</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkedList</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">equalsFn = defaultEquals</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span> (equalsFn);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">undefined</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">DoublyNode</span>(element);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = node; <span class="comment">// NEW</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// attach to the tail node // NEW</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = node;</span><br><span class="line">node.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">insert</span>(<span class="params">element, index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">DoublyNode</span>(element);</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = node;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">current = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">current.<span class="property">next</span> = node;</span><br><span class="line">node.<span class="property">prev</span> = current;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">const</span> previous = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index - <span class="number">1</span>);</span><br><span class="line">current = previous.<span class="property">next</span>; </span><br><span class="line">node.<span class="property">next</span> = current;</span><br><span class="line">previous.<span class="property">next</span> = node;</span><br><span class="line">current.<span class="property">prev</span> = node; </span><br><span class="line">node.<span class="property">prev</span> = previous;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">removeAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">undefined</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>) &#123;</span><br><span class="line">current = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = current.<span class="property">prev</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = <span class="literal">undefined</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index);</span><br><span class="line"><span class="keyword">const</span> previous = current.<span class="property">prev</span>;</span><br><span class="line">previous.<span class="property">next</span> = current.<span class="property">next</span>;</span><br><span class="line">current.<span class="property">next</span>.<span class="property">prev</span> = previous;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line"><span class="keyword">return</span> current.<span class="property">element</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">indexOf</span>(<span class="params">element</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">equalsFn</span>(element, current.<span class="property">element</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getHead</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getTail</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.head.element&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span>;</span><br><span class="line">current = current.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inverseToString</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// if (this.tail == null) &#123;</span></span><br><span class="line"><span class="comment">// return &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.tail.element&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> previous = <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">prev</span>;</span><br><span class="line"><span class="keyword">while</span> (previous != <span class="literal">null</span>) &#123;</span><br><span class="line">objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;previous.element&#125;</span>`</span>;</span><br><span class="line">previous = previous.<span class="property">prev</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>();</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">19</span>);</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">15</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">removeAt</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">inverseToString</span>());</span><br><span class="line"></span><br><span class="line"><span class="title class_">DoublyNode</span></span><br></pre></td></tr></table></figure>

<h4 id="3、循环链表（以扩展上述普通链表Linkedlist为例）"><a href="#3、循环链表（以扩展上述普通链表Linkedlist为例）" class="headerlink" title="3、循环链表（以扩展上述普通链表Linkedlist为例）"></a>3、循环链表（以扩展上述普通链表Linkedlist为例）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CircularLinkedList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkedList</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">equalsFn = defaultEquals</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(equalsFn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element);</span><br><span class="line">    <span class="keyword">let</span> current;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(<span class="variable language_">this</span>.<span class="title function_">size</span>() - <span class="number">1</span>);</span><br><span class="line">      current.<span class="property">next</span> = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set node.next to head - to have circular list</span></span><br><span class="line">    node.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">element, index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element);</span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// if no node  in list</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">          node.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          node.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">          current = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(<span class="variable language_">this</span>.<span class="title function_">size</span>());</span><br><span class="line">          <span class="comment">// update last element</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">          current.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> previous = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index - <span class="number">1</span>);</span><br><span class="line">        node.<span class="property">next</span> = previous.<span class="property">next</span>;</span><br><span class="line">        previous.<span class="property">next</span> = node;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">removeAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> removed = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">          current = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(<span class="variable language_">this</span>.<span class="title function_">size</span>() - <span class="number">1</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">          current.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">          current = removed;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// no need to update last element for circular list</span></span><br><span class="line">        <span class="keyword">const</span> previous = <span class="variable language_">this</span>.<span class="title function_">getElementAt</span>(index - <span class="number">1</span>);</span><br><span class="line">        current = previous.<span class="property">next</span>;</span><br><span class="line">        previous.<span class="property">next</span> = current.<span class="property">next</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">      <span class="keyword">return</span> current.<span class="property">element</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">CircularLinkedList</span>();</span><br><span class="line"></span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">19</span>);</span><br><span class="line">list.<span class="title function_">push</span>(<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">15</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">removeAt</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line"></span><br><span class="line"><span class="title class_">CircularLinkedList</span></span><br></pre></td></tr></table></figure>

<h4 id="4、有序链表"><a href="#4、有序链表" class="headerlink" title="4、有序链表"></a>4、有序链表</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">element, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultEquals</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Compare</span> = &#123;</span><br><span class="line">  <span class="attr">LESS_THAN</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">BIGGER_THAN</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">EQUALS</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defaultCompare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Compare</span>.<span class="property">EQUALS</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span> : <span class="title class_">Compare</span>.<span class="property">BIGGER_THAN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortedLinkedList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkedList</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">equalsFn = defaultEquals, compareFn = defaultCompare</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(equalsFn);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">equalsFn</span> = equalsFn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="variable language_">super</span>.<span class="title function_">push</span>(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">getIndexNextSortedElement</span>(element);</span><br><span class="line">      <span class="variable language_">super</span>.<span class="title function_">insert</span>(element, index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">element, index = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">insert</span>(element, index === <span class="number">0</span> ? index : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> pos = <span class="variable language_">this</span>.<span class="title function_">getIndexNextSortedElement</span>(element);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">insert</span>(element, pos);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getIndexNextSortedElement</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="variable language_">this</span>.<span class="title function_">size</span>() &amp;&amp; current; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> comp = <span class="variable language_">this</span>.<span class="title function_">compareFn</span>(element, current.<span class="property">element</span>);</span><br><span class="line">      <span class="keyword">if</span> (comp === <span class="title class_">Compare</span>.<span class="property">LESS_THAN</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">SortedLinkedList</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">5</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">  list.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line"></span><br><span class="line"><span class="title class_">SortedLinkedList</span></span><br></pre></td></tr></table></figure>

<p>​	</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>前端JavaScript书籍阅读</title>
    <url>/2019/09/14/%E5%89%8D%E7%AB%AFJavaScript%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<p>作为一个想从事前端工作，目前还是零基础的菜鸟，我想通过合理学习，让自己成为能有比较全局观念（前端-后端分离，工程化等），又在前端又能熟练掌握并灵活使用技术的前端工程师。下面是我自己看了一些知乎，豆瓣，博客总结出来一些比较好、经典的JavaScript书籍（好书太多，我也是挑了基本看上去比较适合我的），与大家分享。（这也是我接下来要看书单，因为本人现在还没看完，看完了我再分享一下阅读心得，怎么去把这些“厚书”快速读完）</p>
<span id="more"></span> 

<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p> 熟练掌握JavaScript技术（当然不仅是看书，还是得边看书边Coding，切勿“只看不做”）</p>
<h2 id="书籍阅读："><a href="#书籍阅读：" class="headerlink" title="书籍阅读："></a>书籍阅读：</h2><h3 id="1、JavaScript高级程序设计（Professional-JavaScript-for-Web-Developers）"><a href="#1、JavaScript高级程序设计（Professional-JavaScript-for-Web-Developers）" class="headerlink" title="1、JavaScript高级程序设计（Professional JavaScript for Web Developers）"></a>1、JavaScript高级程序设计（Professional JavaScript for Web Developers）</h3><p>　　JS红宝书，虽说高级，里面却是基础中的基础，但是很厚，建议还是老老实实读下去。也有不少读者觉得这个入门前端的话太过于枯燥（鉴于我之前在W3C School网站看完了Web的JS,CSS,HTML知识看再JS书籍的，所以我是想通过红宝书强化记忆），不少读者推荐《你不知道的JavaScript（上卷）》入门JS，比较轻松有趣。</p>
<h3 id="2、ES6标准入门"><a href="#2、ES6标准入门" class="headerlink" title="2、ES6标准入门"></a>2、ES6标准入门</h3><p>　　JS红宝书可以了解到很多基本概念，其中第六章中，因为 ES6 增加了 class 的概念等，改进很多，第六章可以接着看这个本书的ES6全部。ES6标准比较新，红宝书大都是ES5标准的，建议看完红宝书就看ES6相关书籍。</p>
<p>　　本书的开源代码和电子书，在其Github上，电子书在：<a href="http://es6.ruanyifeng.com/#docs/string">http://es6.ruanyifeng.com/#docs/string</a></p>
<h3 id="3、学习JavaScript数据结构与算法"><a href="#3、学习JavaScript数据结构与算法" class="headerlink" title="3、学习JavaScript数据结构与算法"></a>3、学习JavaScript数据结构与算法</h3><p>​		对任何专业技术人员来说，理解数据结构都非常重要。我们要能借助编程语言来解决问题，而数据结构是这些问题的解决方案中不可或缺的一部分。可以通过对该书籍相关知识的学习，去理解，并自己用JS去实现，增强对JS的掌握。</p>
<p>​		本书的所有代码实现在我的博客和Github上，欢迎一起讨论。</p>
<p>​		地址：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms">https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms</a></p>
<h3 id="4、高性能JavaScript"><a href="#4、高性能JavaScript" class="headerlink" title="4、高性能JavaScript"></a>4、高性能JavaScript</h3><p>　　《高性能JavaScript》揭示的技术和策略能帮助你在开发过程中消除性能瓶颈。你将会了解如何提升各方面的性能，包括代码的加载、运行、DOM交互、页面生存周期等。这个是为了进一步理解如何提升JS性能而看的，红宝书里面也有一些简单说明，可以先看红宝书的相应内容，然后转入该书进行进一步学习。</p>
<h3 id="5、JavaScript设计模式与开发实践"><a href="#5、JavaScript设计模式与开发实践" class="headerlink" title="5、JavaScript设计模式与开发实践"></a>5、JavaScript设计模式与开发实践</h3><p>　　本书的主题是设计模式，本书在尊重《设计模式》原意的同时，针对JavaScript语言特性全面介绍了更适合JavaScript程序员的了16个常用的设计模式，讲解了JavaScript面向对象和函数式编程方面的基础知识，介绍了面向对象的设计原则及其在设计模式中的体现，还分享了面向对象编程技巧和日常开发中的代码重构。红宝书的第七章讲私有变量的部分也有提及设计模式，可以先看一下红宝书相关内容，然后在看这本书，去进一步理解与应用。</p>
]]></content>
      <categories>
        <category>前端书籍</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的JavaScript数据结构实现之集合</title>
    <url>/2019/10/12/blog9/</url>
    <content><![CDATA[<p>目的：ES6标准下的JS数据结构的一些实现代码。（作为记录和启发）</p>
<p>内容：集合。（未完成，待继续）</p>
<span id="more"></span>

<p>所有源码在我的Github上（如果觉得不错记得给星鼓励我哦）：<a href="https://github.com/xinkuiwu/ES6_JavaScript_data_structures_and_algorithms/tree/master/data_structures/set">ES6的JavaScript数据结构实现之集合</a></p>
<p><em>注：Set类在ES6中已经提供了原生的Set结构。</em></p>
<h3 id="一、基础数据结构"><a href="#一、基础数据结构" class="headerlink" title="一、基础数据结构"></a>一、基础数据结构</h3><h4 id="1、集合（非ES6自带的原生Set）"><a href="#1、集合（非ES6自带的原生Set）" class="headerlink" title="1、集合（非ES6自带的原生Set）"></a>1、集合（非ES6自带的原生Set）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Set</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">items</span>, element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">has</span>(element)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">items</span>[element] = element;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">has</span>(element)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[element];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">items</span>).<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">items</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">union</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> unionSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">values</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> unionSet.<span class="title function_">add</span>(value));</span><br><span class="line">    otherSet.<span class="title function_">values</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> unionSet.<span class="title function_">add</span>(value));</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">intersection</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> intersectionSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">const</span> values = <span class="variable language_">this</span>.<span class="title function_">values</span>();</span><br><span class="line">    <span class="keyword">const</span> otherValues = otherSet.<span class="title function_">values</span>();</span><br><span class="line">    <span class="keyword">let</span> biggerSet = values;</span><br><span class="line">    <span class="keyword">let</span> smallerSet = otherValues;</span><br><span class="line">    <span class="keyword">if</span> (otherValues.<span class="property">length</span> - values.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      biggerSet = otherValues;</span><br><span class="line">      smallerSet = values;</span><br><span class="line">    &#125;</span><br><span class="line">    smallerSet.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (biggerSet.<span class="title function_">includes</span>(value)) &#123;</span><br><span class="line">        intersectionSet.<span class="title function_">add</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">difference</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> differenceSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">values</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.<span class="title function_">has</span>(value)) &#123;</span><br><span class="line">        differenceSet.<span class="title function_">add</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isSubsetOf</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &gt; otherSet.<span class="title function_">size</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> isSubset = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">values</span>().<span class="title function_">every</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!otherSet.<span class="title function_">has</span>(values)) &#123;</span><br><span class="line">        isSubset = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> isSubset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> values = <span class="variable language_">this</span>.<span class="title function_">values</span>();</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;values[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; values.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;values[i].toString()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">size</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">values</span>());</span><br><span class="line"><span class="keyword">const</span> setB = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">setB.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">setB.<span class="title function_">add</span>(<span class="number">5</span>);</span><br><span class="line">setB.<span class="title function_">add</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(setB);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">union</span>(setB));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">intersection</span>(setB));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">difference</span>(setB));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(setB.<span class="title function_">difference</span>(set));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">isSubsetOf</span>(setB));</span><br><span class="line"><span class="keyword">const</span> setC = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">setC.<span class="title function_">add</span>(<span class="number">5</span>);</span><br><span class="line">setC.<span class="title function_">add</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(setC.<span class="title function_">isSubsetOf</span>(setB));</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2、ES6原生的Set类。（ES6中的原生的Set没有交、并、差运算，需要我们自己写。同时，我们可以结合使用扩展运算符，把集合转为为数组，再对数组进行运算，再转回集合。）"><a href="#2、ES6原生的Set类。（ES6中的原生的Set没有交、并、差运算，需要我们自己写。同时，我们可以结合使用扩展运算符，把集合转为为数组，再对数组进行运算，再转回集合。）" class="headerlink" title="2、ES6原生的Set类。（ES6中的原生的Set没有交、并、差运算，需要我们自己写。同时，我们可以结合使用扩展运算符，把集合转为为数组，再对数组进行运算，再转回集合。）"></a>2、ES6原生的Set类。（ES6中的原生的Set没有交、并、差运算，需要我们自己写。同时，我们可以结合使用扩展运算符，把集合转为为数组，再对数组进行运算，再转回集合。）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">values</span>()); <span class="comment">// outputs @Iterator</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">1</span>)); <span class="comment">// outputs true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// outputs 1</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">values</span>()); <span class="comment">// outputs [1, 2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">values</span>()); <span class="comment">// outputs [2]</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">values</span>()); <span class="comment">// outputs []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setA = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">setA.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">setA.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">setA.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setB = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">setB.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">setB.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">setB.<span class="title function_">add</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------- Union ----------</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">union</span> = (<span class="params">set1, set2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> unionAb = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  set1.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> unionAb.<span class="title function_">add</span>(value));</span><br><span class="line">  set2.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> unionAb.<span class="title function_">add</span>(value));</span><br><span class="line">  <span class="keyword">return</span> unionAb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">union</span>(setA, setB));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([...setA, ...setB]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------- Intersection ----------</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">intersection</span> = (<span class="params">set1, set2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> intersectionSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  set1.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (set2.<span class="title function_">has</span>(value)) &#123;</span><br><span class="line">      intersectionSet.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">intersection</span>(setA, setB));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> setB.<span class="title function_">has</span>(x))));</span><br><span class="line"></span><br><span class="line"><span class="comment">// alternative - works on FF only</span></span><br><span class="line"><span class="comment">// console.log(new Set([x for (x of setA) if (setB.has(x))]));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------- Difference ----------</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">difference</span> = (<span class="params">set1, set2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> differenceSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  set1.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!set2.<span class="title function_">has</span>(value)) &#123;</span><br><span class="line">      differenceSet.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">difference</span>(setA, setB));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !setB.<span class="title function_">has</span>(x))));</span><br><span class="line"></span><br><span class="line"><span class="comment">// alternative  - works on FF only</span></span><br><span class="line"><span class="comment">// console.log(new Set([x for (x of setA) if (!setB.has(x))]));</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
        <category>集合</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>集合</tag>
      </tags>
  </entry>
</search>
